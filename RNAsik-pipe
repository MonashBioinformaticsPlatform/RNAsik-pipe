#!/home/kirill/.bds/bds

#----------------------------------------------------------------------------------------------------
#  Map Reads to the reference genome
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik-pipe
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the STAR runtime
#   * Gets count data, checks both reverse strand and no strands 
#   * Prepares BAM files for RNAseQC report
#
#----------------------------------------------------------------------------------------------------

include "sikFunctions.bds" 
include "sikHeader.bds"

#------------------------------
# Default parameters
#------------------------------
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
#if(fqRegex.isEmpty()) fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
#if(extn.isEmpty()) extn = "*fastq.gz"

#------------------------------
# Sanity check
#------------------------------

if(fastqc) {
    if(fqDir.isEmpty()) error "Usage: -fqDir /path/to/fastq_reads/"
}
if(star) {
    if(!fqRegex.isEmpty()){
        if(fqRegex == "A") fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
        if(fqRegex == "B") fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
        if(fqRegex == "C") fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
    }
    else error "Usage: please select A, B or C option"
    
    if((fqDirs.isEmpty()) && (fqDir.isEmpty())) error "Usage: you need to specify either -fqDir or -fqDirs"
    if(genomeIndex.isEmpty())  error "Usage: -genomeIndex /path/to/genome_index/"
}
if(count) {
    if(gtfFile.isEmpty())  error "Usage: -gtfFile /path/to/gtf_file"
}
if(prePro) {
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/reference_fasta_file"
}
if(RNAseQC){
   if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/togtf_file"
}
if( args.isEmpty() ) {
    printHelp()
    exit(1)
}
#------------------------------
# fastQC report
#------------------------------
#if(fastqc) {
#    string fastqcFiles = getList.join(" ")
#    task fastqc -o $fastqcReport -f fastq $fastqcFiles
#}

#------------------------------
# BAM generation step
#------------------------------
# list of bam files from STAR run
string[] bamsList

if(star){
    if(!fqDir.isEmpty()) { 
        string{} uniqueNames = getUniqueNames(fqDir)

        for(string fqread : uniqueNames.keys()) {
            # get value for each key and break values into list
            string mapValue = uniqueNames{fqread} 
            string[] getList = mapValue.split(",")
            string[] orderedList = getOrderedList(getList)
            # Do STAR mapping
            string[] reads = getSTARreads(orderedList)
            string bamFile = mapSTAR(fqread, genomeIndex, reads, orderedList) 
            bamsList.add(bamFile)
        }
    }

#   if(!fqDirs.isEmpty()){
#       string[] dirs = getDirs(fqDirs)
#       int numberOfDirs = dirs.size()
#   
#       for(int i=0; i < numberOfDirs; i++){
#       
#           string dir = dirs[i]
#           string makeDirPath = fqDirs+"/"+dir
#           string{} uniqueNames
#   
#           if(!sampleNames.isEmpty()){
#               string[] fixedFileNames = fixFileNames(makeDirPath, sampleNames)
#               uniqueNames = getUniqueNames(fixedFileNames)
#           }
#           else{
#               string[] fqList = getFqList(makeDirPath)
#               uniqueNames = getUniqueNames(fqList)
#           }
#       
#           for(string fqread : uniqueNames.keys()) {
#               # get value for each key and break values into list
#               string mapValue = uniqueNames{fqread} 
#               string[] getList = mapValue.split(",")
#               string[] orderedList = getOrderedList(getList)
#               
#               string[] reads = getSTARreads(orderedList)
#               string bamFile = mapSTAR(fqread, genomeIndex, reads, orderedList) 
#               bamsList.add(bamFile)
#           }
#       }
#   }
}
#------------------------------
# BAM processing
#------------------------------
string[] allReadsFiles
string[] markedBams

for(string bamFile : bamsList) {
    if(prePro) {
        string testCheck = getPrePro(bamFile, fastaRef)
        markedBams.add(testCheck)
    }

    if(count) {
       string readsFile = getReadsCount(bamFile, gtfFile)
       allReadsFiles.add(readsFile)
    }
}
#----------------
# RNAseQC report
#----------------
#TODO need to add `-singleEnd` to the pipeline. 
#TODO if data is single end then RNAseQC neeed to run in such mode
if(RNAseQC){
    string sampleIdsFile = "RNAseQC-sampleIds.txt"
    string RNAseQCsampleIds = getSampleIds(markedBams)
    sampleIdsFile.write(RNAseQCsampleIds)
    string check = getRNAseQC(sampleIdsFile, markedBams)
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
