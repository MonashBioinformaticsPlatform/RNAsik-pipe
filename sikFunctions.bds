include "sikHeader.bds"

#------------------------------
# Make directories as required
#------------------------------
string bamFiles = "bamFiles"
string preqcBamFiles = "preqcBamFiles"
string featureNo = "featureNo"
string featureReverse = "featureReverse"
string fastqcReport = "fastqcReport"
string RNAseQCreport = "RNAseQC-report"

if((!bamFiles.exists()) && (star)) bamFiles.mkdir()
if((!preqcBamFiles.exists()) && (prePro)) preqcBamFiles.mkdir()
if((!featureNo.exists()) && (count)) featureNo.mkdir()
if((!featureReverse.exists()) && (count)) featureReverse.mkdir()
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()

if(extn.isEmpty()) extn = "*fastq.gz"

#------------------------------
# Functions
#------------------------------
string[] getDirs(string fqDirs) {
    
    string[] dirs
    for(string dir : fqDirs.dirPath()){
        string checkDir = dir.isDir()
        if(checkDir) dirs.add(dir)
    }
    return dirs
}

string{} getUniqueNames(string fqDir) {
    # Map with unique root key
    string{} uniqueNames
    for(string fq : fqDir.dirPath(extn)) {
        string getR1Index = fq.lastIndexOf("R1")
        if(getR1Index != -1) {
            # get the root of the file name with regex
            string[] getFile = fq.split(fqRegex)
            string rootName = getFile[0].baseName()
            # append to the list if it isn't in the list already
            if(!uniqueNames.hasKey(rootName)) uniqueNames{rootName}=""
            uniqueNames{rootName}+=fq+","
        }
    }
    return uniqueNames
}

string[] getOrderedList(string[] readsList) {

    string[] orderedReadsList
    bool checkPair
    int getListSize = readsList.size()-1
    
    for(int i : range(0,getListSize)) {
        # get fastq reads and get it pair 
        string singleRead = readsList[i]
        string[] getLastBit = singleRead.split("R1")
        string lastBit = getLastBit.pop()
        string rOne = "R1"+lastBit
        string rTwo = "R2"+lastBit
        string pairedEnd = singleRead.swapExt(rOne, rTwo)
        
        orderedReadsList.add(singleRead)
        checkPair = pairedEnd.isFile()
        if(checkPair) orderedReadsList.add(pairedEnd)
    }

    orderedReadsList.add(checkPair)
    return orderedReadsList
}

string[] getSTARreads(string[] orderedList) {
    
    string boolItem = orderedList.pop()
    bool checkPair = boolItem.parseBool()
    
    if(checkPair) {
        int listSize = orderedList.size()-1
        string[] listR2
        
        for (int i=listSize; i > 0; i -= 2) {
            string read = orderedList.remove(orderedList[i])
            listR2.add(read)
        }
    
        listR2 = listR2.reverse()
        string read1 = orderedList.join(",")
        string read2 = listR2.join(",")
        return [read1, read2]
    }
    else {
        string read1 = orderedList.join(",")
        return [read1]
    }
}

string fixFileNames(string rootName, string fileFix) {
    for(string line : fileFix.readLines()){
        string[] namesList = line.split("\t")
#string oldNamePrefix = "/"+namesList[0]+"_"
#string newNamePrefix = "/"+namesList[1]+"_"
        string oldNamePrefix = namesList[0]
        string newNamePrefix = namesList[1]
        string preFixIndex = rootName.indexOf(oldNamePrefix)
        if(preFixIndex != -1){
            string fixedFileName = rootName.replace(oldNamePrefix, newNamePrefix)
            return fixedFileName
        }
    }
}
string mapSTAR(string rootName, string genomeIndex, string[] listOfReads, string[] rawReads) {
    
    string fixedFileName
    
    if(!sampleNames.isEmpty()){
        fixedFileName = fixFileNames(rootName, sampleNames)
    }
    else{
        fixedFileName = rootName
    }
    
    string rootBase = fixedFileName.baseName()
    string preFix = bamFiles+"/"+rootBase+"_"
    string bamOut = preFix+"Aligned.out.bam"
    string reads = listOfReads.join(" ")
    
    task(bamOut <- rawReads) {
        sys STAR --runThreadN 30 \
                 --genomeDir $genomeIndex \
                 --outSAMtype BAM Unsorted \
                 --outSAMunmapped Within \
                 --outSAMattrRGline ID:001 CN:Unknown DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$rootBase \
                 --readFilesCommand zcat \
                 --readFilesIn $reads \
                 --outFileNamePrefix $preFix
    }
    wait
    # you can remove wait statement and reduce number of threads
    # however this will run all your fastq files in parallel
    # doing this I find a bit impractical on our server because of
    # limited RAM - only 128 Gb
    return bamOut
}

string getPrePro(string bamFile, string fastaRef){
    
    string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")
    task(sortedName <- bamFile) {
        sys picard SortSam TMP_DIR=tmp/ \
                           VALIDATION_STRINGENCY=LENIENT \
                           CREATE_INDEX=true \
                           INPUT=$bamFile \
                           OUTPUT=$sortedName \
                           SORT_ORDER=coordinate
    }
    string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    task(reorderedName <- sortedName) {
        sys picard ReorderSam TMP_DIR=tmp/ \
                              VALIDATION_STRINGENCY=LENIENT \
                              INPUT=$sortedName \
                              OUTPUT=$reorderedName \
                              REFERENCE=$fastaRef
    }
    string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
    string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")
    task(mdupsName <- reorderedName) {
        sys picard MarkDuplicates TMP_DIR=tmp/ \
                                  VALIDATION_STRINGENCY=LENIENT \
                                  CREATE_INDEX=true \
                                  INPUT=$reorderedName \
                                  OUTPUT=$mdupsName \
                                  METRICS_FILE=$metricsName
    }
    return mdupsName
}

string getReadsCount(string bamFile, string gtfFile) {
    
    string reverseFeature = featureReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
    task (reverseFeature <- bamFile) {
        sys featureCounts -a $gtfFile \
                          -o $reverseFeature \
                          $bamFile\
                          -s 2
    }
    string noFeature = featureNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
    task (noFeature <- bamFile) {
        sys featureCounts -a $gtfFile \
                          -o $noFeature \
                          $bamFile \
                          -s 0
    }
    return reverseFeature
}

string getSampleIds(string[] markedBams){
    bool header = true
    string sampleIds
    
    for(string bamFile : markedBams){
        string[] getSampleIds = bamFile.split("_")
        string sampleId = getSampleIds[0].baseName()
        if(header){
            sampleIds += "Sample ID\tBam File\tNotes\n"
            header = false
        }
        sampleIds += "$sampleId\t$bamFile\tNA\n"
    }
    return sampleIds
}

string getRNAseQC(string sampleIdsFile, string[] markedBams){
    task(sampleIdsFile <- markedBams){
        sys rna-seqc -o $RNAseQCreport\
                     -r $fastaRef \
                     -s $sampleIdsFile\
                     -t $gtfFile
    }
    return "all good"
}
