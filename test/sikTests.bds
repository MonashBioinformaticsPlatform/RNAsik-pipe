include "../src/sikHeader.bds"
include "../src/sikFqFiles.bds"

string testDir = "test/fastq/test1"
//string extn = "fastq.gz"
string homeDir = "."

void test_getFqFiles() {

    string[] fqs = getFqFiles(testDir, extn, homeDir)
    for(string fq : fqs) {

        if(!fq.endsWith(extn)) {
            error "Can't happend"
        }

    }
}

//returns list of maximum two elements
//if data is paired-end list == 2
//else if data is single-end list == 1
//TODO can't fail this test.. there gotta be a way to do that..?
void test_getFqPrefix() {

    string[] fqs = getFqFiles(testDir, extn, homeDir)

    string[] pairIdsTypes = ["_R1,_R2", "_1,_2", "none", "", "blah", "_R3,"]
    //TODO do I want to check if after the split each string isn't empty?
    // in case user passed in -pairIds ","
    for(string pairIds : pairIdsTypes) {
        for(string fq : fqs) {
            string[] prefix = getFqPrefix(fq, fqRgxs, pairIds, extn)

            int chkPairIds = pairIds.indexOf(",")
            if(chkPairIds == -1) {
                //this means data isn't paired
                // and therefore prefix must == 1
                if(prefix.size() > 1) {
                    error "Can't happend, prefix returned more than one element in the list, but pairIds is set to have paired end data suffixes"
                }
            }

            if(prefix.size() < 0) {
                error "Can't happend"
            }
            else if(prefix.size() > 2) {
                error "Also can't happend"
            }
        }
    }
}
//TODO to check getSamplesMap, perhaps try to check if fqRegex are working
// i.e splitting occurs, and all those other checks. I guess this is really checking makeSamplesSheet

//return {"toolsExe" => exePath, "toolsMem" => qcMem, "toolsCpu" => qcCpu}
void test_getResource() {
    string configPath = "configs/sik.config"
    string{} configFile = config(configPath)

    string[] toolsNames = ["star", \
                           "hisat2",\
                           "bwa",\
                           "counts",\
                           "samtools",\
                           "picard",\
                           "bedtools",\
                           "skewer",\
                           "fastqc",\
                           "qualiMap",\
                           "multiqc"]

    int toolsNamesSize = toolsNames.size()
    if(toolsNamesSize <= 0) {
        error "This can't happend, toolsNames list must have tool's name's, i.e size >= 0; $toolsNamesSize $toolsNames"
    }

    string{} subNames = {"star" => "Align,Idx", \
                         "bwa" => "Align,Idx", \
                         "hisat2" => "Align,Idx", \
                         "samtools" => "Sort,Qc", \
                         "picard" => "MarkDups,Qc,CreateDict"}

    int subNamesSize = subNames.size()
    if(subNamesSize <= 0) {
        error "This can't happend, thre gotta be subNames! i.e size >= 0; $subNamesSize $subNames"
    }

   for(string toolsName : toolsNames) {

      if(subNames.hasKey(toolsName)) {
          string[] names = subNames{toolsName}.split(",")
          for(string subName : names) {

              string{} resources = getResource(configFile, toolsName, subName)

              if(resources.size() != 3) {
                  error "Can't happend. Must always return map of three items"
              }

              if(resources{"toolsExe"}.isEmpty()) {
                  error "Can't have an empty value for $toolsName, check config file"
              }

              string toolsCpu = resources{"toolsCpu"}

              if(toolsCpu.isEmpty()) {
                  error "Can't have an empty value for $toolsName and $subName, check config file"
              }

              int cpuInt = toolsCpu.parseInt()
              assert("Can't have zero values, check config file, $toolsName $subName set to $toolsCpu", cpuInt != 0)

              string toolsMem = resources{"toolsMem"}
              if(toolsMem.isEmpty()) {
                  error "Can't have an empty value for $toolsName and $subName, check config file"
              }

              int memInt = toolsMem.parseInt()
              assert("Can't have zero values, check config file, $toolsName $subName set to $toolsCpu", memInt != 0)
          }
      }
   }
}
