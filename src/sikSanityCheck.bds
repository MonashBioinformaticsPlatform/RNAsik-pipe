#------------------------------
# Sanity check
#------------------------------

include "sikHeader.bds"
include "sikMakeIndices.bds"

if(fastqc) {
    if(fqDir.isEmpty()) error "Usage: -fqDir /path/to/your/FASTQ/files"
}
if(align == "star") {
    // if neither genomeIndex not makeIndex options are specified then
    // makeIndex is set to true and index is being made during runtime
    if( (genomeIndex.isEmpty()) && (!makeIndex) ) makeIndex = true
    // if regex string was given, be sure to set the right regex
    if(!fqRegex.isEmpty()){
        if(fqRegex == "A") fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
        if(fqRegex == "B") fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
        if(fqRegex == "C") fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
        if(fqRegex == "D") fqRegex = "_R[0-9].fastq.gz$"
    }
    //else error "Usage: You need to select A, B, C or D options using -fqRegex flag"
    // check if FASTQ directory is given 
    if(fqDir.isEmpty()) error "Usage: -fqDir /path/to/your/FASTQ/files"
}
if( (align.isEmpty()) && (!args.isEmpty()) && (!paired) ) warning "There is no information about your data being paired end. If your data is paired end use -paired option"
//
if(!samplesSheet.isEmpty()){
    bool checkType = samplesSheet.isFile()
    if(!checkType) error "-samplesSheet doesn't appear to be pointing at the valid file, double check your path $samplesSheet"
}
if(!fqDir.isEmpty()){
    bool checkFqDir = fqDir.isDir()
    if(!checkFqDir) error "-fqDir doesn't appear to be pointing at the valid directory, double check your path $fqDir"
}
if(!fastaRef.isEmpty()){
    bool checkFastaRef = fastaRef.isFile()
    if(!checkFastaRef) error "-fastaRef doesn't appear to be pointing at the valid file, double check your path $fastaRef"
    else localFastaRef = makeLocalFastaRef(fastaRef)
}
if(!gtfFile.isEmpty()){
    bool checkGTFfile = gtfFile.isFile()
    if(!checkGTFfile) error "-gtfFile doesn't appear to be pointing at the valid file, double check your path $gtfFile"
    else {
        localGTF = makeLocalGTF(gtfFile)
        // checks if gtfFiles is really gtf not gff
        string checkGTF = localGTF.extName()
        if(checkGTF == "gff") setGFF = true
    } 
}
if(threads < 1) error "specify a positive integer, you have specified $threads"
//
if(makeIndex){
    // check that -genomeIndex haven't been specified
    if(!genomeIndex.isEmpty()) error "You have specified both -makeIndex and -genomeIndex, you only need to specify one"
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/referenceFastaFile"
}
if(count) {
    if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
}
if(prePro){
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/referenceFastaFile"
}
if(RNAseQC){
   if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
}
if(!configFile.isEmpty()) {
    bool checkConfigFile = configFile.isFile()
    if(!checkConfigFile) error "-configFile doesn't appear to be pointing at the valid file, double check your path $configFile"
}
if( args.isEmpty() ) {
    printHelp()
    exit(1)
}
// this functions checks if all arguments on the cmd are right
string checkCmdArgs() {
    // list of allowed command line options
    string[] sikArgs = ["-makeIndex", \
                        "-align", \
                        "-fqDir", \
                        "-fqRegex", \
                        "-genomeIndex", \
                        "-count", \
                        "-gtfFile", \
                        "-prePro", \
                        "-fastaRef", \
                        "-fastqc", \
                        "-RNAseQC", \
                        "-threads", \
                        "-extn", \
                        "-samplesSheet", \
                        "-extraOptions", \
                        "-paired", \
                        "-bamFiles", \
                        "-proBams", \
                        "-configFile", \
                        "-multiqc", \
                        "-version" \
                       ]
    // list of options specified by user
    string[] getCmdArgs = args 
    // check for duplicates
    string[] suspects
    for(string cmdItem : args) {
        if(cmdItem.startsWith("-")) {
            if(!sikArgs.has(cmdItem)) error "This flag $cmdItem isn't a valid options, check your spelling"
            if(suspects.has(cmdItem)) error "This flag $cmdItem is duplicated in your command, remove duplicate"
	    suspects.add(cmdItem)
        }
    }
    return "thumbs up"
}
