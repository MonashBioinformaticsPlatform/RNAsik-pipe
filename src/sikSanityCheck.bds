#------------------------------
# Sanity check
#------------------------------

include "sikHeader.bds"
include "sikRefFiles.bds"

// only call this function is -align isn't empty
string chkAlignArgs() {
    string[] alignArgs = ["star", \
                        "starWithAnn", \
                        "hisat2", \
                        "bwa"  \
                       ]
   if(!alignArgs.has(align)) error "Not a valid option for -align $align. Check your input parameter"
   return "thumbs up"
}
if(!align.isEmpty()) string alingArgsChk = chkAlignArgs()
// this functions checks if all arguments on the cmd are right
string checkCmdArgs() {
    // list of allowed command line options
    string[] sikArgs = ["-align", \
                        "-fqDir", \
                        "-refFiles", \
                        "-paired", \
                        "-counts", \
                        "-all", \
                        "-gtfFile", \
                        "-fastaRef", \
                        "-genomeIdx", \
                        "-mdups", \
                        "-qc", \
                        "-exonicRate", \
                        "-multiqc", \
                        "-trim", \
                        "-cov", \
                        "-umi", \
                        "-samplesSheet", \
                        "-outDir", \
                        "-extn", \
                        "-pairIds", \
                        "-extraOpts", \
                        "-configFile", \
                        "-strand", \
                        "-bamsDir" \
                       ]
    // list of options specified by user
    string[] getCmdArgs = args 
    // check for duplicates
    string[] suspects
    for(string cmdItem : args) {
        if(cmdItem.startsWith("-")) {
            if(!sikArgs.has(cmdItem)) error "This flag $cmdItem isn't a valid options, check your spelling"
            if(suspects.has(cmdItem)) error "This flag $cmdItem is duplicated in your command, remove duplicate"
	    suspects.add(cmdItem)
        }
    }
    return "thumbs up"
}
if(all) {
    mdups = true
    qc = true
    exonicRate = true
    cov = true
    multiqc = true
}
// assign strand
if(!strand.isEmpty()) {
    if(strand == "0") strand = "non-strand-specific"
    if(strand == "1") strand = "strand-specific-forward"
    if(strand == "2") strand = "strand-specific-reverse"
    //TODO need to check users input, only allo 0,1 or 2 
}

if(!samplesSheet.isEmpty()) if(!samplesSheet.isFile()) error "-samplesSheet doesn't appear to be pointing at the valid file, double check your path $samplesSheet"
if(!fqDir.isEmpty()) {
    int chkHttp = fqDir.toLower().indexOf("http:")
    if(!fqDir.isDir() && chkHttp == -1) error "-fqDir doesn't point to valid directory, check your path $fqDir"
    if(align.isEmpty()) error "-align is empty, not sure why -fqDir $fqDir was specified, add more options"
} 
if( !align.isEmpty() && genomeIdx.isEmpty() ) {
    if(refFiles.isEmpty()) {
        if(fastaRef.isEmpty()) error "You need to either specify -genomeIdx or -fastaRef or -refFiles"
    }
}
if(align == "starWithAnn") {
    if(refFiles.isEmpty() && gtfFile.isEmpty()) {
        error "Usage: -refFiles /path/to/refFiles/directory OR -gtfFile /path/to/GTFfile"
    }
}

if(counts) {
    if(refFiles.isEmpty()) {
        if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
    }
}
if(exonicRate) {
    if(refFiles.isEmpty()) {
        if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
    }
}
if(!configFile.isEmpty()) if(!configFile.isFile()) error "-configFile doesn't appear to be pointing at the valid file, double check your path $configFile"

if(!genomeIdx.isEmpty()) {
    if(!genomeIdx.isDir()) {
        error "-genomeIdx doesn't point to valid directory, check your path to $genomeIdx"
    }
}

if( (!fastaRef.isEmpty()) && (!fastaRef.isFile()) ) error "Check your path to fasta file. It dosen't point to a file. $fastaRef"
if( (!gtfFile.isEmpty()) && (!gtfFile.isFile()) ) error "Check your path to gtf file. It dosen't point to a file. $gtfFile"

if(!bamsDir.isEmpty() && !fqDir.isEmpty()) {
    error "Can't have both -fqDir and -bamsDir set, choose one or another"
}

if( args.isEmpty() ) {
    printHelp()
    exit(1)
}
