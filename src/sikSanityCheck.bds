#------------------------------
# Sanity check
#------------------------------

include "sikHeader.bds"
include "sikRefFiles.bds"

// only call this function is -align isn't empty
string chkAlignArgs() {
    string[] alignArgs = ["star", \
                        "starWithAnn", \
                        "hisat2", \
                        "bwa"  \
                       ]
   if(!alignArgs.has(align)) error "Not a valid option for -align $align. Check your input parameter"
   return "thumbs up"
}
if(!align.isEmpty()) string alingArgsChk = chkAlignArgs()
// this functions checks if all arguments on the cmd are right
string checkCmdArgs() {
    // list of allowed command line options
    string[] sikArgs = ["-align", \
                        "-fqDir", \
                        "-genomeIdx", \
                        "-count", \
                        "-gtfFile", \
                        "-prePro", \
                        "-fastaRef", \
                        "-fastqc", \
                        "-exonicRate", \
                        "-strand", \
                        "-threads", \
                        "-memory", \
                        "-extn", \
                        "-samplesSheet", \
                        "-extraOpts", \
                        "-paired", \
                        "-bamFiles", \
                        "-proBams", \
                        "-configFile", \
                        "-multiqc", \
                        "-outDir", \
                        "-version" \
                       ]
    // list of options specified by user
    string[] getCmdArgs = args 
    // check for duplicates
    string[] suspects
    for(string cmdItem : args) {
        if(cmdItem.startsWith("-")) {
            if(!sikArgs.has(cmdItem)) error "This flag $cmdItem isn't a valid options, check your spelling"
            if(suspects.has(cmdItem)) error "This flag $cmdItem is duplicated in your command, remove duplicate"
	    suspects.add(cmdItem)
        }
    }
    return "thumbs up"
}
// assign strand
if(!strand.isEmpty()) {
    if(strand == "0") strand = "non-strand-specific"
    if(strand == "1") strand = "strand-specific-forward"
    if(strand == "2") strand = "strand-specific-reverse"
    //TODO need to check users input, only allo 0,1 or 2 
}

if(!samplesSheet.isEmpty()) if(!samplesSheet.isFile()) error "-samplesSheet doesn't appear to be pointing at the valid file, double check your path $samplesSheet"
if(!fqDir.isEmpty()) {
    int chkHttp = fqDir.toLower().indexOf("http:")
    if(!fqDir.isDir() && chkHttp == -1) error "-fqDir doesn't point to valid directory, check your path $fqDir"
    if(align.isEmpty() && !fastqc) warning "-align and -fastqc are empty, not sure why -fqDir $fqDir was specified"
} 
if( !align.isEmpty() && genomeIdx.isEmpty() ) {
    if(fastaRef.isEmpty()) error "You need to either specify -genomeIdx or -fastaRef"
}
if(align == "starWithAnn" && gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
if(fastqc && fqDir.isEmpty()) error "Usage: -fqDir /path/to/FASTQ/files"
if(count) if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
if(prePro) if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/referenceFastaFile"
if(exonicRate) if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
if(!configFile.isEmpty()) if(!configFile.isFile()) error "-configFile doesn't appear to be pointing at the valid file, double check your path $configFile"
if(!genomeIdx.isEmpty()) if(!genomeIdx.isDir()) error "-genomeIdx doesn't point to valid directory, check your path to $genomeIdx"
if( (!fastaRef.isEmpty()) && (!fastaRef.isFile()) ) error "Check your path to fasta file. It dosen't point to a file. $fastaRef"
if( (!gtfFile.isEmpty()) && (!gtfFile.isFile()) ) error "Check your path to gtf file. It dosen't point to a file. $gtfFile"
if(memory < 32000000000) error "Don't set memory less then 32 Gb since STAR requires at least that amount"

if( args.isEmpty() ) {
    printHelp()
    exit(1)
}
