#------------------------------
# Hisat2 alignment function
#------------------------------

include "sikFqFiles.bds"

string makeHisat2Idx(string{} cmdExe, string fastaRef, string gtfFile, string hisat2Opts) {

    string{} resource = getResource(cmdExe, "hisat2", "Idx")
    string hisat2Exe = resource{"toolsExe"}+"-build"
    int hisat2Mem = resource{"toolsMem"}.parseInt()
    int hisat2Cpu = resource{"toolsCpu"}.parseInt()

    string genomeIdxDir = fastaRef.removeExt()+".hisat2Idx"
    if(!genomeIdxDir.exists()) {
        genomeIdxDir.mkdir()
    }

    string refsDir = fastaRef.dirName()
    string faBaseName = fastaRef.baseName()
    string hisat2IdxBase = genomeIdxDir+"/"+faBaseName

    string idxStderr = refsDir+"/"+faBaseName.removeExt()+".stderr"
    string idxStdout = refsDir+"/"+faBaseName.removeExt()+".stdout"

    string[] genomeIdxFiles
    for(int i : range(1, 8)) {
        genomeIdxFiles += hisat2IdxBase+".$i.ht2"
    }

    string[] outs
    outs += genomeIdxFiles
    outs += idxStdout
    outs += idxStderr

    task(!fastaRef.isEmpty(), outs <- fastaRef, cpus := hisat2Cpu, taskName := "Making Hisat2 index") {
        sys $hisat2Exe -p $hisat2Cpu \
                       $fastaRef \
                       $hisat2IdxBase 1> $idxStdout 2> $idxStderr
    }
    return genomeIdxDir
}
string{} mapHisat2(string{} cmdExe, string bamFiles, string{} samplesMap, string pairIds, bool paired, string hisat2Opts, string genomeIdx, string fastaRef) {

    string{} resource = getResource(cmdExe, "hisat2", "Align")
    string hisat2Exe = resource{"toolsExe"}
    int hisat2Mem = resource{"toolsMem"}.parseInt()
    int hisat2Cpu = resource{"toolsCpu"}.parseInt()

    string[] bamsList
    string{} bamsMap

    string hisat2Idx
    string[] idxs = genomeIdx.dirPath()
    if(!fastaRef.isEmpty() && idxs.isEmpty()) {
        hisat2Idx = genomeIdx+"/"+fastaRef.baseName()
    }
    else if(!idxs.isEmpty()) {
        // calling removeExt() twice because of .$i.ht2
        // not sure if I can just removeExt(".*.ht2")
        string hisat2IdxBase = idxs[0].removeExt().removeExt()
        hisat2Idx = genomeIdx+"/"+hisat2IdxBase.baseName()
    }

    string[] genomeIdxFiles
    for(int i : range(1, 8)) {
        genomeIdxFiles += hisat2Idx+".$i.ht2"
    }

    for(string rootName : samplesMap.keys()) {
        string[] readsList = alignerReads(samplesMap{rootName}, pairIds)
        string[] deps

        for(string fq : readsList) {
            int chk = fq.indexOf(",")
            if(chk != -1) {
                string[] reads = fq.split(",")
                deps += reads
            }
        }

        deps += genomeIdxFiles

        string reads
        if(paired) {
           string r1 = "-1 " + readsList[0]
           string r2 = "-2 " + readsList[1]
           reads = [r1, r2].join(" ")
        }
        if(!paired) {
           string r1 = "-U "+ readsList[0]
           reads = r1
        }

        string rootBase = rootName.baseName()
        string bamOut = bamFiles+"/"+rootBase+"_aligned.bam"
        string bamLog = bamFiles+"/"+rootBase+"_aligned.log"
        //TODO need to add Read Group
        dep(!fqDir.isEmpty(), [bamOut, bamLog] <- deps, cpus := hisat2Cpu, taskName := "Hisat2 aligning "+rootBase) {
            sys $hisat2Exe -x $hisat2Idx \
                           $reads \
                           --rg-id ID:001 \
                           --rg CN:Unknown \
                           --rg DS:RNA-seq \
                           --rg PL:ILLUMINA \
                           --rg PM:MiSeq \
                           --rg SM:$rootBase \
                           --threads $hisat2Cpu 2> $bamLog | samtools view -S -b - > $bamOut
        }
        bamsList.add(bamOut)
        if(bamsMap.hasKey(rootBase)) {
            error "This should happened, please report this issue, sikHisat2.bds file"
        }
        bamsMap{rootBase} = bamOut
    }
    //goal bamsList
    return bamsMap
}
