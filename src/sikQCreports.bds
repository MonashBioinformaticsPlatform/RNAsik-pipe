include "sikHeader.bds"
#---------------------------------------
# Functions to get different QC reports
#---------------------------------------

string[] getFastqcReport(string{} cmdExe, string fastqcReport, string[] fqFiles, string fqQcOpts, string extn, int threads){
    if(!cmdExe.hasKey("fastqcExe")) error "Can't get fastqc executable, check your config file $configFile"
    string fastqcExe = cmdExe{"fastqcExe"}
    if( (fqFiles.isEmpty()) && (fastqc) ) error "No FASTQ files found, use -fqDir /path/to/fastq/dir."

    string[] fqHtmls

    string preFix = "_fastqc.html"

    for(string fq : fqFiles) {
        string rootName = fq.baseName().removeExt(extn)
        string fqHtml = fastqcReport+"/"+rootName+preFix

        dep(fastqc, fqHtml <- fq, cpus := threads, taskName := "Running FASTQC") { 
            sys $fastqcExe $fqQcOpts --outdir $fastqcReport $fq
        }
        fqHtmls.add(fqHtml)
    }
    goal fqHtmls
    return fqHtmls
}
//
string getMultiqc(string{} cmdExe, string sikDir, string[] allDeps, string multiqcOpts) {
    if(!cmdExe.hasKey("multiqcExe")) error "Can't get multiqc executable, check your config file $configFile"
    string multiqcExe = cmdExe{"multiqcExe"}

    string outdep = sikDir+"/"+"multiqc_report.html"
    task(multiqc, outdep <- allDeps, canFail := true, taskName := "Generating MultiQC report") {
        sys $multiqcExe $sikDir \
                        --outdir $sikDir \
                        $multiqcOpts \
                        -f
    }
    return outdep
}

string[] getAddMetrics(string{} cmdExe, string[] bamFiles, string fastaRef, string fastaDictFile) {
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}

    string[] addMetrics

    for(string bamFile : bamFiles) {

        string insertMetrics = bamFile.replace(".bam", "_insert_size.metrics")
        string hist = bamFile.replace(".bam", "_insert_size_hist.pdf")
        string alignMetrics = bamFile.replace(".bam", "_align.metrics")
        string gcMetrics = bamFile.replace(".bam", "_gc.metrics")
        string gcMetricsPdf = bamFile.replace(".bam", "_gc.pdf")
        string gcMetricsSummary = bamFile.replace(".bam", "_gc_summary.metrics")
        string libComplex = bamFile.replace(".bam", "_lib_complex.metrics")

        addMetrics += insertMetrics
        addMetrics += hist
        addMetrics += alignMetrics

        dep([insertMetrics, hist, alignMetrics] <- [bamFile, fastaRef, fastaDictFile], taskName := "gathering metrics "+bamFile, canFail := true) {
            sys picardExe CollectInsertSizeMetrics INPUT=$bamFile \
                                                   OUTPUT=$insertMetrics \
                                                   HISTOGRAM_FILE=$hist \
                                                   M=0.5 \
            sys picardExe CollectAlignmentSummaryMetrics REFERENCE_SEQUENCE=$fastaRef \
                                                         INPUT=$bamFile \
                                                         OUTPUT=$alignMetrics
            sys picardExe CollectGcBiasMetrics INPUT=$bamFile.bam \
                                               OUTPUT=$gcMetrics \
                                               CHART_OUTPUT=$gcMetricsPdf \
                                               SUMMARY_OUTPUT=$gcMetricsSummary \
                                               R=$fastaRef
            sys picardExe EstimateLibraryComplexity INPUT=$bamFile \
                                                    OUTPUT=$libComplex
        }
    }
    goal addMetrics
    return addMetrics
}
