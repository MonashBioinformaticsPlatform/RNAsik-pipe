#--------------------------------------------------
# Functions to get QC reports, RNAseQC and FASTQC
#--------------------------------------------------

// make SampleIds.txt file for RNAseQC report
string getSampleIds(string[] markedBams){
    bool header = true
    string sampleIds
    
    for(string bamFile : markedBams){
        string[] getSampleIds = bamFile.split("_")
        string sampleId = getSampleIds[0].baseName()
        if(header){
            sampleIds += "Sample ID\tBam File\tNotes\n"
            header = false
        }
        sampleIds += "$sampleId\t$bamFile\tNA\n"
    }
    return sampleIds
}

string getRNAseQC(string RNAseQCexe, string sampleIdsFile, string[] markedBams, string fastaRef, string localGTF, string additionalRNAseQCoptions){
    string RNAseQCreport = "RNAseQC-report"
    //task(RNAseQCreport <- [markedBams, sampleIdsFile, fastaFaiFile], mem = 10000000000, taskName := "Running RNAseQC report"){
    //task(RNAseQCreport <- [markedBams, fastaRef, fastaFai, sampleIdsFile], taskName := "Running RNAseQC report"){
    task(RNAseQCreport <- markedBams, taskName := "Running RNAseQC report"){
        sys $RNAseQCexe -o $RNAseQCreport \
                        -r $fastaRef \
                        -s $sampleIdsFile\
                        -t $localGTF\
                        $additionalRNAseQCoptions
    }
    return "all good"
}

string fastqcReport = "fastqcReport"
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()

string getFastqcReport(string fastqcExe, string[] fqFiles, int threads){
    // fastqc doesn't need alot of cpu (I think)
    // for now I'm just gonig to half the cpu that are given
    // in future might need to improve that
    string newThreads
    if(threads != 1) newThreads = threads/2
    else newThreads = threads
    
    string fqs = fqFiles.join(" ")

    task(fastqcReport <- fqFiles, taskName := "Running FASTQC") { 
        sys $fastqcExe --threads $newThreads \
                       --outdir $fastqcReport \
                       --format bam_mapped \
                       $fqs
    }
    return "all done"
}
