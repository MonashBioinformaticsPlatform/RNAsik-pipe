include "sikHeader.bds"
#---------------------------------------
# Functions to get different QC reports
#---------------------------------------

string[] getFastqcReport(string{} cmdExe, string fastqcReport, string[] fqFiles, string fqQcOpts, string extn, int threads){
    if(!cmdExe.hasKey("fastqcExe")) error "Can't get fastqc executable, check your config file $configFile"
    string fastqcExe = cmdExe{"fastqcExe"}
    if( (fqFiles.isEmpty()) && (fastqc) ) error "No FASTQ files found, use -fqDir /path/to/fastq/dir."

    string preFix = "_fastqc.html"
    string[] fqcDeps
    for(string fq : fqFiles) {
        string rootName = fq.baseName().removeExt(extn)
        fqcDeps.add(fastqcReport+"/"+rootName+preFix)
    }

    string fqs = fqFiles.join(" ")

    task(fastqc, fqcDeps <- fqFiles, cpus := threads, taskName := "Running FASTQC") { 
        sys $fastqcExe --threads $threads \
                       $fqQcOpts \
                       --outdir $fastqcReport \
                       $fqs
    }
    return fqcDeps
}
//
string getMultiqc(string{} cmdExe, string sikDir, string[] allDeps) {
    if(!cmdExe.hasKey("multiqcExe")) error "Can't get multiqc executable, check your config file $configFile"
    string multiqcExe = cmdExe{"multiqcExe"}

    //string homeDir = PWD //.pathName()
    task(multiqc, "multiqc_report.html" <- allDeps, taskName := "Generating MultiQC report") {
        sys $multiqcExe -f $sikDir
    }
    return sikDir
}
