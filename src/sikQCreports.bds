include "sikHeader.bds"
#---------------------------------------
# Functions to get different QC reports
#---------------------------------------

string[] getFastqcReport(string{} cmdExe, string fastqcReport, string[] fqFiles, string fqQcOpts, string extn, int threads){
    if(!cmdExe.hasKey("fastqcExe")) error "Can't get fastqc executable, check your config file $configFile"
    string fastqcExe = cmdExe{"fastqcExe"}
    if( (fqFiles.isEmpty()) && (fastqc) ) error "No FASTQ files found, use -fqDir /path/to/fastq/dir."

    string[] fqHtmls

    string preFix = "_fastqc.html"

    for(string fq : fqFiles) {
        string rootName = fq.baseName().removeExt(extn)
        string fqHtml = fastqcReport+"/"+rootName+preFix

        dep(fastqc, fqHtml <- fq, cpus := threads, taskName := "Running FASTQC") { 
            sys $fastqcExe $fqQcOpts --outdir $fastqcReport $fq
        }
        fqHtmls.add(fqHtml)
    }
    goal fqHtmls
    return fqHtmls
}
//
string getMultiqc(string{} cmdExe, string sikDir, string[] allDeps, string multiqcOpts) {
    if(!cmdExe.hasKey("multiqcExe")) error "Can't get multiqc executable, check your config file $configFile"
    string multiqcExe = cmdExe{"multiqcExe"}

    string outdep = sikDir+"/"+"multiqc_report.html"
    task(multiqc, outdep <- allDeps, canFail := true, taskName := "Generating MultiQC report") {
        sys $multiqcExe $sikDir \
                        --outdir $sikDir \
                        $multiqcOpts \
                        -f
    }
    return outdep
}
