
string mkMultiqcFile(string[] multiqcFiles, string strandInfo, string sikDir) {

    string strandExitCode
    string strandType
    if(counts && strandInfo.exists()) {
        (strandType, strandExitCode) = strandInfo.read().split(",")
    }
    else if(!counts) {
        strandType = ""
        strandExitCode = 0
    }
    else if(counts && !strandInfo.exists()) {
        error "This shouldn't happened, check getMultiqcFiles function"
    }

    string cntsFile
    if(strandType) {
        cntsFile = strandType+".txt.summary"
    }
    if(counts && !cntsFile) {
        error "This shouldn't happend, check mkMultiqcFile"
    }

    string[] filePaths

    for(string multiqcFile : multiqcFiles) {
        // this is rather complicated looking for loop is a "workaround"
        // this is to make sure the "right" counts .summary file gets into multiqc
        if(multiqcFile.endsWith(".txt.summary")) {
            if(multiqcFile.baseName() == cntsFile) {
                filePaths += multiqcFile
            }
        }
        else {
            filePaths += multiqcFile
        }
    }

    string multiqcFile = sikDir+"/multiqc_search_files.txt"
    if(!multiqcFile.exists()) {
        filePaths += ""
        multiqcFile.write(filePaths.join("\n"))
    }
    return multiqcFile

    //filePaths += ""
    //return writeMultiqcFile(filePaths)
}

//string writeMultiqcFile(string[] filePaths) {
//
//    string[] prevFilePaths
//    int prevLen
//
//    string multiqcFile = sikDir+"/multiqc_search_files.txt"
//
//    if(!multiqcFile.exists()) {
//        multiqcFile.write(filePaths.join("\n"))
//    }
//    else if(multiqcFile.exists() && multiqcFile.isFile()) {
//        prevFilePaths = multiqcFile.read().split("\n").reverse()
//        prevLen = prevFilePaths.size()
//        for(string filePath : filePaths) {
//	    if(!prevFilePaths.has(filePath)) {
//                prevFilePaths.add(filePath)
//            }
//        }
//        if(prevLen < prevFilePaths.size()) {
//	    prevFilePaths = prevFilePaths.reverse()
//            multiqcFile.write(prevFilePaths.join("\n"))
//        }
//    }
//    else if(!multiqcFile.isFile()) {
//        error "This shouldn't happend!"
//    }
//    return multiqcFile
//}

string[] getMultiqcFiles(string sikDir) {

    string[] allowedFiles = ["out", "metrics", "txt", "summary", "log"]

    string[] multiqcFiles 

    for(string dir : sikDir.dirPath()) {
        if(dir.isDir()) {
	    if(dir.baseName() != "multiqc_data") {
                multiqcFiles += getMultiqcFiles(dir)
            }
        }
        else if( dir.isFile() && allowedFiles.has(dir.extName()) ) {
		if(dir.baseName() != "multiqc_search_files.txt") {
                    multiqcFiles.add(dir)
                }
        }
    }
    return multiqcFiles
}

string{} getResource(string{} cmdExe, string toolsName, string subName) {
    //NOTE that toolsName and subName is case sensetive and is meant to be camelCased !
    string toolsExe = toolsName+"Exe"
    string toolsMem
    string toolsCpu

    if(!subName.isEmpty()) {
        toolsMem = toolsName+subName+"Mem"
        toolsCpu = toolsName+subName+"Cpu"
    }
    else {
        toolsMem = toolsName+"Mem"
        toolsCpu = toolsName+"Cpu"
    }

    if(!cmdExe.hasKey(toolsExe)) {
        error "Can't get $toolsName executable, check your config file $configFile"
    }
    string exePath = cmdExe{toolsExe}

    if(!cmdExe.hasKey(toolsMem)) {
        error "Can't get memory settings for $toolsName, check your config file $configFile"
    }
    string qcMem = cmdExe{toolsMem}

    if(!cmdExe.hasKey(toolsCpu)) {
        error "Can't get cpu settings for $toolsName, check your config file $configFile"
    }
    string qcCpu = cmdExe{toolsCpu}

    return {"toolsExe" => exePath, "toolsMem" => qcMem, "toolsCpu" => qcCpu}
}

