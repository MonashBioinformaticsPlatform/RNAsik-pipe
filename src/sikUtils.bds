include "sikDeprecated.bds"

string mkMultiqcIgnores(string strandInfo, string[] cntsFiles) {

    string multiqcIgnore 

    if(counts && strandInfo.exists()) {
        string strandExitCode
        string strandType
        (strandType, strandExitCode) = strandInfo.read().split(",")
        string strandFile = strandType+".txt"

        for(string cntsFile : cntsFiles) {
	    print("Counts $cntsFile Strand $strandFile \n")
            if(!cntsFile.baseName().startsWith(strandFile)) {
		string ignore = cntsFile.baseName(".txt")
                //NOTE cntsFiles are actual .txt files from featureCounts output
                //however we want to ignore .summary files
                multiqcIgnore += " --ignore $ignore* " 
            }
        }
    }
    else {
        multiqcIgnore = ""
    }
    return multiqcIgnore
}

string{} getResource(string{} cmdExe, string toolsName, string subName) {
    //NOTE that toolsName and subName is case sensetive and is meant to be camelCased !
    string toolsExe = toolsName+"Exe"
    string toolsMem
    string toolsCpu

    if(!subName.isEmpty()) {
        toolsMem = toolsName+subName+"Mem"
        toolsCpu = toolsName+subName+"Cpu"
    }
    else {
        toolsMem = toolsName+"Mem"
        toolsCpu = toolsName+"Cpu"
    }

    if(!cmdExe.hasKey(toolsExe)) {
        error "Can't get $toolsName executable, check your config file $configFile"
    }
    string exePath = cmdExe{toolsExe}

    if(!cmdExe.hasKey(toolsMem)) {
        error "Can't get memory settings for $toolsName, check your config file $configFile"
    }
    string qcMem = cmdExe{toolsMem}

    if(!cmdExe.hasKey(toolsCpu)) {
        error "Can't get cpu settings for $toolsName, check your config file $configFile"
    }
    string qcCpu = cmdExe{toolsCpu}

    return {"toolsExe" => exePath, "toolsMem" => qcMem, "toolsCpu" => qcCpu}
}

// this functions checks if all arguments on the cmd are right
string chkCmdArgs() {
    // list of allowed command line options
    string[] sikArgs = ["-align", \
                        "-fqDir", \
                        "-refFiles", \
                        "-paired", \
                        "-counts", \
                        "-all", \
                        "-gtfFile", \
                        "-fastaRef", \
                        "-genomeIdx", \
                        "-mdups", \
                        "-qc", \
                        "-exonicRate", \
                        "-multiqc", \
                        "-trim", \
                        "-cov", \
                        "-umi", \
                        "-samplesSheet", \
                        "-outDir", \
                        "-extn", \
                        "-pairIds", \
                        "-extraOpts", \
                        "-configFile", \
                        "-strand", \
                        "-bamsDir" \
                       ]
    // list of options specified by user
    string[] getCmdArgs = args 
    // check for duplicates
    string[] suspects
    for(string cmdItem : args) {
        if(cmdItem.startsWith("-")) {
            bool deprecArg = chkDeprecCmdArgs(cmdItem)

            if(!deprecArg) {

                if(!sikArgs.has(cmdItem)) {
                    error "This flag $cmdItem isn't a valid options, check your spelling"
                }
                if(suspects.has(cmdItem)) {
                    error "This flag $cmdItem is duplicated in your command, remove duplicate"
                }
                suspects.add(cmdItem)
            }

        }
    }
    return "thumbs up"
}
