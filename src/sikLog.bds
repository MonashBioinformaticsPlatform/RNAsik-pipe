string logit(string logFile, string message, string data) {
    string content
    if(logFile.exists()) content = logFile.read()
    content += "%"+message + "\n"
    content += data + "\n"
    content += "--------------------------------------\n"
    logFile.write(content)
    return "logged"
}
// parse fqMap into readable string
string parseFqMap(string{} fqMap) {
    string out
    for(string rootName : fqMap.keys()) {
        string v = fqMap{rootName}
        out += " - "+rootName+"\n"
        string cleanFq = v.substr(0, (v.length())-1)
        string[] fqList = cleanFq.split(",")
        for(string fq : fqList) out += "    * "+fq+"\n"
    }
    return out
}
// parse any list into readable string
string parseList(string[] items) {
    string out
    for(string item : items) out += " - "+item+"\n"
    return out
}
string parseMap(string{} simpleMap) {
    string out
    for(string item : simpleMap.keys()) out += " - "+item+" = "+simpleMap{item}+"\n"
    return out
}

string sikLoger(string logFile, string content) {
    string logDir = logFile.dirName()
    string prevContent
    if(!logDir.exists()) logDir.mkdir()
    if(logFile.exists()) prevContent = logFile.read()
    else prevContent = content
    prevContent += content
    prevContent += "\n"
    logFile.write(prevContent)
    return "logged"
}

string getToolsVersions(string sikDir) {

    string starVersion = sikDir+"/.versions/star"
    string bwaVersion = sikDir+"/.versions/bwa"
    string samtoolsVersion = sikDir+"/.versions/samtools"
    string bedtools2Version = sikDir+"/.versions/bedtools2"
    string featureCountsVersion = sikDir+"/.versions/featureCounts"
    string fastqcVersion = sikDir+"/.versions/fastqc"
    string pythonVersion = sikDir+"/.versions/python"
    string sortSamVersion = sikDir+"/.versions/SortSam"
    string reorderSamVersion = sikDir+"/.versions/ReorderSam"
    string markDupsVersion = sikDir+"/.versions/MarkDuplicates"
    string qualimapVersion = sikDir+"/.versions/qualimap"
    string multiqcVersion = sikDir+"/.versions/multiqc"
    string rnasikVersion = sikDir+"/.versions/RNAsik"
    
    string[] toolsVersions = [starVersion, \
                              bwaVersion, \
                              samtoolsVersion, \
                              bedtools2Version, \
                              featureCountsVersion, \
                              fastqcVersion, \
                              pythonVersion, \
                              sortSamVersion, \
                              reorderSamVersion, \
                              markDupsVersion, \
                              qualimapVersion, \
                              multiqcVersion, \
                              rnasikVersion]
    
    task(toolsVersions <- "dummy", taskName := "Getting tools versions" ) {
        sys STAR --version > $starVersion
        sys bwa |& grep Version > $bwaVersion 
        sys samtools |& grep Version > $samtoolsVersion 
        sys bedtools --version > $bedtools2Version 
        sys featureCounts -v |& sed '/^\s*$/d' > $featureCountsVersion 
        sys fastqc --version > $fastqcVersion 
        sys picard SortSam |& grep Version > $sortSamVersion
        sys picard ReorderSam |& grep Version > $reorderSamVersion
        sys picard MarkDuplicates |& grep Version > $markDupsVersion
        sys qualimap --help | grep -A 1 QualiMap > $qualimapVersion
        sys multiqc --version > $multiqcVersion 
        sys python --version |& grep Python > $pythonVersion 
        sys RNAsik -version > $rnasikVersion 
    }
    return "all good!"
}
