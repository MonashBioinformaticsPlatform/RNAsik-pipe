
// What needs logging:
//
// - tools version
// - samplesSheet
// - timestamp, first run and all the consecutive runs
// - reference files location (full path), particular now that I have -refFiles options
// - gft or gff
// - paired end or not
// - additional options for every tool
// - strand guessing
//
// Where and how to keep the log?
//
// - single director "logs"
// - with subdirectories for each task e.g:
//    - tools versions log
//    - tools options log
//------------------------------------------------------------------------------------------

//string logit(string logFile, string message, string data) {
//    string content
//    if(logFile.exists()) content = logFile.read()
//    content += "%"+message + "\n"
//    content += data + "\n"
//    content += "--------------------------------------\n"
//    logFile.write(content)
//    return "logged"
//}
// parse fqMap into readable string
string parseFqMap(string{} fqMap) {
    string out
    for(string rootName : fqMap.keys()) {
        string v = fqMap{rootName}
        out += " - "+rootName+"\n"
        string cleanFq = v.substr(0, (v.length())-1)
        string[] fqList = cleanFq.split(",")
        for(string fq : fqList) out += "    * "+fq+"\n"
    }
    return out
}
// parse any list into readable string
string parseList(string[] items) {
    string out
    for(string item : items) out += " - "+item+"\n"
    return out
}
string parseMap(string{} simpleMap) {
    string out
    for(string item : simpleMap.keys()) out += " - "+item+" = "+simpleMap{item}+"\n"
    return out
}

//string sikLoger(string logFile, string content) {
//    string logDir = logFile.dirName()
//    string prevContent
//    if(!logDir.exists()) logDir.mkdir()
//    if(logFile.exists()) prevContent = logFile.read()
//    else prevContent = content
//    prevContent += content
//    prevContent += "\n"
//    logFile.write(prevContent)
//    return "logged"
//}

string mkLog(string fileName, string strToLog, string logType, string logsDir) {
    if(!fileName.isEmpty()) {
        // there will be a few different types with in logsDir e.g toolsOpts, toolsVersions
        string theLogDir = logsDir+"/"+logType
        if(!theLogDir.exists()) theLogDir.mkdir()

        string logFile = theLogDir+"/"+fileName
        //strToLog.write(logFile)
        sys echo "$strToLog" > $logFile
    }
    else error "This shouldn't happened, check mkLog function $fileName $logType $logsDir"
    return strToLog
}

string getToolsVersions(string{} cmdExe, string logsDir) {
    //NOTE I think it would be better to make these versions calls embeded into individual function
    // e.g star version check can be inside star align task.
    // the problem with doing it this way; STAR gets called several times, depending on number of fastq files
    // and everytime we are going to check its version.
    string versionsDir = logsDir+"/versions"
    if(!versionsDir.exists()) versionsDir.mkdir()

    string[] tools = ["starExe", \
                      "hisat2Exe", \
                      "bwaExe", \
                      "samtoolsExe", \
                      "bedtoolsExe", \
                      "countsExe", \
                      "fastqcExe", \
                      "pythonExe", \
                      "picardExe", \
                      "qualimapExe", \
                      "multiqcExe"]

    for(string t : tools) {
        if(!cmdExe.hasKey(t)) error "Can't get $t executable, check your config file $configFile"
    }

    string starExe = cmdExe{"starExe"}
    string hisat2Exe = cmdExe{"hisat2Exe"}
    string bwaExe = cmdExe{"bwaExe"}
    string samtoolsExe = cmdExe{"samtoolsExe"}
    string bedtoolsExe = cmdExe{"bedtoolsExe"}
    string countsExe = cmdExe{"countsExe"}
    string fastqcExe = cmdExe{"fastqcExe"}
    string pythonExe = cmdExe{"pythonExe"}
    string picardExe = cmdExe{"picardExe"}
    string qualimapExe = cmdExe{"qualimapExe"}
    string multiqcExe = cmdExe{"multiqcExe"}

    string starVersion = versionsDir+"/star"
    string bwaVersion = versionsDir+"/bwa"
    string samtoolsVersion = versionsDir+"/samtools"
    string bedtools2Version = versionsDir+"/bedtools2"
    string featureCountsVersion = versionsDir+"/featureCounts"
    string fastqcVersion = versionsDir+"/fastqc"
    string pythonVersion = versionsDir+"/python"
    string sortSamVersion = versionsDir+"/SortSam"
    string reorderSamVersion = versionsDir+"/ReorderSam"
    string markDupsVersion = versionsDir+"/MarkDuplicates"
    string qualimapVersion = versionsDir+"/qualimap"
    string multiqcVersion = versionsDir+"/multiqc"
    string rnasikVersion = versionsDir+"/RNAsik"

    string rnasikVersionFile = programPath.pathName()+"/sikVersion.bds"

    task(taskName := "Getting versions of tools in use" ) {
        sys $starExe --version > $starVersion
        sys $bwaExe |& grep Version > $bwaVersion
        sys $samtoolsExe |& grep Version > $samtoolsVersion
        sys $bedtoolsExe --version > $bedtools2Version
        sys $countsExe -v |& sed '/^\s*$/d' > $featureCountsVersion
        sys $fastqcExe --version > $fastqcVersion
        sys $picardExe SortSam |& grep Version > $sortSamVersion
        sys $picardExe ReorderSam |& grep Version > $reorderSamVersion
        sys $picardExe MarkDuplicates |& grep Version > $markDupsVersion
        sys $qualimapExe --help | grep -A 1 QualiMap > $qualimapVersion
        sys $multiqcExe --version > $multiqcVersion
        sys $pythonExe --version |& grep Python > $pythonVersion
        sys cat $rnasikVersionFile > $rnasikVersion
    }
    return "all good!"
}

