#----------------------------------------
# Counts
#----------------------------------------

#------------------------------
# Make directories as required
#------------------------------
string countFiles = "countFiles"
if((!countFiles.exists()) && (count)) countFiles.mkdir()
#------
# Body
#------
//string[] getReadsCount(string counterExe, string[] bamsList, string gtfFile, string additionalArgs, int threads) {
string[] getReadsCount(string counterExe, string[] bamsList, string additionalArgs, int threads) {

    int featureThreads
    if(threads == 1) featureThreads = threads
    else featureThreads = threads/2

    string bamString = bamsList.join(" ")

    string ReverseStrandedCounts = countFiles+"/"+"ReverseStrandedCounts.txt"
    task(ReverseStrandedCounts <- bamFiles, taskName := "Counting features") {
        sys $counterExe -T $featureThreads \
                          -s 2 \
                          $additionalArgs \
                          -o $ReverseStrandedCounts \
                          $bamString
    }
                          //-a $gtfFile \
    string NonStrandedCounts = countFiles+"/"+"NonStrandedCounts.txt"
    task(NonStrandedCounts <- bamFiles, taskName := "Counting features") {
        sys $counterExe -T $featureThreads \
                          -s 0 \
                          $additionalArgs \
                          -o $NonStrandedCounts \
                          $bamString
    }
    return [NonStrandedCounts, ReverseStrandedCounts] 
}

string getGeneIds(string pythonExe, string gtfFile, bool setGFF){
    string getProgPath = programPath.pathName()
    string pyFlag
    if(setGFF){
	    pyFlag = '--gffFile'
    }
    else pyFlag = '--gtfFile'
    string getGeneIds = getProgPath+"/../scripts/getGeneIds.py"
    string geneIds = "geneIds.txt"
    task(geneIds <- gtfFile, taskName := "getting geneIds.txt file") {
        sys $pythonExe $getGeneIds $pyFlag $gtfFile > $geneIds
    }

    return geneIds
}
