#----------------------------------------
# Counts
#----------------------------------------

string[] getReadsCount(string{} cmdExe, string[] bamsList, string extraOpts, string localGTF, int threads) {
    // make directory for counts
    string countFiles = "countFiles"
    if((!countFiles.exists()) && (count)) countFiles.mkdir()

    if(!cmdExe.hasKey("countsExe")) error "Can't get featureCounts executable, check your config file $configFile"
    string countsExe = cmdExe{"countsExe"}

    if( (bamsList.isEmpty()) && (count) ) error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamFiles path/to/you/bams/directory`"

    int featureThreads
    if(threads == 1) featureThreads = threads
    else featureThreads = threads/2

    string bamString = bamsList.join(" ")
    string[] allDeps = bamsList
    allDeps.add(localGTF)

    string[] featureOut
    int[] strands = [2, 0]
    string[] featureFiles = ["NonStrandedCounts.txt", "ReverseStrandedCounts.txt"]
    for(string featureFile : featureFiles) {
        string countsName = countFiles+"/"+featureFile
        featureOut.add(countsName)
        int strand = strands.pop()
        dep(count, countsName <- allDeps, taskName := "Counting features") {
            sys $countsExe -T $featureThreads \
                           -s $strand \
                           $extraOpts \
                           -o $countsName \
                           $bamString
        }

    }
    goal featureOut
    return featureOut
}
//
string getGeneIds(string pythonExe, string gtfFile, bool setGFF){
    string getProgPath = programPath.pathName()
    string pyFlag = '--gtfFile'
    if(setGFF){
        pyFlag = '--gffFile'
    }
    string getGeneIds = getProgPath+"/../scripts/getGeneIds.py"
    string geneIds = "geneIds.txt"
    task(count, geneIds <- gtfFile, taskName := "getting geneIds.txt file") {
        sys $pythonExe $getGeneIds $pyFlag $gtfFile > $geneIds
    }
    return geneIds
}

string[] getDegust(string{} cmdExe, string[] featureCounts, int bamsN, string gtfFile, bool gff, int threads) {
    if(!cmdExe.hasKey("pythonExe")) error "Can't get python executable, check your config file $configFile"
    string geneIdsFile = getGeneIds(cmdExe{"pythonExe"}, gtfFile, gff)

    string[] withNames

    int bamConst = 7
    int lastBamN = bamsN+bamConst
    string cutRange = bamConst+"-"+lastBamN

    for(string countFile : featureCounts) {
        string withName = countFile.removeExt()+"-withNames.txt"
        withNames.add(withName)
        dep(count, withName <- [countFile, geneIdsFile], taskName := "Degust-ready counts file", tmp := "$countFile.tmp", tmp2 := "$countFile.tmp2") {
            sys grep -v "#" $countFile | cut -f1,$cutRange | perl -pe 's{\S+/([^_]+)[^/]+(\t|\n)}{$1$2}g if $. == 1' > $tmp
            sys sed -i '0,/Geneid/s/Geneid/Gene.ID/' $tmp
            sys /bin/bash -c "join -j 1 <(sort -k1,1 $geneIdsFile) <(sort -k1,1 $tmp) -t $'\t' > $tmp2"
            sys grep "Biotype" $tmp2 > $withName
            sys grep -v "Biotype" $tmp2 >> $withName
            sys rm $tmp $tmp2
        }
    }
    goal withNames
        
    return withNames
}
