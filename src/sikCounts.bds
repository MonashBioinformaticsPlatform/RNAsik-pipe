#----------------------------------------
# Counts
#----------------------------------------
// runs python script `strand_guessing.py` that guess strandness of the data
string getStrandInfo(string{} cmdExe, string[] readCounts) {
    if(!cmdExe.hasKey("pythonExe")) error "Can't get python executable, check your config file $configFile"
    string pythonExe = cmdExe{"pythonExe"}

    string getProgPath = programPath.pathName()
    string pyScript = getProgPath+"/../scripts/strand_guessing.py"
    string countsDir = readCounts[0].dirName()
    string strandInfo = countsDir+"/"+"strandInfo.txt"

    tidStrand := task(counts, strandInfo <- readCounts, taskName := "getting strand info") {
        sys $pythonExe $pyScript --logsDir $countsDir > $strandInfo
    }
    //// True if the task finished without errors
    //int chk = tidStrand.exitCode()
    //if(chk > 0) {
    //    error "Strand guessing task didn't finish, check that counts files, also check that your FASTA and annotations files corresponds"
    //}
    // this is temp hack to stop mask function evaluation before above python script had run
    // because mask function has .read() on a file that doesn't exist yet.
    // I have to think about better solution for this OR "fix" multiqc to be able to handle multiple featureCounts files
    wait tidStrand
    return mask(countsDir, strandInfo)
}
// once the strand had been guessed, mask two other .summary files
string mask(string countsDir, string strandInfo) {

    if(strandInfo.exists()) {
        string strandExitCode
        string strandType
        (strandType, strandExitCode) = strandInfo.read().split(",")

        strandType = strandType.trim() + ".txt.summary"

        for(string f : countsDir.dirPath("*.summary")){
            if(f.baseName() != strandType) {
                string masked = f.replace(".summary", ".summary.masked")
                task(counts, masked <- [f, strandInfo], taskName := "masking unwanted counts files") sys mv $f $masked 
            }
        }
        return strandInfo
    }
    //NOTE that this function if it drops into else block will return a bool false, BUT
    // because function is set to return "string" type you need to check it as though it is a string or use parseBool()
}

string[] getReadsCount(string{} cmdExe, string countFiles, string[] bamsList, string extraOpts, string localGTF, int threads) {

    if(!cmdExe.hasKey("countsExe")) error "Can't get featureCounts executable, check your config file $configFile"
    string countsExe = cmdExe{"countsExe"}

    if( (bamsList.isEmpty()) && (counts) ) {
        error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamsDir"
    }

    string bamString = bamsList.join(" ")
    string[] allDeps = bamsList
    allDeps.add(localGTF)

    int chkPaired = extraOpts.indexOf("-p")
    if(chkPaired != -1 && !paired) error "featureCounts had been set for paired end data but -paired is unset $paired"
    if(chkPaired == -1 && paired) error "featureCounts hadn't been set for paired end data but -paired is set $paired"

    string[] featureOut
    string[] featureFiles = ["NonStrandedCounts.txt", "ForwardStrandedCounts.txt", "ReverseStrandedCounts.txt"]
    for(int i : range(0, 2)) {
        string countsName = countFiles+"/"+featureFiles[i]
        featureOut.add(countsName)
        dep(counts, countsName <- allDeps, taskName := "Counting features $countsName") {
            sys $countsExe -T 4 \
                           -s $i \
                           $extraOpts \
                           -o $countsName \
                           $bamString
        }
    }
    goal featureOut
    return featureOut
}
//
string getGeneIds(string pythonExe, string countFilesDir, string gtfFile, string modelType){

    string pyScript = programPath.pathName()+"/../scripts/get_geneids.py"
    string opts = "--file_type $modelType --in_file $gtfFile"
    string geneIds = countFilesDir+"/"+"geneIds.txt"

    task(counts, geneIds <- gtfFile, taskName := "getting geneIds.txt file") {
        sys $pythonExe $pyScript $opts > $geneIds
    }
    return geneIds
}
//TODO make mkCntsFile to accept args from extraOpts file, in particular --biotype, not every annotation file will have that info
string[] getDegustFile(string{} cmdExe, string cntsDir, string strandInfo, string samplesSheet, string gtfFile, string modelType) {
    // sanity check
    if(!cmdExe.hasKey("pythonExe")) {
        error "Can't get python executable, check your config file $configFile"
    }

    string strandExitCode
    string strandType
    if(counts && strandInfo.exists()) {
    	(strandType, strandExitCode) = strandInfo.read().split(",")
    }
    else if(counts && !strandInfo.exists()) {
        error "This shouldn't happened, check getDegustFile function"
    }

    string pythonExe = cmdExe{"pythonExe"}
    string geneIdsFile = getGeneIds(pythonExe, cntsDir, gtfFile, modelType)
    
    string cntsFile = cntsDir+"/"+strandType+".txt"

    string degustFileAll = cntsFile.swapExt(".txt", "-withNames.txt")
    string degustFileProteinCoding = cntsFile.swapExt(".txt", "-withNames-proteinCoding.txt")
    
    string mkCntsFile = programPath.pathName()+"/../scripts/mk_cnts_file.py"

    task(counts, degustFileAll <- [cntsFile, geneIdsFile, samplesSheet], taskName := "making degust file with all features") {
        sys $pythonExe $mkCntsFile --counts_file $cntsFile \
                                   --gene_ids $geneIdsFile \
                                   --samples_sheet $samplesSheet \
                                   --biotype "all" > $degustFileAll
    }
    task(counts, degustFileProteinCoding <- [cntsFile, geneIdsFile, samplesSheet], taskName := "making degust file with protein coding features") {
        sys $pythonExe $mkCntsFile --counts_file $cntsFile \
                                   --gene_ids $geneIdsFile \
                                   --samples_sheet $samplesSheet \
                                   --biotype "protein_coding" > $degustFileProteinCoding
    }

    return [degustFileAll, degustFileProteinCoding]
}
