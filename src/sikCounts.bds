#----------------------------------------
# Counts
#----------------------------------------

#------------------------------
# Make directories as required
#------------------------------
string countFiles = "countFiles"
if((!countFiles.exists()) && (count)) countFiles.mkdir()
#------
# Body
#------
string[] getReadsCount(string[] bamsList, string gtfFile, string additionalArgs, int threads) {

    int featureThreads = threads/2

    string bamString = bamsList.join(" ")

    string featureReverse = countFiles+"/"+"featureReverse.txt"
    task(featureReverse <- bamFiles, taskName := "Counting features") {
        sys featureCounts -T $featureThreads \
                          -s 2 \
                          $additionalArgs \
                          -a $gtfFile \
                          -o $featureReverse \
                          $bamString
    }
    string featureNo = countFiles+"/"+"featureNo.txt"
    task(featureNo <- bamFiles, taskName := "Counting features") {
        sys featureCounts -T $featureThreads \
                          -s 0 \
                          $additionalArgs \
                          -a $gtfFile \
                          -o $featureNo \
                          $bamString
    }
    return [featureNo, featureReverse] 
}

string getGeneIds(string gtfFile){
    string getProgPath = programPath.pathName()

    string makeDB = getProgPath+"/../scripts/make-gtf-db.py" 
    string dbName = gtfFile.baseName().removeExt()+'.db'
    task(dbName <- gtfFile, taskName := "Making db file"){
        sys python $makeDB $gtfFile $dbName
    }

    string getGeneIds = getProgPath+"/../scripts/getGeneIds.py"
    string geneIds = "geneIds.txt"
    task(geneIds <- dbName, taskName := "getting geneIds.txt file") {
        sys python $getGeneIds --dbFile $dbName > $geneIds
    }

    return geneIds
}
