#----------------------------------------
# Counts
#----------------------------------------
// runs python script `strand_guessing.py` that guess strandness of the data
string getStrandInfo(string{} cmdExe, string[] readCounts) {
    if(!cmdExe.hasKey("pythonExe")) error "Can't get python executable, check your config file $configFile"
    string pythonExe = cmdExe{"pythonExe"}

    string getProgPath = programPath.pathName()
    string pyScript = getProgPath+"/../scripts/strand_guessing.py"
    string countsDir = readCounts[0].dirName()
    string strandInfo = countsDir+"/"+"strandInfo.txt"

    task(counts, strandInfo <- readCounts, taskName := "getting strand info") {
        sys $pythonExe $pyScript --logs_dir $countsDir > $strandInfo
    }
    // need to wait here, because later on some other tasks will try to read from that file
    // so it really need to be made
    wait
    return strandInfo
}

string[] getReadsCount(string{} cmdExe, string countFiles, string{} bamsMap, string extraOpts, string localGTF) {

    string[] bamsList = bamsMap.values()

    string{} resource = getResource(cmdExe, "counts", "")
    string countsExe = resource{"toolsExe"}
    int countsMem = resource{"toolsMem"}.parseInt()
    int countsCpu = resource{"toolsCpu"}.parseInt()

    if( (bamsList.isEmpty()) && (counts) ) {
        error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamsDir"
    }

    string bamString = bamsList.join(" ")
    string[] allDeps = bamsList
    allDeps.add(localGTF)

    int chkPaired = extraOpts.indexOf("-p")
    if(chkPaired != -1 && !paired) {
        error "featureCounts had been set for paired end data but -paired is unset $paired"
    }
    if(chkPaired == -1 && paired) {
        error "featureCounts hadn't been set for paired end data but -paired is set $paired"
    }

    string[] featureOut
    string[] featureFiles = ["NonStrandedCounts.txt",\
                             "ForwardStrandedCounts.txt",\
                             "ReverseStrandedCounts.txt"]

    for(int i : range(0, 2)) {
        string countsName = countFiles+"/"+featureFiles[i]
        string countsLog = countFiles+"/."+featureFiles[i].swapExt(".txt", ".siklog")
        featureOut.add(countsName)
        dep(counts, countsName <- allDeps, cpus := countsCpu, taskName := "Counting features $countsName") {
            sys $countsExe -T $countsCpu \
                           -s $i \
                           $extraOpts \
                           -o $countsName \
                           $bamString > $countsLog 2>&1
        }
    }
    goal featureOut
    return featureOut
}
//
string getGeneIds(string pythonExe, string countFilesDir, string gtfFile, string modelType){

    string pyScript = programPath.pathName()+"/../scripts/get_geneids.py"
    string opts = "--file_type $modelType --in_file $gtfFile"
    string geneIds = countFilesDir+"/"+"geneIds.txt"

    task(counts, geneIds <- gtfFile, canFail := true, taskName := "getting geneIds.txt file") {
        sys $pythonExe $pyScript $opts > $geneIds
    }
    return geneIds
}
//TODO make mkCntsFile to accept args from extraOpts file, in particular --biotype, not every annotation file will have that info
string[] getDegustFile(string{} cmdExe, string cntsDir, string strandInfo, string samplesSheet, string gtfFile, string modelType) {
    // sanity check
    if(!cmdExe.hasKey("pythonExe")) {
        error "Can't get python executable, check your config file $configFile"
    }

    string strandType
    string strandValue
    string strandExitCode
    if(counts && strandInfo.exists()) {
        (strandType, strandValue, strandExitCode) = strandInfo.read().split(",")
    }
    else if(counts && !strandInfo.exists()) {
        error "This shouldn't happened, check getDegustFile function"
    }

    string pythonExe = cmdExe{"pythonExe"}
    string geneIdsFile = getGeneIds(pythonExe, cntsDir, gtfFile, modelType)
    
    string cntsFile = cntsDir+"/"+strandType+".txt"

    string degustFileAll = cntsFile.swapExt(".txt", "-withNames.txt")
    string degustFileProteinCoding = cntsFile.swapExt(".txt", "-withNames-proteinCoding.txt")
    
    string mkCntsFile = programPath.pathName()+"/../scripts/mk_cnts_file.py"

    task(counts, degustFileAll <- [cntsFile, geneIdsFile, samplesSheet], canFail := true, taskName := "making degust file with all features") {
        sys $pythonExe $mkCntsFile --counts_file $cntsFile \
                                   --gene_ids $geneIdsFile \
                                   --samples_sheet $samplesSheet \
                                   --biotype "all" > $degustFileAll
    }
    task(counts, degustFileProteinCoding <- [cntsFile, geneIdsFile, samplesSheet], canFail := true, taskName := "making degust file with protein coding features") {
        sys $pythonExe $mkCntsFile --counts_file $cntsFile \
                                   --gene_ids $geneIdsFile \
                                   --samples_sheet $samplesSheet \
                                   --biotype "protein_coding" > $degustFileProteinCoding
    }

    return [degustFileAll, degustFileProteinCoding]
}
