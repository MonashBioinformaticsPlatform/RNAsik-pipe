/*
STAR aligner utils
*/

string mkSTARidx(SikStarIdxConfig sikStarIdxConf, string fasta, string refDir, string starIdxDir, string[] idxDeps, string logFn) {

    string{} resources = sikStarIdxConf.idxRes
    string x = resources{"starExe"}
    int xCpu = resources{"idxCpu"}.parseInt()
    int xMem = resources{"idxMem"}.parseInt()

    string starCmdOpts = sikStarIdxConf.idxCmdOpts.join(" ")
    refDir = refDir + "/"

    //int chkGTF = starOpts.indexOf("--sjdbGTFfile")
    //if(chkGTF != -1) refFilesIn += gtfFile

    log("MSG: Beginng STAR indexing")

    task(idxDeps <- fasta, cpus := xCpu, mem := xMem, taskName := "Making STAR index") {
        sys $x --runThreadN $xCpu \
               --runMode genomeGenerate \
               --genomeDir $starIdxDir \
               --outFileNamePrefix $refDir \
               --genomeFastaFiles $fasta \
               $starCmdOpts > $logFn 2>&1
        //NOTE I think it's good idea to drop unzipped fasta file here, at this stage I don't think I'll needed
        //sys rm $fasta
        //NOTE turns out, deleting fasta here causes bunch of dependencies issues, so gonna keep it there untill figure out better solution
    }

    return starIdxDir
}

Sample mapSTAR(SikStarAlignerConfig sikStarAlignerConf, Sample sample, string genomeIdx, string[] idxDeps) {

    Metadata metadata = sample.metadata
    Bams bams = sample.bams

    string{} resources = sikStarAlignerConf.alignerRes
    string x = resources{"starExe"}
    int xCpu = resources{"alignerCpu"}.parseInt()
    int xMem = resources{"alignerMem"}.parseInt()

    string starCmdOpts = sikStarAlignerConf.alignerCmdOpts.join(" ")

    string sampleName = metadata.sampleName
    string[] fq1 = metadata.fq1
    string[] fq2 = metadata.fq2

    string bamOut = bams.bamAlignerOut
    string bamLog = bams.bamAlignerLog

    string fqs = [fq1.join(","), fq2.join(",")].join(" ")

    string outPrefix = bamOut.replace("Aligned.out.bam", "")

    string[] deps
    deps += fq1
    deps += fq2
    deps += idxDeps

    string logMsg = "STAR aligning " + sampleName

    //TODO should make read group (RG) string to come from metadata config file, key "read_group:", otherwise this is misleading and non specific
    // these are some of the essential fields CN:Unknown PL:ILLUMINA PM:ILLUMINA
    // note sure what to do about ID field, maybe just sequential incriment ?

    //TODO propogate ID into sam attributes using configs e.g either generate sequencing 1 to N number or ask user to include ID field
    string readGroupId = "001"

    dep([bamOut, bamLog] <- deps, cpus := xCpu, mem := xMem, taskName := logMsg) {

        sys $x --runThreadN $xCpu \
               --runMode alignReads \
               --genomeDir $genomeIdx \
               --outSAMattrRGline ID:$readGroupId DS:RNAseq SM:$sampleName \
               --readFilesIn $fqs \
               --outFileNamePrefix $outPrefix \
               $starCmdOpts > $bamLog 2>&1
    }

    bams.bamOut = bamOut
    return sample
}
