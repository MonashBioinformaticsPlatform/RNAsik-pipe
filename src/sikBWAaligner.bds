string makeBWAidx(string{} cmdExe, string refFiles, string fastaRef, string bwaOpts, int threads) {
    // get bwa mem executable 
    if(!cmdExe.hasKey("bwaExe")) error "Can't get bwa mem executable, check your config file $configFile"
    string bwaExe = cmdExe{"bwaExe"}

    string bwaIdxDir = refFiles+"/bwaIdxDir"
    if(!bwaIdxDir.exists()) bwaIdxDir.mkdir()

    string bwaIdx = bwaIdxDir+"/"+fastaRef.baseName()

    string[] idxExts = [".amb", ".ann", ".bwt", ".pac", ".sa"]
    string[] bwaIdxFiles
    for(string idxExt : idxExts) bwaIdxFiles.add(bwaIdx+idxExt)

    task(!fastaRef.isEmpty(), bwaIdxFiles  <- fastaRef, taskName := "Making bwa index") {
        sys $bwaExe index $bwaOpts \
                          -p $bwaIdx \
                          $fastaRef
    }
    return bwaIdx
}

string[] mapBWA(string{} cmdExe, string bamFiles, string{} samplesMap, string pairIds, bool paired, string bwaOpts, string genomeIdx, int threads) {
    if(!cmdExe.hasKey("bwaExe")) error "Can't get bwa mem executable, check your config file $configFile"
    string bwaExe = cmdExe{"bwaExe"}

    string[] bamsList

    string[] idxExts = [".amb", ".ann", ".bwt", ".pac", ".sa"]
    string[] bwaIdxFiles
    for(string idxExt : idxExts) bwaIdxFiles.add(genomeIdx+idxExt)

    for(string rootName : samplesMap.keys()) {
        string[] readsList = alignerReads(samplesMap{rootName}, pairIds)
        string[] deps = readsList
        deps += bwaIdxFiles

        string rootBase = rootName.baseName()
        string bamOut = bamFiles+"/"+rootBase+"_bwaMem.bam"
        
        int chkLen = readsList.size()
        if(chkLen < 2 && paired) error "R2 reads had been found $readsList, but -paired set to $paired"
        if(chkLen > 1 && !paired) error "-paired set to $paired, but only R1 reads found $readsList"

        string reads

        if(paired) {
	    string readOne = readsList[0].replace("," , " ")
	    string readTwo = readsList[1].replace("," , " ")

            string subReadOne = "<(zcat "+readOne+")"
            string subReadTwo = "<(zcat "+readTwo+")"
              
            reads = [subReadOne, subReadTwo].join()
           
        }
        else {
	    string readOne = readsList[0].replace("," , " ")
            reads = "<(zcat "+readOne+")"
        }

        dep(!fqDir.isEmpty(), bamOut <- deps, cpus := threads, mem := memory, taskName := "bwa mem aligning "+rootBase) {
            sys $bwaExe mem -t $threads \
                            $bwaOpts \
                            $genomeIdx \
                            $reads | samtools view -S -b - > $bamOut
                     
        }
        sikLoger(".log/bams.txt", bamOut)
        bamsList.add(bamOut)
    }
    goal bamsList
    return bamsList
}
