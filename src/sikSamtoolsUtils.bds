
Sample doBamSort(Sample sample, SamtoolsSortConfig samtoolsSortConf) {

    Metadata metadata = sample.metadata
    Bams bams = sample.bams

    string{} resources = samtoolsSortConf.sortRes
    string x = resources{"samtoolsExe"}
    int xCpu = resources{"idxCpu"}.parseInt()
    int xMem = resources{"idxMem"}.parseInt()

    string samtoolsSortCmdOpts = samtoolsSortConf.sortCmdOpts.join(" ")

    //NOTE sortMem from sik.cofig is per thread, so BDS total memory = xMem*xCpu
    int bdsTotMem = xMem*xCpu

    // need to scale down by 80 % because samtools can takes more RAM then given, more info in the samtools src
    // bam_sort.c -> 2107 @param  max_mem  approxiate maximum memory (very inaccurate)
    real scalFact = 0.65
    string sortSamMem = round(scalFact * bdsTotMem/1000)+"K"   // converting to bytes

    string sampleName = metadata.sampleName
    string bamIn = bams.bamOut
    string bamOut = bams.bamSortedOut
    string bamIdx = bams.bamSortedIdx
    string bamLog = bams.bamSortedLog

    string logMsg = "sorting reads based on coordiantes with samtools, BAM file -> " + bamIn

    //NOTE don't pass bamLog as a dep, samtools sort doesn't provide any stdout/stderr
    dep([bamOut, bamIdx] <- bamIn, cpus := xCpu, mem := bdsTotMem, taskName := logMsg) {
        sys $x sort --threads $xCpu \
                    -m $sortSamMem \
                    -o $bamOut \
                    $bamIn

        sys $x index $bamOut
        sys rm $bamIn
    }

    bams.bamOut = bamOut
    bams.bamIdx = bamIdx
    return sample
}

Sample doSamtoolsQc(Sample sample, SamtoolsQcConfig samtoolsQcConf) {

    SamtoolsQc samtoolsQc = sample.qc.samtoolsQc
    Bams bams = sample.bams

    string{} resources = samtoolsQcConf.qcRes
    string x = resources{"samtoolsExe"}
    int xCpu = resources{"idxCpu"}.parseInt()
    int xMem = resources{"idxMem"}.parseInt()

    string samtoolsQcCmdOpts = samtoolsQcConf.qcCmdOpts.join(" ")

    string bamIn = bams.bamOut
    string flagstatOut = samtoolsQc.flagstatFn
    string idxstatsOut = samtoolsQc.idxstatsFn
    bool qcFlag = sample.qc.usrQcFlag

    string logMsg = "Running QC, samtools flagstat -> " + bamIn

    dep(qcFlag, flagstatOut <- bamIn, cpus := xCpu, taskName := logMsg) {
        sys $x flagstat $bamIn > $flagstatOut
    }

    logMsg = "Running QC, samtools idxstats -> " + bamIn

    dep(qcFlag, idxstatsOut <- bamIn, cpus := xCpu, taskName := logMsg) {
        sys $x idxstats $bamIn > $idxstatsOut
    }

    //dep(qcFlag, statsOut <- [bamFile, fastaRef], cpus := xCpu, taskName := lgsMsg) {
    //    sys $samtoolsExe stats --reference $fastaRef $bamFile > $statsOut
    //}

    return sample
}
