#--------------------------------------------------
# Functions to pre-process BAM files - picard
#--------------------------------------------------

// make dictionary for picard pre-processing
string makeDictFile(string picardExe, string fastaRef) {
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}

string getPrePro(string{} cmdExe, string bamFile, string fastaRef){
    // make preqcBamFiles directory
    string preqcBamFiles = "preqcBamFiles"
    if((!preqcBamFiles.exists()) && (prePro)) preqcBamFiles.mkdir()
    // check if executable is there
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}
    // get dict file
    string fastaDictFile = makeDictFile(picardExe, fastaRef)
    string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")
    // try using 8 cpus to limit how picard processes can be run at a time
    // this should imporve I/O (input / output) performance
    dep(prePro, sortedName <- bamFile, cpus := 2, taskName := "picard sorting "+bamFile) {
        sys $picardExe SortSam TMP_DIR=tmp/ \
                               VALIDATION_STRINGENCY=LENIENT \
                               INPUT=$bamFile \
                               OUTPUT=$sortedName \
                               SORT_ORDER=coordinate
    }

    string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    dep(prePro, reorderedName <- [sortedName, fastaDictFile], cpus := 2, taskName := "picard reordering "+reorderedName) {
        sys $picardExe ReorderSam TMP_DIR=tmp/ \
                                  VALIDATION_STRINGENCY=LENIENT \
                                  INPUT=$sortedName \
                                  OUTPUT=$reorderedName \
                                  REFERENCE=$fastaRef
    }
    
    string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
    string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")
    dep(prePro, [mdupsName, metricsName] <- reorderedName, cpus := 2, taskName := "picard marking dups "+mdupsName) {
        sys $picardExe MarkDuplicates TMP_DIR=tmp/ \
                                      VALIDATION_STRINGENCY=LENIENT \
                                      CREATE_INDEX=true \
                                      INPUT=$reorderedName \
                                      OUTPUT=$mdupsName \
                                      METRICS_FILE=$metricsName
        sys rm $sortedName $reorderedName
    }

    goal mdupsName
    return mdupsName
}
