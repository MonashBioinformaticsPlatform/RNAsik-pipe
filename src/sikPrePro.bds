#--------------------------------------------------
# Functions to pre-process BAM files - picard
#--------------------------------------------------

include "sikHeader.bds"
include "sikMakeIndices.bds"
include "sikSortFastqs.bds"

#------------------------------
# Make directories as required
#------------------------------
string preqcBamFiles = "preqcBamFiles"
if((!preqcBamFiles.exists()) && (prePro)) preqcBamFiles.mkdir()

#------
# Body
#------


string getPrePro(string bamFile, string fastaRef){

    string fastaDictFile = fastaRef.removeExt()+".dict"
    if(!fastaDictFile.exists()) fastaDictFile = makeDictFile(fastaRef, fastaDictFile)

    string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")
    // try using 8 cpus to limit how picard processes can be run at a time
    // this should imporve I/O (input / output) performance
    task(sortedName <- bamFile, taskName := "picard sorting "+bamFile) {
        sys picard SortSam TMP_DIR=tmp/ \
                           VALIDATION_STRINGENCY=LENIENT \
                           CREATE_INDEX=true \
                           INPUT=$bamFile \
                           OUTPUT=$sortedName \
                           SORT_ORDER=coordinate
    }

    string fastaFaiFile = fastaRef+".fai"
    if(!fastaFaiFile.exists()) fastaFaiFile = makeFaiFile(fastaRef, fastaFaiFile)

    string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    task(reorderedName <- [sortedName, fastaDictFile], taskName := "picard reordering "+reorderedName) {
        sys picard ReorderSam TMP_DIR=tmp/ \
                              VALIDATION_STRINGENCY=LENIENT \
                              INPUT=$sortedName \
                              OUTPUT=$reorderedName \
                              REFERENCE=$fastaRef
    }
    string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
    string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")
    task(mdupsName <- reorderedName, taskName := "picard marking dups "+mdupsName) {
        sys picard MarkDuplicates TMP_DIR=tmp/ \
                                  VALIDATION_STRINGENCY=LENIENT \
                                  CREATE_INDEX=true \
                                  INPUT=$reorderedName \
                                  OUTPUT=$mdupsName \
                                  METRICS_FILE=$metricsName
    }
    return mdupsName
}

