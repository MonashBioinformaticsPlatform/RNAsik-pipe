#--------------------------------------------------
# Functions to pre-process BAM files - picard
#--------------------------------------------------
include "sikLog.bds"

//string getPrePro(string{} cmdExe, string bamFile, string fastaRef, string fastaDictFile){
string[] getMarkedBams(string{} cmdExe, string markedDupsBams, string[] bamFiles, string fastaRef, string fastaDictFile, string logFile) {
    string[] markedBams
    // check if executable is there
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}

    for(string bamFile : bamFiles) {
        string sortedName = markedDupsBams+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")
        // try using 8 cpus to limit how picard processes can be run at a time
        // this should imporve I/O (input / output) performance
        dep(prePro, sortedName <- bamFile, cpus := 2, taskName := "picard sorting "+bamFile) {
            sys $picardExe SortSam TMP_DIR=tmp/ \
                                   VALIDATION_STRINGENCY=LENIENT \
                                   CREATE_INDEX=true \
                                   INPUT=$bamFile \
                                   OUTPUT=$sortedName \
                                   SORT_ORDER=coordinate
        }

        string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
        dep(prePro, reorderedName <- [sortedName, fastaDictFile], cpus := 2, taskName := "picard reordering "+reorderedName) {
            sys $picardExe ReorderSam TMP_DIR=tmp/ \
                                      VALIDATION_STRINGENCY=LENIENT \
                                      INPUT=$sortedName \
                                      OUTPUT=$reorderedName \
                                      REFERENCE=$fastaRef
        }
        
        string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
        string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")
        dep(prePro, [mdupsName, metricsName] <- reorderedName, cpus := 2, taskName := "picard marking dups "+mdupsName) {
            sys $picardExe MarkDuplicates TMP_DIR=tmp/ \
                                          VALIDATION_STRINGENCY=LENIENT \
                                          CREATE_INDEX=true \
                                          INPUT=$reorderedName \
                                          OUTPUT=$mdupsName \
                                          METRICS_FILE=$metricsName
            sys rm $sortedName $reorderedName
        }
        markedBams.add(mdupsName)
        logit(logFile, "Corresponding bam file with marked dups", mdupsName)
    }
    goal markedBams
    return markedBams
}
