
class Metadata {

    string sampleName
    string[] fq1
    string[] fq2
    bool paired
    //string readGroup TODO future implementation

    void Metadata(FastqSample fastqSample) {

        this.sampleName = fastqSample.sampleName
        this.fq1 = fastqSample.fq1
        this.fq2 = fastqSample.fq2
        this.paired = fastqSample.paired

    }
}

class BamsGeneric {

    string bamOut
    string bamIdx
    string bamLog

    void BamsGeneric(string sampleName, string sikDir) {

        //log("MSG: Output directory $sikDir") //too noise

        string alignDir = sikDir+"/"+"alignerFiles"
        //log("MSG: Making directory for alignment files $alignDir") //too noisy
        if(!alignDir.exists()) {
            alignDir.mkdir()
        }

        this.bamOut = alignDir + "/" + sampleName + ".bam"
        this.bamIdx = alignDir + "/" + sampleName + ".bai"
        this.bamLog = alignDir + "/." + sampleName + ".siklog"
    }
}

class Bams extends BamsGeneric {

    string bamAlignerOut
    string bamAlignerLog

    string bamSortedOut
    string bamSortedIdx
    string bamSortedLog

    string bamSortedMdupsOut
    string bamSortedMdupsIdx
    string bamSortedMdupsLog
    string bamSortedMdupsMetrics

    string bamSortedMdupsUmiOut
    string bamSortedMdupsUmiIdx
    string bamSortedMdupsUmiLog
    string bamSortedMdupsUmiMetrics

    void Bams(string sampleName, string sikDir, string aligner) {
        //log("MSG: Aligner type $aligner") //too noisy

        BamsGeneric(sampleName, sikDir)

        string bamFilesDir = sikDir+"/"+"bamFiles"
        if(!bamFilesDir.exists()) {
            bamFilesDir.mkdir()
        }

        switch(aligner) {
            case 'star':
                this.bamAlignerOut = this.bamOut.replace(".bam", "_Aligned.out.bam")
                this.bamAlignerLog = this.bamLog.replace(".siklog", "_Aligner.out.bam.siklog")
                //TODO all other bams can be moved to outside of the switch statement, to reduce code duplication
                //once aligner specific bams have been caught
                this.bamSortedOut = bamFilesDir + "/" + this.bamOut.baseName().replace(".bam", "_sorted.bam")
                this.bamSortedIdx = bamFilesDir + "/" + this.bamIdx.baseName().replace(".bai", "_sorted.bam.bai")
                this.bamSortedLog = bamFilesDir + "/" + this.bamLog.baseName().replace(".siklog", "_sorted.bam.siklog")

                this.bamSortedMdupsOut = this.bamSortedOut.replace(".bam", "_mdups.bam")
                this.bamSortedMdupsIdx = this.bamSortedMdupsOut.replace(".bam", ".bam.bai")
                this.bamSortedMdupsLog = this.bamSortedLog.replace(".bam.siklog", "_mdups.bam.siklog")
                this.bamSortedMdupsMetrics = this.bamSortedOut.replace(".bam", "_mdups.metrics")

                this.bamSortedMdupsUmiOut = this.bamSortedOut.replace(".bam", "_mdups_umi.bam")
                this.bamSortedMdupsUmiIdx = this.bamSortedMdupsUmiOut.replace(".bam", ".bam.bai")
                this.bamSortedMdupsUmiLog = this.bamSortedLog.replace(".bam.siklog", "_mdups_umi.bam.siklog")
                this.bamSortedMdupsUmiMetrics = this.bamSortedOut.replace(".bam", "_mdups_umi.metrics")

                break
            case 'hisat2':
                this.bamOut = this.bamOut.replace(".bam", "_aligned.bam")
                this.bamLog = this.bamLog.replace(".siklog", "_aligned.log")
                break

            case 'bwaMem':
                this.bamAlignerOut = this.bamOut.replace(".bam", "_bwaMem.bam")
                this.bamAlignerLog = this.bamLog.replace(".siklog", "_bwaMem.siklog")

                this.bamSortedOut = bamFilesDir + "/" + this.bamOut.baseName().replace(".bam", "_sorted.bam")
                this.bamSortedLog = bamFilesDir + "/" + this.bamLog.baseName().replace(".siklog", "_sorted.bam.siklog")

                this.bamSortedMdupsOut = this.bamSortedOut.replace(".bam", "_mdups.bam")
                this.bamSortedMdupsLog = this.bamSortedLog.replace(".bam.siklog", "_mdups.bam.siklog")

                break
            default:
                error("SikErr: There needs to be an error here to make sure nothing else is passed through, other than allowed aligners")
        }
    }
}

class Counts {

    string cntsFwd
    string cntsFwdSummary
    string cntsFwdLog

    string cntsRev
    string cntsRevSummary
    string cntsRevLog

    string cntsNon
    string cntsNonSummary
    string cntsNonLog

    string countsDir

    void Counts(string sampleName, string sikDir) {

        countsDir = sikDir+"/"+"countFiles"
        if(!countsDir.exists()) {
            countsDir.mkdir()
        }

        this.cntsFwd = countsDir + "/" + sampleName + "_fwdCnts.txt"
        this.cntsFwdSummary = this.cntsFwd + ".summary"
        this.cntsFwdLog = countsDir + "/." + sampleName + "_fwdCnts.siklog"

        this.cntsRev = countsDir + "/" + sampleName + "_revCnts.txt"
        this.cntsRevSummary = this.cntsRev + ".summary"
        this.cntsRevLog = countsDir + "/." + sampleName + "_revCnts.siklog"

        this.cntsNon = countsDir + "/" + sampleName + "_nonCnts.txt"
        this.cntsNonSummary = this.cntsNon + ".summary"
        this.cntsNonLog = countsDir + "/." + sampleName + "_nonCnts.siklog"
    }
}

class Qc {

    string fastqc
    string flagstat
    string alignerStats
    string countsStats
    string multiqc

    void Qc() {

    }

}

class FastQc {

    string fastqcDir

    string[] fastqcHtmlR1
    string[] fastqcZipR1

    string[] fastqcHtmlR2
    string[] fastqcZipR2

    string fastqcLog

    void FastQc(Metadata metadata, string sikDir) {

        fastqcDir = sikDir + "/Qc" + "/fastqc"
        if(!fastqcDir.exists()) {
            fastqcDir.mkdir()
        }

        string[] fq1 = metadata.fq1
        string[] fq2 = metadata.fq2

        string sampleName = metadata.sampleName

        string extn = fq1[0].extName()
        //NOTE this is to check if the fastq file is zipped or not
        if(extn == "gz") {
            string tmp = fq1[0].removeExt().extName()
            extn = "."+tmp+"."+extn
        }

        for(string f : fq1) {

            string fastqBasename = f.removeExt(extn).baseName()

            this.fastqcHtmlR1 += fastqcDir + "/" + fastqBasename + "_fastqc.html"
            this.fastqcZipR1 += fastqcDir + "/" + fastqBasename + "_fastqc.zip"
        }

        for(string f : fq2) {

            string fastqBasename = f.removeExt(extn).baseName()

            this.fastqcHtmlR2 += fastqcDir + "/" + fastqBasename + "_fastqc.html"
            this.fastqcZipR2 += fastqcDir + "/" + fastqBasename + "_fastqc.zip"
        }

        this.fastqcLog = fastqcDir + "/." + sampleName + ".siklog"
    }
}

class Sample {

    Metadata metadata
    Bams bams
    Counts counts
    FastQc fastqc
    Qc qc

    void Sample(FastqSample fastqSample, SikConfig sikConf) {

        string aligner = sikConf.sikCmdFlags{"aligner"}
        string sikDir = sikConf.sikCmdFlags{"outDir"}

        this.metadata = new Metadata(fastqSample)
        this.bams = new Bams(metadata.sampleName, sikDir, aligner)
        this.counts = new Counts(metadata.sampleName, sikDir)
        this.fastqc = new FastQc(metadata, sikDir)

    }
}
