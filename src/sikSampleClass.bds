class Metadata {

    string sampleName
    string sampleGroup
    string[] fq1
    string[] fq2
    bool paired

    void Metadata(string line) {

        assert(!(line.startsWith("#")) | !(line.isEmpty()))

        //TODO check if the sample is paired end and set paired flag accordingly
        //Potentially can process paired and single end data together in the future
        //this.paired = paired

        string _path
        string[] samplesList = line.split("\t")

        int nCoreFields = 3

        int tot = samplesList.size()

        if(tot < nCoreFields+1) {
            error("There needs to be at least five columns in your samples sheet: SampleName, SampleGroup, Path, R1 and R2")
        }

        this.sampleName = samplesList[0]
        this.sampleGroup = samplesList[1]
        _path = samplesList[2]

        int nItems = tot - nCoreFields
        this.paired = (nItems % 2 == 0)

        if(this.paired) {
            for(int i : range(1, nItems)) {
                bool odd = (i % 2 != 0)
                int idx = i+nCoreFields-1

                if(odd) {
                    this.fq1.add(_path + "/" + samplesList[idx])
                } else {
                    this.fq2.add(_path + "/" + samplesList[idx])
                }
            }
        } else {
            for(int i : range(1, nItems)) {
                bool chk = (i % 2 != 0)
                int idx = i+nCoreFields
                this.fq1.add(_path + "/" + samplesList[idx])
            }
        }
    }
}

class BamsGeneric {

    string bamOut
    string bamLog

    void BamsGeneric(string sampleName, string sikDir) {

        log("MSG: Output directory $sikDir")

        string alignDir = sikDir+"/"+"alignerFiles"
        //log("MSG: Making directory for alignment files $alignDir") //too noisy
        if(!alignDir.exists()) {
            alignDir.mkdir()
        }

        this.bamOut = alignDir + "/" + sampleName + ".bam"
        this.bamLog = alignDir + "/." + sampleName + ".siklog"
    }
}

class Bams extends BamsGeneric {

    string bamAlignerOut
    string bamAlignerLog

    string bamSortedOut
    string bamSortedLog

    string bamSortedMdupsOut
    string bamSortedMdupsLog

    void Bams(string sampleName, string sikDir, string aligner) {
        //log("MSG: Aligner type $aligner") //too noisy

        BamsGeneric(sampleName, sikDir)

        string bamFilesDir = sikDir+"/"+"bamFiles"
        if(!bamFilesDir.exists()) {
            bamFilesDir.mkdir()
        }

        switch(aligner) {
            case 'star':
                this.bamAlignerOut = this.bamOut.replace(".bam", "_Aligned.out.bam")
                this.bamAlignerLog = this.bamLog.replace(".siklog", "_Aligner.out.bam.siklog")

                this.bamSortedOut = bamFilesDir + "/" + this.bamOut.baseName().replace("_Aligned.out.bam", "_sorted.bam")
                this.bamSortedLog = bamFilesDir + "/." + this.bamLog.baseName().replace(".siklog", "_sorted.bam.siklog")

                this.bamSortedMdupsOut = this.bamSortedOut.replace(".bam", "_mdups.bam")
                this.bamSortedMdupsLog = this.bamSortedLog.replace(".bam.siklog", "_mdups.bam.siklog")

                break
            case 'hisat2':
                this.bamOut = this.bamOut.replace(".bam", "_aligned.bam")
                this.bamLog = this.bamLog.replace(".siklog", "_aligned.log")
                break

            case 'bwaMem':
                this.bamAlignerOut = this.bamOut.replace(".bam", "_bwaMem.bam")
                this.bamAlignerLog = this.bamLog.replace(".siklog", "_bwaMem.siklog")

                this.bamSortedOut = bamFilesDir + "/" + this.bamOut.baseName().replace(".bam", "_sorted.bam")
                this.bamSortedLog = bamFilesDir + "/." + this.bamLog.baseName().replace(".siklog", "_sorted.bam.siklog")

                this.bamSortedMdupsOut = this.bamSortedOut.replace(".bam", "_mdups.bam")
                this.bamSortedMdupsLog = this.bamSortedLog.replace(".bam.siklog", "_mdups.bam.siklog")

                break
            default:
                error("SikErr: There needs to be an error here to make sure nothing else is passed through, other than allowed aligners")
        }
    }
}

class Counts {

    string cntsFwd
    string cntsFwdLog

    string cntsRev
    string cntsRevLog

    string cntsNon
    string cntsNonLog

    void Counts(string sampleName, string sikDir) {

        string countsDir = sikDir+"/"+"countFiles"
        if(!countsDir.exists()) {
            countsDir.mkdir()
        }

        this.cntsFwd = countsDir + "/" + sampleName + "_fwdCnts.txt"
        this.cntsFwdLog = countsDir + "/." + sampleName + "_fwdCnts.siklog"

        this.cntsRev = countsDir + "/" + sampleName + "_revCnts.txt"
        this.cntsRevLog = countsDir + "/." + sampleName + "_revCnts.siklog"

        this.cntsNon = countsDir + "/" + sampleName + "_nonCnts.txt"
        this.cntsNonLog = countsDir + "/." + sampleName + "_nonCnts.siklog"
    }
}

class Qc {

    string fastqc
    string flagstat
    string alignerStats
    string countsStats
    string multiqc

    void Qc() {

    }

}

class Sample {

    Metadata metadata
    Bams bams
    Counts counts
    Qc qc

    void Sample(string line, string sikDir, string aligner) {

        this.metadata = new Metadata(line)
        this.bams = new Bams(metadata.sampleName, sikDir, aligner)
        this.counts = new Counts(metadata.sampleName, sikDir)

    }
}

class Samples {

    Sample[] samples

    void Samples(string metadataFn, string sikDir, string aligner) {

        assert(metadataFn.exists())
        string[] metadata = metadataFn.readLines()

        for(string line : metadata) {

            if(line.startsWith("#") || line.isEmpty())  {
                continue
            }

            Sample sample = new Sample(line, sikDir, aligner)
            this.samples.add(sample)
        }
    }
}

