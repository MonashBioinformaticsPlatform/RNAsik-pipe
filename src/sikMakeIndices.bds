#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

include "sikHeader.bds"
include "sikFunctions.bds"

#------------------------------
# Make directories as required
#------------------------------
string refFiles = "refFiles"
if((!refFiles.exists()) && ((makeIndices) || (makeIndex))) refFiles.mkdir()
#------
# Body
#------
string makeLocalFastaRef(string fastaRef) {
    string localFastaRef = refFiles+"/"+fastaRef.baseName()
    task(localFastaRef <- fastaRef, taskName := "Copying files") {
        sys echo $(date) Copying files, be patient; cp -v $fastaRef $refFiles
    }
    return localFastaRef
}

string[] makeSTARindex(string fastaRef, string additionalArgs) {

    string localGenomeIndex = fastaRef.removeExt()+"-starIndex"
    if(!localGenomeIndex.exists()) localGenomeIndex.mkdir()

    string starSAindexFile = localGenomeIndex+"/"+"SAindex"

    task([localGenomeIndex, starSAindexFile] <- fastaRef, mem := 40000000000, taskName := "Making STAR index") {
        sys STAR --runThreadN $threads \
                 --runMode genomeGenerate \
                 --genomeDir $localGenomeIndex \
                 --genomeFastaFiles $fastaRef \
                 $additionalArgs
    }
    return [starSAindexFile, localGenomeIndex, fastaDictFile]
}

string[] makeOtherIndices(string fastaRef) {

    string fastaFaiFile = fastaRef+".fai"
    task(fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys samtools faidx $fastaRef
    }

    string fastaDictFile = fastaRef.removeExt()+".dict"
    task(fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys picard CreateSequenceDictionary REFERENCE=$fastaRef \
                                            OUTPUT=$fastaDictFile
    }
    return [fastaFaiFile, fastaDictFile]
}
