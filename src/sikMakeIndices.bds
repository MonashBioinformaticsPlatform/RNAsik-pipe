#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

#------------------------------
# Make directories as required
#------------------------------
string refFiles = "refFiles"
if((!refFiles.exists()) && (makeIndex)) refFiles.mkdir()
#------
# Body
#------
string makeLocalFastaRef(string fastaRef) {
    string localFastaRef

    bool gZipped
    string getExtn = fastaRef.extName()

    if(getExtn == "gz") {
	localFastaRef = refFiles+"/"+fastaRef.baseName().removeExt()
        gZipped = true
    } 
    else localFastaRef = refFiles+"/"+fastaRef.baseName()

    if(gZipped) {
        task(localFastaRef <- fastaRef, taskName := "Copying FASTA file") {
            sys echo $(date) Copying FASTA file, be patient; cp -v $fastaRef $refFiles
            sys echo $(date) Also unzipping your FASTA file; gunzip $localFastaRef
        }
    }
    else {
        task(localFastaRef <- fastaRef, taskName := "Copying FASTA file") {
            sys echo $(date) Copying FASTA file, be patient; cp -v $fastaRef $refFiles
        }

    }
    return localFastaRef
}

string makeLocalGTF(string gtfFile) {

    string localGTF

    bool gZipped
    string getExtn = gtfFile.extName()

    if(getExtn == "gz") {
        localGTF = refFiles+"/"+gtfFile.baseName().removeExt()
        gZipped = true
    } 
    else localGTF = refFiles+"/"+gtfFile.baseName()

    if(gZipped) {
        task(localGTF <- gtfFile, taskName := "Copying GTF file") {
            sys echo $(date) Copying GTF file, be patient; cp -v $gtfFile $refFiles
            sys echo $(date) Also unzipping your GTF file; gunzip $localGTF
        }
    }

    if(!gZipped) {
        task(localGTF <- gtfFile, taskName := "Copying GTF file") {
            sys echo $(date) Copying GTF file, be patient; cp -v $gtfFile $refFiles
        }
    }

    return localGTF
}

string[] makeSTARindex(string fastaRef, string additionalIndexOptions) {

    string localGenomeIndex = fastaRef.removeExt()+"-starIndex"
    if(!localGenomeIndex.exists()) localGenomeIndex.mkdir()

    string starSAindexFile = localGenomeIndex+"/"+"SAindex"

    //task([localGenomeIndex, starSAindexFile] <- fastaRef, mem := 40000000000, taskName := "Making STAR index") {
    task([localGenomeIndex, starSAindexFile] <- fastaRef, taskName := "Making STAR index") {
        sys STAR --runThreadN $threads \
                 --runMode genomeGenerate \
                 --genomeDir $localGenomeIndex \
                 --genomeFastaFiles $fastaRef \
                 $additionalIndexOptions
    }
    return [starSAindexFile, localGenomeIndex]
}
// Index FASTA reference file when needed
string makeFaiFile(string fastaRef, string fastaFaiFile) {
    task(fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys samtools faidx $fastaRef
    }
    return fastaFaiFile
}
// make dictionary for picard pre-processing
string makeDictFile(string fastaRef, string fastaDictFile) {
    task(fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys picard CreateSequenceDictionary REFERENCE=$fastaRef \
                                            OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
