#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------
string makeLocalFastaRef(string fastaRef, string refFiles) { 

    string localRef = refFiles+"/"+fastaRef.baseName()
    string getExtn = fastaRef.extName()
    string localFastaRef = localRef
    if(getExtn == "gz") localFastaRef = localRef.removeExt(".gz")

    task(!fastaRef.isEmpty(), localRef <- fastaRef, taskName := "Copying FASTA file") sys cp -v $fastaRef $refFiles
    task(getExtn == "gz", localFastaRef <- localRef, taskName := "gzip FASTA file") sys gunzip -c $localRef > $localFastaRef

    return localFastaRef
}
string makeLocalGTF(string gtfFile, string refFiles) {

    string localRef = refFiles+"/"+gtfFile.baseName()
    string getExtn = gtfFile.extName()
    string localGTF = localRef
    if(getExtn == "gz") localGTF = localRef.removeExt(".gz")

    task(!gtfFile.isEmpty(), localRef <- gtfFile, taskName := "Copying GTF file") sys cp -v $gtfFile $refFiles
    task(getExtn == "gz", localGTF <- localRef, taskName := "gunzip ing GTF file") sys gunzip -c $localRef > $localGTF

    return localGTF
}

string makeSTARindex(string{} cmdExe, string refFiles, string fastaRef, string gtfFile, string starOpts, int threads) {
    // get STAR executable 
    if(!cmdExe.hasKey("starExe")) error "Can't get STAR executable, check your config file $configFile"
    string starExe = cmdExe{"starExe"}

    string genomeIdxDir = fastaRef.removeExt()+"-starIndex"
    if(!genomeIdxDir.exists()) genomeIdxDir.mkdir()

    string[] refFilesIn 
    refFilesIn += fastaRef

    int chkGTF = starOpts.indexOf("--sjdbGTFfile")
    if(chkGTF != -1) refFilesIn += gtfFile

    //task(genomeIdxDir <- refFilesIn, cpus := threads, taskName := "Making STAR index") {
    task(genomeIdxDir <- fastaRef, cpus := threads, taskName := "Making STAR index") {
        sys $starExe --runThreadN $threads \
                     --runMode genomeGenerate \
                     --outFileNamePrefix "$refFiles/" \
                     --genomeDir $genomeIdxDir \
                     --genomeFastaFiles $fastaRef \
                     $starOpts
    }
    return genomeIdxDir
}
// make dictionary for picard pre-processing
string makeDictFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    //task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
    task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
// Index FASTA reference file when needed
string makeFaiFile(string samtoolsExe, string fastaRef) {
    // make a .fai string
    string fastaFaiFile = fastaRef+".fai"
    task(fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys $samtoolsExe faidx $fastaRef
    }
    return fastaFaiFile
}
