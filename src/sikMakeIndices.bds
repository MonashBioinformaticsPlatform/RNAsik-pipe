#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

#------------------------------
# Make directories as required
#------------------------------
string refFiles = "refFiles"
if( (!refFiles.exists()) && ( (!gtfFile.isEmpty()) || (!fastaRef.isEmpty()) ) ) refFiles.mkdir()
#------
# Body
#------
string makeLocalFastaRef(string fastaRef) { 
    // at this stage its unknown if Fasta is zipped or not
    string localRef = refFiles+"/"+fastaRef.baseName()
    string localFastaRef = localRef.removeExt(".gz")
    dep(localRef <- fastaRef, taskName := "Copying FASTA file") sys cp -v $fastaRef $refFiles
    dep(localRef.extName() == "gz", localFastaRef <- localRef, taskName := "gzip FASTA file") sys gunzip $localRef
    goal localFastaRef
    return localFastaRef
}

string makeLocalGTF(string gtfFile) {
    // at this stage its unknown if GTF is zipped or not
    string localRef = refFiles+"/"+gtfFile.baseName()
    string localGTF = localRef.removeExt(".gz")
    dep(localRef <- gtfFile, taskName := "Copying GTF file") sys cp -v $gtfFile $refFiles
    dep(localRef.extName() == "gz", localGTF <- localRef, taskName := "gunzip ing GTF file") sys gunzip $localRef
    goal localGTF
    return localGTF
}

string makeSTARindex(string starExe, string fastaRef, string additionalIndexOptions) {

    string genomeIdx = fastaRef.removeExt()+"-starIndex"
    if(!genomeIdx.exists()) genomeIdx.mkdir()

    task(genomeIdx <- fastaRef, taskName := "Making STAR index") {
        sys $starExe --runThreadN $threads \
                     --runMode genomeGenerate \
                     --genomeDir $genomeIdx \
                     --genomeFastaFiles $fastaRef \
                     $additionalIndexOptions
    }
    return genomeIdx
}
// Index FASTA reference file when needed
string makeFaiFile(string samtoolsExe, string fastaRef) {
    // make a .fai string
    string fastaFaiFile = fastaRef+".fai"
    task(fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys $samtoolsExe faidx $fastaRef
    }
    return fastaFaiFile
}
// make dictionary for picard pre-processing
string makeDictFile(string picardExe, string fastaRef) {
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    task(fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
