#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

include "sikHeader.bds"
include "sikFunctions.bds"

#------------------------------
# Make directories as required
#------------------------------
string refFiles = "refFiles"
if((!refFiles.exists()) && (makeIndices)) refFiles.mkdir()

#------
# Body
#------
string makeSTARindex(string fastaRef, string additionalArgs) {

    string starSAindexFile = "SAindex"
    string starIndexDir = fastaRef.removeExt()+"-starIndex"
    string starDepFile = starIndexDir+"/"+starSAindexFile

    if(!starIndexDir.exists()) starIndexDir.mkdir()
    # This is just in case someone already had a directory with exact the same name
    else warning "There was a directory named $starIndexDir. STAR has overwritten its content"

    task(starDepFile <- fastaRef, mem := 40000000000, taskName := "Making STAR index") {
        sys /opt/sw/STAR/2.4.2a/STAR --runThreadN 30 \
                                     --runMode genomeGenerate \
                                     --genomeDir $starIndexDir \
                                     --genomeFastaFiles $fastaRef \
                                     $additionalArgs
    }

    string fastaFaiFile = fastaRef+".fai"
    task(fastaFaiFile <- localFastaFile, taskName := "Indexing FASTA file") {
        sys /opt/sw/samtools/1.2.0/bin/samtools faidx $fastaRef
    }

    string fastaDictFile = fastaRef.removeExt()+".dict"
    task(fastaDictFile <- localFastaFile, taskName := "Making dictionary File") {
        sys /opt/sw/jdk1.7.0_21/bin/java -Xmx3g -jar /opt/sw/picard/1.139/picard.jar CreateSequenceDictionary REFERENCE=$fastaRef \
                                            OUTPUT=$fastaDictFile
    }
    return starIndexDir
}
