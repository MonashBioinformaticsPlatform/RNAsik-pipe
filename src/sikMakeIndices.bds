#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

string getUnziped(string refFile) {
    string getExtn = refFile.extName()
    string refUnziped = refFile.removeExt(".gz")
    task(refFile.extName() == "gz", refUnziped <- refFile, taskName := "gzip $refFile file") sys gunzip -c $refFile > $refUnziped
    return refUnziped
}

string chkFileExtn(string fileName, string fileType) {
    string getExtn = fileName.extName()
    string[] extns 
    if(fileType == "fasta") {
        extns = ["fa", \
                 "fasta", \
                 "fa.gz", \
                 "fasta.gz" \
                ]
    }
    if(fileType == "gtf") {
        extns = ["gtf", \
                 "gff", \
                 "gtf.gz", \
                 "gff.gz" \
                ]
    }
    
    if(!extns.has(getExtn)) error "It appears that your file type -> $fileType has invalid extention"
    return fileName
}

string copyFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string localRef = refDir+"/"+fileName
    task(localRef <- refFile, taskName := "Copying $refFile to $refDir") sys cp -v $refFile $refDir
    return chkFileExtn(getUnziped(localRef), fileType)
}

string downloadFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string downLocus = refFile.download()
    string localRef = refDir+"/"+fileName
    task(localRef <- downLocus, taskName := "downloading $refFile to $refDir") sys cp -v $downLocus $refDir
    return chkFileExtn(getUnziped(localRef), fileType)
}

string makeLocalRef(string refFile, string refDir, string fileType) { 

    int chkHttp = refFile.toLower().indexOf("http:")
    string localRef
    //NOTE if/else block assumes that user can only pass in url with http, BDS also supports s3
    if(chkHttp != -1) localRef = downloadFile(refFile, refDir, fileType)
    else localRef = copyFile(refFile, refDir, fileType)
    return localRef
}
string makeSTARindex(string{} cmdExe, string refFiles, string fastaRef, string gtfFile, string starOpts, int threads) {
    // get STAR executable 
    if(!cmdExe.hasKey("starExe")) error "Can't get STAR executable, check your config file $configFile"
    string starExe = cmdExe{"starExe"}

    string genomeIdxDir = fastaRef.removeExt()+"-starIndex"
    if(!genomeIdxDir.exists()) genomeIdxDir.mkdir()

    //string[] refFilesIn 
    //refFilesIn += fastaRef

    //int chkGTF = starOpts.indexOf("--sjdbGTFfile")
    //if(chkGTF != -1) refFilesIn += gtfFile

    //task(genomeIdxDir <- refFilesIn, cpus := threads, taskName := "Making STAR index") {
    task(!fastaRef.isEmpty(), genomeIdxDir <- fastaRef, cpus := threads, taskName := "Making STAR index") {
        sys $starExe --runThreadN $threads \
                     --runMode genomeGenerate \
                     --outFileNamePrefix "$refFiles/" \
                     --genomeDir $genomeIdxDir \
                     --genomeFastaFiles $fastaRef \
                     $starOpts
    }
    return genomeIdxDir
}
// make dictionary for picard pre-processing
string makeDictFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    //task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
    task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
// Index FASTA reference file when needed
string makeFaiFile(string samtoolsExe, string fastaRef) {
    // make a .fai string
    string fastaFaiFile = fastaRef+".fai"
    task(fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys $samtoolsExe faidx $fastaRef
    }
    return fastaFaiFile
}
