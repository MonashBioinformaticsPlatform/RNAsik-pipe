
// runs python script `strand_guessing.py` that guess strandness of the data
//string getStrandInfo(string{} cmdExe, string[] readCounts, string samplesSheet) {
//    if(!cmdExe.hasKey("pythonExe")) error "Can't get python executable, check your config file $configFile"
//    string pythonExe = cmdExe{"pythonExe"}
//
//    string getProgPath = programPath.pathName()
//    string pyScript = getProgPath+"/../scripts/strand_guessing.py"
//    string countsDir = readCounts[0].dirName()
//    string strandInfoAll = countsDir+"/"+"strandInfoAll.txt"
//    string strandInfoGuess = countsDir+"/"+"strandInfoGuess.txt"
//
//    task(counts, [strandInfoAll, strandInfoGuess] <- readCounts, taskName := "getting strand info") {
//        sys $pythonExe $pyScript --logs_dir $countsDir \
//                                 --samples_sheet $samplesSheet \
//                                 --outdir $countsDir
//    }
//    // need to wait here, because later on some other tasks will try to read from that file
//    // so it really need to be made
//    wait
//    return strandInfoGuess
//}

Metadata doReadsCount(Metadata sample, SikCountsConfig sikCntsConf, string geneModels, string sikDir) {

    string{} resources = sikCntsConf.cntsRes
    string x = resources{"featureCountsExe"}
    int xCpu = resources{"featureCountsCpu"}.parseInt()
    int xMem = resources{"featureCountsMem"}.parseInt()

    string repairExe = resources{"repairExe"}
    int repairCpu = resources{"repairCpu"}.parseInt()
    int repairMem = resources{"repairMem"}.parseInt()

    string[] cntsCmdOptsList = sikCntsConf.cntsCmdOpts

    string sampleName = sample.sampleName
    bool paired = sample.paired
    string bam = sample.bamOut // this bam files needs to be the one that featureCounts make a.k.a fixed
    //TODO need to capture repair log
    string bamTmp = bam.replace(".bam", ".repaired")
    string bamLog = sample.bamOut // this bam files needs to be the one that featureCounts make a.k.a fixed

    string cntsFwd = sample.cntsFwd
    string cntsFwdSummary = cntsFwd + ".summary"
    string cntsFwdLog = sample.cntsFwdLog

    string cntsRev = sample.cntsRev
    string cntsRevSummary = cntsRev + ".summary"
    string cntsRevLog = sample.cntsRevLog

    string cntsNon = sample.cntsNon
    string cntsNonSummary = cntsNon + ".summary"
    string cntsNonLog = sample.cntsNonLog

    //NOTE added -Q 10 to featureCounts. This is important filtering step that filters
    //multi-mappers out using MAPQ field in bam file i.e 5th column. Not many (onle one?) alingers
    //follow string definition of MAPQ filed as per sam specs. Most splice-aware aligners tophat, hisat2 and STAR
    //have discrete number of MAPQs. This doesn't matter too much in this case and MAPQ of 10 will filter out
    //correct - "uniquelly mapped" reads. For STAR, tophat2 and hisat2 MAPQ > 10 essentially means MAPQ = 50/255 depending on the alinger

    string repairMsg = "Preparing bam file for featureCounts " + sampleName
    dep(paired, bamTmp <- bam, cpus := repairCpu, mem := repairMem, taskName := repairMsg) {
        sys $repairExe -T $repairCpu -t -i $bam -o $bamTmp
    }

    string bamIn = bam
    if(paired) {
        bamIn = bamTmp
        cntsCmdOptsList.add("-p")
    }

    string cntsCmdOpts = cntsCmdOptsList.join(" ")

    dep([cntsNon, cntsNonSummary] <- [bamIn, geneModels], cpus := xCpu, mem := xMem, taskName := "Counting features against both strands $sampleName") {
        sys $x -T $xCpu \
               -a $geneModels \
               -s 0 \
               -Q 10 \
               -o $cntsNon \
               $cntsCmdOpts \
               $bamIn > $cntsNonLog 2>&1
    }

    dep([cntsFwd, cntsFwdSummary] <- [bamIn, geneModels], cpus := xCpu, mem := xMem, taskName := "Counting features against foward strand $sampleName") {
        sys $x -T $xCpu \
               -a $geneModels \
               -s 1 \
               -Q 10 \
               -o $cntsFwd \
               $cntsCmdOpts \
               $bamIn > $cntsFwdLog 2>&1
    }

    dep([cntsRev, cntsRevSummary] <- [bamIn, geneModels], cpus := xCpu, mem := xMem, taskName := "Counting features against reverse strand $sampleName") {
        sys $x -T $xCpu \
               -a $geneModels \
               -s 2 \
               -Q 10 \
               -o $cntsRev \
               $cntsCmdOpts \
               $bamIn > $cntsRevLog 2>&1
    }

    string[] res
    res += [cntsNon, cntsNonSummary]
    res += [cntsFwd, cntsFwdSummary]
    res += [cntsRev, cntsRevSummary]

    //dep(paired, res <- bamIn, taskName := "Cleaning up") {
    //    sys rm $bamTmp
    //}

    goal res
    return sample
}
//
//string getGeneIds(string pythonExe, string countFilesDir, string gtfFile, string modelType){
//
//    string pyScript = programPath.pathName()+"/../scripts/get_geneids.py"
//    string opts = "--file_type $modelType --in_file $gtfFile"
//    string geneIds = countFilesDir+"/"+"geneIds.txt"
//
//    task(counts, geneIds <- gtfFile, canFail := true, taskName := "getting geneIds.txt file") {
//        sys $pythonExe $pyScript $opts > $geneIds
//    }
//    return geneIds
//}
//TODO make mkCntsFile to accept args from extraOpts file, in particular --biotype, not every annotation file will have that info
//string[] getDegustFile(string{} cmdExe, string[] cntFiles, string samplesSheet, string gtfFile, string modelType) {
//    // sanity check
//    if(!cmdExe.hasKey("pythonExe")) {
//        error "Can't get python executable, check your config file $configFile"
//    }
//
//    string[] res
//
//    string cntsDir = cntFiles[0].dirName()
//
//    string pythonExe = cmdExe{"pythonExe"}
//    string geneIdsFile = getGeneIds(pythonExe, cntsDir, gtfFile, modelType)
//    string mkCntsFile = programPath.pathName()+"/../scripts/mk_cnts_file.py"
//
//    for(string cntFile : cntFiles) {
//        string degustFileAll = cntFile.swapExt(".txt", "-withNames.txt")
//        string degustFileProteinCoding = cntFile.swapExt(".txt", "-withNames-proteinCoding.txt")
//
//        res.add(degustFileAll)
//
//        dep(counts, degustFileAll <- [cntFile, geneIdsFile, samplesSheet], canFail := true, taskName := "making degust file with all features") {
//            sys $pythonExe $mkCntsFile --counts_file $cntFile \
//                                       --gene_ids $geneIdsFile \
//                                       --samples_sheet $samplesSheet \
//                                       --biotype "all" > $degustFileAll
//        }
//        dep(counts, degustFileProteinCoding <- [cntFile, geneIdsFile, samplesSheet], canFail := true, taskName := "making degust file with protein coding features") {
//            sys $pythonExe $mkCntsFile --counts_file $cntFile \
//                                       --gene_ids $geneIdsFile \
//                                       --samples_sheet $samplesSheet \
//                                       --biotype "protein_coding" > $degustFileProteinCoding
//        }
//    }
//
//    goal res
//    return res
//}
