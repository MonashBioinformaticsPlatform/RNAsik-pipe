#--------------------------------------------------
# Functions 
#--------------------------------------------------

include "sikHeader.bds"
include "sikMakeIndices.bds"

#------------------------------
# Make directories as required
#------------------------------
string bamFiles = "bamFiles"
string fastqcReport = "fastqcReport"

if((!bamFiles.exists()) && (star)) bamFiles.mkdir()
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()

if(extn.isEmpty()) extn = "*fastq.gz"

#------------------------------
# Functions
#------------------------------
string[] getDirs(string fqDirs) {
    
    string[] dirs
    for(string dir : fqDirs.dirPath()){
        string checkDir = dir.isDir()
        if(checkDir) dirs.add(dir)
    }
    return dirs
}

string{} getUniqueNames(string fqDir) {
    # Map with unique root key
    string{} uniqueNames
    for(string fq : fqDir.dirPath(extn)) {
        string getR1Index = fq.lastIndexOf("R1")
        if(getR1Index != -1) {
            # get the root of the file name with regex
            string[] getFile = fq.split(fqRegex)
            string rootName = getFile[0].baseName()
            # append to the list if it isn't in the list already
            if(!uniqueNames.hasKey(rootName)) uniqueNames{rootName}=""
            uniqueNames{rootName}+=fq+","
        }
    }
    return uniqueNames
}

string[] getOrderedList(string[] readsList) {

    string[] orderedReadsList
    bool checkPair
    int getListSize = readsList.size()-1
    
    for(int i : range(0,getListSize)) {
        # get fastq reads and get it pair 
        string singleRead = readsList[i]
        string[] getLastBit = singleRead.split("R1")
        string lastBit = getLastBit.pop()
        string rOne = "R1"+lastBit
        string rTwo = "R2"+lastBit
        string pairedEnd = singleRead.swapExt(rOne, rTwo)
        
        orderedReadsList.add(singleRead)
        checkPair = pairedEnd.isFile()
        if(checkPair) orderedReadsList.add(pairedEnd)
    }

    orderedReadsList.add(checkPair)
    return orderedReadsList
}

string[] getSTARreads(string[] orderedList, bool checkPair) {
    
    if(checkPair) {
        int listSize = orderedList.size()-1
        string[] listR2
        
        for (int i=listSize; i > 0; i -= 2) {
            string read = orderedList.remove(orderedList[i])
            listR2.add(read)
        }
    
        listR2 = listR2.reverse()
        string read1 = orderedList.join(",")
        string read2 = listR2.join(",")
        return [read1, read2]
    }
    else {
        string read1 = orderedList.join(",")
        return [read1]
    }
}

string fixFileNames(string rootName, string fileFix) {
    for(string line : fileFix.readLines()){
        string[] namesList = line.split("\t")
        string oldNamePrefix = namesList[0]
        string newNamePrefix = namesList[1]
        string preFixIndex = rootName.indexOf(oldNamePrefix)
        if(preFixIndex != -1){
            string fixedFileName = rootName.replace(oldNamePrefix, newNamePrefix)
            return fixedFileName
        }
    }
}

string mapSTAR(string rootName, string genomeIndex, string SAindexFile, string[] listOfReads, string[] rawReads) {
    string fixedFileName
    
    if(!sampleNames.isEmpty()){
        fixedFileName = fixFileNames(rootName, sampleNames)
    }
    else{
        fixedFileName = rootName
    }
    
    string rootBase = fixedFileName.baseName()
    string preFix = bamFiles+"/"+rootBase+"_"
    string bamOut = preFix+"Aligned.out.bam"
    string reads = listOfReads.join(" ")
    
    task(bamOut <- [genomeIndex, SAindexFile], taskName := "STAR aligning "+rootBase) {
        sys STAR --runThreadN 32 \
                 --genomeDir $genomeIndex \
                 --outSAMtype BAM Unsorted \
                 --outSAMunmapped Within \
                 --outSAMattrRGline ID:001 CN:Unknown DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$rootBase \
                 --readFilesCommand zcat \
                 --readFilesIn $reads \
                 --outFileNamePrefix $preFix
    }
    wait
    # you can remove wait statement and reduce number of threads
    # however this will run all your fastq files in parallel
    # doing this I find a bit impractical on our server because of
    # limited RAM - only 128 Gb
    return bamOut
}
