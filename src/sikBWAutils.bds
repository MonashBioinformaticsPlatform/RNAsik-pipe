
string mkBWAidx(SikBWAidxConfig sikBWAidxConf, string fasta, string bwaIdx, string[] idxDeps, string logFn) {

    string{} resources = sikBWAidxConf.idxRes
    string x = resources{"bwaExe"}
    int xCpu = resources{"idxCpu"}.parseInt()
    int xMem = resources{"idxMem"}.parseInt()

    string bwaCmdOpts = sikBWAidxConf.idxCmdOpts.join(" ")

    log("MSG: Beginng BWA indexing")
    task(idxDeps <- fasta, cpus := xCpu, mem := xMem, taskName := "Making bwa index") {
        sys $x index -p $bwaIdx \
                     $fasta \
                     $bwaCmdOpts > $logFn 2>&1
    }

    return bwaIdx
}

Metadata mapBWA(SikBWAalignerConfig sikBWAalignerConf, Metadata sample, string genomeIdx, string[] idxDeps) {

    string{} resources = sikBWAalignerConf.alignerRes
    string x = resources{"bwaExe"}
    int xCpu = resources{"alignerCpu"}.parseInt()
    int xMem = resources{"alignerMem"}.parseInt()

    string bwaCmdOpts = sikBWAalignerConf.alignerCmdOpts.join(" ")

    string sampleName = sample.sampleName
    //string group =  sample.sampleGroup
    string bamOut = sample.bamAlignerOut
    string bamLog = sample.bamAlignerLog

    string[] fq1 = sample.fq1
    string[] fq2 = sample.fq2

    int chk1 = fq1.size()
    int chk2 = fq2.size()

    assert(chk1 == chk2)

    string fq1Sub
    string fq2Sub

    if(chk1 == 1) {
        fq1Sub = fq1[0]
        fq2Sub = fq2[0]
    } else {
        fq1Sub = "<(zcat " + fq1.join(" ") + ")"
        fq2Sub = "<(zcat " + fq2.join(" ") + ")"

    }

    string[] deps
    deps += fq1
    deps += fq2
    deps += idxDeps

    string logMsg = "BWA mem aligning " + sampleName
    dep([bamOut, bamLog] <- deps, cpus := xCpu, mem := xMem, taskName := logMsg) {
        sys $x mem -t $xCpu \
                   $bwaCmdOpts \
                   $genomeIdx \
                   $fq1Sub $fq2Sub 2> $bamLog | samtools view -S -b - > $bamOut
    }

    sample.bamOut = bamOut
    return sample
}
