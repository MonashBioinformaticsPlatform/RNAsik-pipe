#-----------------------------------------------------------------------------------------------
# title: RNAsik is a fully sick way to get from FASTQ to list of counts and more. Degust ready !
# author: kizza
#-----------------------------------------------------------------------------------------------
include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikRefFiles.bds"
include "sikLog.bds"
include "sikFqFiles.bds"
include "sikMapping.bds"
include "sikIndexing.bds"
include "sikCounts.bds"
include "sikPrePro.bds"
include "sikQCreports.bds"
include "sikExonicRate.bds"
include "sikCoverage.bds"
include "sikCleanUp.bds"
// Check cmd args first up
string checkCmdInput = checkCmdArgs()
// set main directory
string sikDir
if(!outDir.isEmpty()) {
    if(!outDir.exists()) {
        outDir.mkdir()
        sikDir = outDir
    }
    else sikDir = outDir
}
else sikDir = "sikRun"

string{} totRefFiles
if(!refFiles.isEmpty()) totRefFiles = chkRefFiles(refFiles)

// make directories as required
if(!sikDir.exists()) sikDir.mkdir()
string logFile = sikDir+"/"+"logFile.txt"
string refFilesDir = sikDir+"/"+"refFiles"
if(!refFilesDir.exists() && refFiles.isEmpty()) refFilesDir.mkdir()
string versionsDir = sikDir+"/.versions"
if(!versionsDir.exists()) versionsDir.mkdir()
string bamFiles = sikDir+"/"+"bamFiles"
if( (!bamFiles.exists()) && (!fqDir.isEmpty()) ) bamFiles.mkdir()
string countFiles = sikDir+"/"+"countFiles"
if((!countFiles.exists()) && (counts)) countFiles.mkdir()
string markedDupsBams = sikDir+"/"+"markedDupsBams"
if((!markedDupsBams.exists()) && (prePro)) markedDupsBams.mkdir()
string coverageFilesDir = sikDir+"/"+"coverageFiles"
if((!coverageFilesDir.exists()) && (prePro)) coverageFilesDir.mkdir()
string fastqcReport = sikDir+"/"+"fastqcReport"
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()
// Start loging
string date = sys date
logit(logFile, ">Starting new RNAsik run", date.trim())
// Parse config file
string sikProgPath = programPath.pathName()
if(!configFile.isEmpty()) logit(logFile, "Config file parameters passed by user", configFile.read())
else {
    configFile = sikProgPath+"/../configs/sik.config"
    logit(logFile, "Paths to the executables", configFile.read())
}
string{} cmdExe = config(configFile)
// log versions of tools used
string toolsVersions = getToolsVersions(cmdExe, versionsDir)

string[] fqFiles
if(!fqDir.isEmpty()) fqFiles = getFqFiles(fqDir, extn, sikDir)
logit(logFile, "Fastq files found in the fqDir directory", parseList(fqFiles))

if(samplesSheet.isEmpty()) samplesSheet = makeSamplesSheet(fqFiles, fqRgxs, pairIds, extn, sikDir)
else string usrSamplesSheet = copySamplesSheet(sikDir, samplesSheet)
logit(logFile, "Samples Sheet: Old prefix \\t New prefix", parseMap(config(samplesSheet)))

// set path to fasta file
string localFastaRef
if(!fastaRef.isEmpty() && !totRefFiles) localFastaRef = makeLocalRef(fastaRef, refFilesDir, "fasta")
else localFastaRef = totRefFiles{"fa"}
logit(logFile, "Referece FASTA file", localFastaRef)
// set path to gtf file string localGTF
string localGTF
if(!gtfFile.isEmpty() && !totRefFiles) localGTF = makeLocalRef(gtfFile, refFilesDir, "gtf")
else localGTF = totRefFiles{"gtf"}
logit(logFile, "Reference GTF file", localGTF)

// checking if annoation file is gff
if(localGTF.extName() == "gff" || localGTF.extName() == "gff3") setGFF = true
logit(logFile, "You are using GFF annotation file", setGFF)

// get .dict file 
string fastaDictFile
if(!totRefFiles) fastaDictFile = makeDictFile(cmdExe, localFastaRef)
else fastaDictFile = totRefFiles{"dict"}
logit(logFile, "Picard dictionary file", fastaDictFile)

// get .chrom.sizes file 
string chromSizes
if(!totRefFiles) chromSizes = makeChromSizes(localFastaRef)
else chromSizes = totRefFiles{"chromSizes"}
logit(logFile, "chrom sizes", chromSizes)

// get genomeIdx 
if(!align.isEmpty() && totRefFiles) {
    genomeIdx = totRefFiles{"idx"}
    string chkExtn = genomeIdx.extName()
    if(!chkExtn.startsWith(align)) error "Index ($genomeIdx) doesn't seem to correspond to aligner ($align) of choice"
} 
else if(!align.isEmpty() && genomeIdx.isEmpty()) {
    genomeIdx = getIdx(cmdExe, align, setGFF, refFilesDir, localFastaRef, localGTF, extraOpts, threads, logFile)
} 
logit(logFile, "STAR genomic index directory", genomeIdx)

// map of FASTQ to unique name i.e gathering FASTQ that are split across different lanes
string{} samplesMap
if(!fqDir.isEmpty()) samplesMap = getSamplesMap(fqFiles, samplesSheet)
logit(logFile, "Fastq files grouped by samples", parseFqMap(samplesMap))
// BAM files
string[] bamsList = getBams(cmdExe, align, bamFiles, samplesMap, pairIds, paired, extraOpts, genomeIdx, threads, memory, logFile)
logit(logFile, "BAM files", parseList(bamsList))
// If user wants to use other parts of the pipeline without generating BAM files
if(!samplesMap && ( (counts) || (prePro) || (exonicRate) ) ) {
    // get bam file from the bamFiles directory
    if(bamFiles.exists()) bamsList = bamFiles.dirPath("*.bam")
    else error "No bam files or bamFiles directory was found. You can pass bam files using -bamFiles /path/to/bamFiles/dir"
}
// sorted, reorted and marking duplicates in BAM files
string[] markedBams = getMarkedBams(cmdExe, markedDupsBams, bamsList, localFastaRef, fastaDictFile)
logit(logFile, "Pre-processed BAM files", parseList(markedBams))
// coverage files
//NOTE this is for future implementation of strand specific coverage
//string[] strands = ["for", "rev"]
//for(string strand : strands) {
string[] covFiles = getCovFiles(cmdExe, markedBams, coverageFilesDir, localFastaRef, chromSizes)
//}
// featureCounts cmd options
string{} countsOpts = { "-a" => localGTF }
if(paired) countsOpts{"-p"} = ""
if(setGFF) {
    countsOpts{"-t"} = "CDS"
    countsOpts{"-g"} = "Parent"
}
string allCountOpts = getOpts(getOptsMap("featureCounts", countsOpts, extraOpts))
logit(logFile, "featureCounts cmd options", allCountOpts)
// get counts
string[] featureCounts = getReadsCount(cmdExe, countFiles, bamsList, allCountOpts, localGTF, threads)
logit(logFile, "Raw counts from featureCounts", parseList(featureCounts))
// get strand info
string strandInfo = getStrandInfo(cmdExe, featureCounts)
if(strandInfo.isFile()) logit(logFile, "The library strandness was detected as:", strandInfo.read().trim())
logit(logFile, "The library appears to be paired end:", paired)
if(exonicRate) {
    //TODO maybe error is to strong. Have a think of a way to including warning instead. 
    if(!counts && strand.isEmpty()) error "No strand information found. Use -counts flag to get it. Alternatively use -strand flag with appropriate strand type."
    if(!counts && !strand.isEmpty()) strandInfo = strand
}
string[] degust = getDegust(cmdExe, countFiles, featureCounts, bamsList.size(), localGTF, setGFF, threads)
logit(logFile, "Degust ready, protein_coding counts only", parseList(degust))
string{} exonicOpts = { "-gtf" => localGTF }
if(paired) {
    // flag for paired end data
    exonicOpts{"--paired"} = ""
    // bams need to be sorted by name, which is default output from STAR
    //TODO need to reinforce this! If user will output SortedByCoordinates from STAR 
    // then this will no longer be true
    exonicOpts{"--sorted"} = ""
}
string allExonicOpts = getOpts(getOptsMap("qualimap", exonicOpts, extraOpts))
logit(logFile, "QualiMap additional cmd options", allExonicOpts)

// get Int(ra|er)genic rates
string[] exonicRates = getExonicRates(cmdExe, sikDir, markedBams, allExonicOpts, strandInfo, gtfFile, logFile)
logit(logFile, "Exonic rates files", parseList(exonicRates))
// FastQC report
string{} fastqcOpts = { "--format" => "fastq", \
                        "--quiet" => ""}
//fastqcOpts{ "--casava" } = ""
string fqQcOpts = getOpts(getOptsMap("fastqc", fastqcOpts, extraOpts))
logit(logFile, "FastQC additional cmd options", fqQcOpts)
string[] fqQcReport = getFastqcReport(cmdExe, fastqcReport, fqFiles, fqQcOpts, extn, threads)
logit(logFile, "FastQC reports", parseList(fqQcReport))
// remove raw bam files and symlink processed bams instead
// this is to remove redundant bam files
string cleanUp = cleanBamsUp(bamsList, bamFiles, featureCounts, markedBams)
// gather all files up for multiqc 
string[] multiqcDeps
if(!align.isEmpty()) multiqcDeps += bamsList
if(prePro) multiqcDeps += markedBams
if(counts) multiqcDeps += degust
if(fastqc) multiqcDeps += fqQcReport
if(exonicRate) multiqcDeps += exonicRates
logit(logFile, "MultiQC dependency files", parseList(multiqcDeps))

string{} multiqcOpts = {"--config" => sikProgPath+"/../configs/multiqc_conf.yml"}

string allMultiqcOpts = getOpts(getOptsMap("multiqc", multiqcOpts, extraOpts))
string qcReport = getMultiqc(cmdExe, sikDir, multiqcDeps, allMultiqcOpts)
logit(logFile, "Multiqc will run on this directory", qcReport)

#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
