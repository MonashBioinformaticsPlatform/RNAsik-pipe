
include "sikHeader.bds"
include "sikConfigClass.bds"
include "sikReferencesClass.bds"
include "sikSampleClass.bds"
include "sikMarkDupsClass.bds"
include "sikResultsClass.bds"
include "sikFeatureCountsClass.bds"

sikConf := new SikConfig(sikConfig)
sikRefConf := new SikReferencesConfig(sikConf.usrResConf)

ref := new References(sikConf, sikRefConf) // here ref class returns "generic" object that aligner config can take
string aligner = sikConf.sikCmdFlags{"aligner"}

//NOTE remember that mdups can take any three values default | umi | none
string mdups = getVal(sikConf.sikCmdFlags, "mdups")

AlignerConfig alignerConf = new AlignerConfig(sikConf.usrResConf, sikConf.usrToolsConf, aligner)
alignerRes := new AlignerResults(sikConf, alignerConf, ref.genomeIdx, ref.idxDeps)

//TODO SortConfig class doesn't need aligner, need to fix that
SortConfig sortConf = new SortConfig(sikConf.usrResConf, sikConf.usrToolsConf, aligner)
sortedBamRes := new SortedBamResults(alignerRes.results, sikConf, sortConf)

string mdupsToolName = "picardMarkDups"
if(mdups == "umi") mdupsToolName = "jeMarkDups"

MarkDupsConfig mdupsConf = new MarkDupsConfig(sikConf.usrResConf, sikConf.usrToolsConf, mdupsToolName)
markDupsBamRes := new MarkDupsBamResults(sortedBamRes.results, sikConf, mdupsConf)

Sample[] bamRes

if(mdups == "default" || mdups == "umi") {
    bamRes = markDupsBamRes.results
} else {
    bamRes = sortedBamRes.results
}

SikCountsConfig sikCntsConf = new SikCountsConfig(sikConf.usrResConf, sikConf.usrToolsConf)
countsRes := new ReadsCount(bamRes, ref.geneModels, sikConf.sikCmdFlags{"outDir"}, sikCntsConf)
