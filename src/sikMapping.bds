include "sikSTARaligner.bds"
include "sikHisat2.bds"
include "sikBWAaligner.bds"
include "sikLog.bds"

string{} getBams(string{} cmdExe, string aligner, string bamsDir, string{} samplesMap, string pairIds, bool paired, string{} usrOpts, string genomeIdx, string fastaRef, string logsDir) {
    string{} bamsMap
    // STAR default options
    string{} starOpts = { "--outSAMtype" => "BAM Unsorted", \
                          "--outSAMunmapped" => "Within"}
    // use right file streaming cmd
    if(extn.endsWith(".gz")) starOpts{"--readFilesCommand"} = "zcat"
    else starOpts{"--readFilesCommand"} = "cat"
    // Hisat2 default options
    string{} hisat2Opts = {}
    string{} bwaMemOpts = {}

    if(aligner.indexOf("star") != -1) {
        string allSTARopts = getExtrOpts("STAR", starOpts, usrOpts)
        mkLog("STAR", allSTARopts, "refFiles", logsDir)
        bamsMap = mapSTAR(cmdExe, bamsDir, samplesMap, pairIds, paired, allSTARopts, genomeIdx)
    }
    if(aligner.indexOf("hisat2") != -1) {
        string allHisat2Opts = getExtrOpts("Hisat2", hisat2Opts, usrOpts)
        mkLog("Hisat2", allHisat2Opts, "refFiles", logsDir)
        bamsMap = mapHisat2(cmdExe, bamsDir, samplesMap, pairIds, paired, allHisat2Opts, genomeIdx, fastaRef)
    }
    if(aligner.indexOf("bwa") != -1) {
        string allBWAopts = getExtrOpts("bwa mem", bwaMemOpts, usrOpts)
        mkLog("bwaMem", allBWAopts, "refFiles", logsDir)
        bamsMap = mapBWA(cmdExe, bamsDir, samplesMap, pairIds, paired, allBWAopts, genomeIdx, fastaRef)
    }

    return bamsMap
}
