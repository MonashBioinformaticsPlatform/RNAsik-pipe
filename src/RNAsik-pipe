#!/usr/bin/env bds

#----------------------------------------------------------------------------------------------------
# RNAsik-pipe is an easy way from FASTQ to differential gene expression #degust
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik-pipe
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the STAR runtime
#   * Gets count data, checks both reverse strand and no strands 
#   * Prepares BAM files for RNAseQC report
#   * Gets both RNA-SeQC report and Fastqc report
#
#----------------------------------------------------------------------------------------------------

include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikMakeIndices.bds"
include "sikSortFastqs.bds" 
include "sikSTARaligner.bds"
include "sikPrePro.bds"
include "sikCounts.bds"
include "sikQCreports.bds"
include "sikExtraOptions.bds"
#------------------------------
# Print version
#------------------------------
if(args[0] == "-version") print("RNAsik-pipe version 1.3a\n")
#------------------------------
# Global Variables
#------------------------------
# set locaGenomeIndex 
string localGenomeIndex
string localSAindexFile 
#string  list of bam files from STAR run
string[] bamsList
# list of all BAMS files,
# where BAM had been sorted, reorted and duplicates marked
string[] markedBams
// initialise empty variable
string localFastaRef 
// initialise empty variable
string localGTF
// check if data is paired end or not
bool checkPair
#-------------------
# Copy files across
#-------------------
if(fastaRef) localFastaRef = makeLocalFastaRef(fastaRef)
if(gtfFile) localGTF = makeLocalGTF(gtfFile)
#------------------------------
# Make indices if required 
#------------------------------
if(makeIndex){
    string{} currentIndexOptions

    string cmdOptions = getCmdOptions("starIndex", extraOptions)
    string additionalIndexOptions = getAllOptions(cmdOptions, currentIndexOptions)

    string[] localIndexList = makeSTARindex(localFastaRef, additionalIndexOptions)
    localSAindexFile = localIndexList[0]
    localGenomeIndex = localIndexList[1]
}

// set global genomeIndex variable
if(!makeIndex) localGenomeIndex = genomeIndex

#------------------------------
# fastQC report
#------------------------------
if(fastqc) {
    if(!fqDir.isEmpty()) {
        string[] allFastqFiles = getAllFastqFiles(fqDir)	
        string fqcReport = getFastqcReport(allFastqFiles)
    }
}
#------------------------------
# BAM generation step
#------------------------------
if(align == "star"){
    if(!fqDir.isEmpty()) {

        string{} uniqueNames = getUniqueNames(fqDir)
        string[] getStats = getFqReadsStats(fqDir)
        checkPair = getStats.pop()
        
        for(string rootName : uniqueNames.keys()) {
            string[] reads 
            # get value for each key and break values into list
            string singleEndValues
            string pairedEndValues

            if(checkPair) {
                singleEndValues = uniqueNames{rootName} 
                pairedEndValues = singleEndValues.replace("_R1", "_R2")

                int getSingleLength = singleEndValues.length()-1
                int getPairedLength = pairedEndValues.length()-1

                string cleanSingle = singleEndValues.substr(0,getSingleLength)
                string cleanPaired = pairedEndValues.substr(0,getPairedLength)

                reads.add(cleanSingle)
                reads.add(cleanPaired)
            }
            else {
                singleEndValues = uniqueNames{rootName} 
                int getSingleLength = singleEndValues.length()-1
                string cleanSingle = singleEndValues.substr(0,getSingleLength)
                reads.add(cleanSingle)
            }

            string{} currentSTARoptions = { "--outSAMtype" => "BAM Unsorted", "--outSAMunmapped" => "Within", "--readFilesCommand" => "zcat" }

            string cmdOptions = getCmdOptions("STAR", extraOptions)
            string additionalSTARoptions = getAllOptions(cmdOptions, currentSTARoptions)
            // STAR aligning
            string bamFile = mapSTAR(rootName, localGenomeIndex, localSAindexFile, reads, additionalSTARoptions) 
            bamsList.add(bamFile)
        }
    }
}

if(count) { 
    if(align != "star") bamsList = bamFiles.dirPath("*.bam")

    string{} currentCountsOptions
    if(checkPair) currentCountsOptions = { "-p" => "" }

    string cmdOptions = getCmdOptions("featureCounts", extraOptions)
    string additionalCountsOptions = getAllOptions(cmdOptions, currentCountsOptions)

    if(!bamsList) error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamFiles path/to/you/bams/directory`"
    string[] featureCounts = getReadsCount(bamsList, gtfFile, additionalCountsOptions)
    string featureNo = featureCounts[0]
    string featureReverse = featureCounts[1]

    string featureNoCounts = countFiles+"/"+"featureNoCounts.txt"
    string featureReverseCounts = countFiles+"/"+"featureReverseCounts.txt"

    string tempNo = countFiles+"/"+"tempNo.txt"
    string tempReverse = countFiles+"/"+"tempReverse.txt"

    string featureNoCountsWithNames = countFiles+"/"+"featureNoCounts-withNames.txt"
    string featureReverseCountsWithNames = countFiles+"/"+"featureReverseCounts-withNames.txt"

    string geneIdsFile = getGeneIds()

    int numberOfBamFiles = bamsList.size()+7
    int[] theRange = range(7, numberOfBamFiles)
    string numberOfFields = theRange.join(",")

task([featureNoCountsWithNames, featureReverseCountsWithNames] <- [featureNo, featureReverse, geneIdsFile], taskName := "Making Degust-ready counts file") {
       sys grep -v "#" $featureNo | cut -f1,$numberOfFields | perl -pe 's{\S+/([^_]+)[^/]+(\t|\n)}{$1$2}g if $. == 1' > $featureNoCounts
       sys sed -i '0,/Geneid/s/Geneid/Gene.ID/' $featureNoCounts
       sys /bin/bash -c "join -j 1 <(sort -k1,1 $geneIdsFile) <(sort -k1,1 $featureNoCounts) -t $'\t' > $tempNo"
       sys grep "Biotype" $tempNo > $featureNoCountsWithNames
       sys grep -v "Biotype" $tempNo >> $featureNoCountsWithNames
       sys rm $tempNo

       sys grep -v "#" $featureReverse | cut -f1,$numberOfFields | perl -pe 's{\S+/([^_]+)[^/]+(\t|\n)}{$1$2}g if $. == 1' > $featureReverseCounts
       sys sed -i '0,/Geneid/s/Geneid/Gene.ID/' $featureReverseCounts
       sys /bin/bash -c "join -j 1 <(sort -k1,1 $geneIdsFile) <(sort -k1,1 $featureReverseCounts) -t $'\t' > $tempReverse"
       sys grep "Biotype" $tempReverse > $featureReverseCountsWithNames
       sys grep -v "Biotype" $tempReverse >> $featureReverseCountsWithNames
       sys rm $tempReverse
   }
}
#------------------------------
# BAM processing
#------------------------------
if(prePro) {
    // check that not aligners had been specified
    if(align != "star") bamsList = bamFiles.dirPath("*.bam")
    // make sure we have BAM files to work with
    if(!bamsList) error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamFiles path/to/you/bams/directory`"
    // make Fai file if dosen't exist
    string fastaFaiFile = localFastaRef+".fai"
    if(!fastaFaiFile.exists()) fastaFaiFile = makeFaiFile(localFastaRef, fastaFaiFile)
    // make dict file if doesn't exist
    string fastaDictFile = localFastaRef.removeExt()+".dict"
    if(!fastaDictFile.exists()) fastaDictFile = makeDictFile(localFastaRef, fastaDictFile)
    // loop over BAM files do pre-processing 
    for(string bamFile : bamsList) {
            string mdupsBam = getPrePro(bamFile, localFastaRef)
            markedBams.add(mdupsBam)
        }
}
#----------------
# RNAseQC report
#----------------
if(RNAseQC){
     
    string{} currentRNAseQCoptions
    if(!checkPair) currentRNAseQCoptions = { "-singleEnd" => "" }

    string cmdOptions = getCmdOptions("RNAseQC", extraOptions)
    string additionalRNAseQCoptions = getAllOptions(cmdOptions, currentRNAseQCoptions)
   
    if(markedBams) {
        // make Fai file if dosen't exist
        string fastaFaiFile = localFastaRef+".fai"
        if(!fastaFaiFile.exists()) fastaFaiFile = makeFaiFile(localFastaRef, fastaFaiFile)

        string sampleIdsFile = "RNAseQC-sampleIds.txt"
        string RNAseQCsampleIds = getSampleIds(markedBams)
        sampleIdsFile.write(RNAseQCsampleIds)

        int checkFileSize = RNAseQCsampleIds.size()
        if(checkFileSize != 0) string qcReport = getRNAseQC(sampleIdsFile, markedBams, localFastaRef, additionalRNAseQCoptions)
    }  
    else error "No pre-processed BAM files were found, either used -prePro options or specify directory with appropriate BAM files using `-markedBams path/to/you/bams/directory`"
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
