#!/usr/bin/env bds

#----------------------------------------------------------------------------------------------------
#  Align RNA-seq reads to the reference genome, get RNA-seq metrics and get reads counts
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik-pipe
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the STAR runtime
#   * Gets count data, checks both reverse strand and no strands 
#   * Prepares BAM files for RNAseQC report
#   * Gets both RNA-SeQC report and Fastqc report
#
#----------------------------------------------------------------------------------------------------

include "sikHeader.bds"
include "sikMakeIndices.bds"
include "sikFunctions.bds" 
include "sikPrePro.bds"
include "sikQCreports.bds"

#------------------------------
# Global Variables
#------------------------------
string localFastaRef
# list of bam files from STAR run
string[] bamsList
# get bool for whether the data is paired end or not
bool checkPair 
# List of all read counts files
string[] readCountsFiles
# list of all BAMS files,
# where BAM had been sorted, reorted and duplicates marked
string[] markedBams
#------------------------------
# Sanity check
#------------------------------
if(makeIndices){
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/referenceFastaFile"
    else{
        string fastaRefBaseName = fastaRef.baseName()
        localFastaRef = refFiles+"/"+fastaRefBaseName
    }
}
if(fastqc) {
    if( ((fqDir.isEmpty()) && (fqDirs.isEmpty())) || ((fqDirs.isEmpty()) && (fqDir.isEmpty()))) error "Usage: You need to specify either -fqDir or -fqDirs"
}
if(star) {
    if(fqRegex.isEmpty()) error "test"

    if(!fqRegex.isEmpty()){
        if(fqRegex == "A") fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
        if(fqRegex == "B") fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
        if(fqRegex == "C") fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
    }
    else error "Usage: You need to select A, B or C option for -fqRegex flag"
    
    if((fqDirs.isEmpty()) && (fqDir.isEmpty())) error "Usage: You need to specify either -fqDir or -fqDirs"
    if(genomeIndex.isEmpty() && (!makeIndices))  error "Usage: -genomeIndex /path/to/genomeIndex/"
}
if(count) {
    if(gtfFile.isEmpty())  error "Usage: -gtfFile /path/to/GTFfile"
}
if(prePro){
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/referenceFastaFile"
    if(!makeIndices){
        localFastaRef = fastaRef 
        string exampleFastaDict = fastaRef.removeExt()+".dict"
        string exampleFastaFai fastaRef+".fai"
        warning "Make sure you have $exampleFastaDict and $exampleFastaFai in the same directory as your $fastaRef file, because downstream application will assume that. If unsure run RNAsik-pipe with -makeIndices option"
    }
}
if(RNAseQC){
   if(gtfFile.isEmpty()) error "Usage: -gtfFile /path/to/GTFfile"
   if(!preqcBamFiles.isDir()) error "It looks like you don't have pre-proccessed BAM files. Make sure your pre-proccessed BAM files located in `preqcBamFiles` directory Or simply re-run RNAsik-pipe with -prePro flag"
}
if( args.isEmpty() ) {
    printHelp()
    exit(1)
}

#------------------------------
# Make indices if required 
#------------------------------
if(makeIndices){
    task(localFastaRef <- fastaRef, taskName := "Copying files") sys echo $(date) Copying files, be patient; cp -v $fastaRef $refFiles
    string sjdbArguments
    if(gtfFile) {
        int readSize = 101
        int overHang = readSize - 1
    
        sjdbArguments = "--sjdbGTFfile $gtfFile --sjdbOverhang $overHang"
    }
    else sjdbArguments = ""
    genomeIndex = makeSTARindex(localFastaRef, sjdbArguments)
}
#------------------------------
# fastQC report
#------------------------------
#if(fastqc) {
#    if(!fqDir.isEmpty()) {
#        string fastqcFiles = fqDir.dirPath().join(" ")
#        task fastqc --outdir $fastqcReport \
#                    --format fastq \
#                    $fastqcFiles
#    }
#}
#------------------------------
# BAM generation step
#------------------------------

if(star){
    if(!fqDir.isEmpty()) {
        string{} uniqueNames = getUniqueNames(fqDir)

        for(string fqread : uniqueNames.keys()) {
            # get value for each key and break values into list
            string mapValue = uniqueNames{fqread} 
            string[] getList = mapValue.split(",")
            string[] orderedList = getOrderedList(getList)
            string boolItem = orderedList.pop()
            checkPair = boolItem.parseBool()
            # STAR aligning
            string[] reads = getSTARreads(orderedList, checkPair)
            //string bamFile = mapSTAR(fqread, genomeIndex, reads, orderedList) 
            string bamFile = mapSTAR(fqread, reads, orderedList) 
            bamsList.add(bamFile)
        }
    }

    if(!fqDirs.isEmpty()) {
        string[] dirs = getDirs(fqDirs)
        int numberOfDirs = dirs.size()
    
        for(int i=0; i < numberOfDirs; i++){

        
            string dir = dirs[i]
            string makeDirPath = fqDirs+"/"+dir
            string{} uniqueNames = getUniqueNames(dir)
    
            for(string fqread : uniqueNames.keys()) {
                # get value for each key and break values into list
                string mapValue = uniqueNames{fqread} 
                string[] getList = mapValue.split(",")
                string[] orderedList = getOrderedList(getList)
                string boolItem = orderedList.pop()
                checkPair = boolItem.parseBool()
                # STAR aligning
                string[] reads = getSTARreads(orderedList, checkPair)
                string bamFile = mapSTAR(fqread, reads, orderedList) 
                bamsList.add(bamFile)
            }
        }
    }
    //else error "Can either specify `fqDir` or `fqDirs` not both. Run `RNAsik-pipe -help` for more help"
}
#------------------------------
# BAM processing
#------------------------------
for(string bamFile : bamsList) {
    if(prePro) {
        string testCheck = getPrePro(bamFile, localFastaRef)
        markedBams.add(testCheck)
    }

    if(count) {
       string readCountsFile = getReadsCount(bamFile, gtfFile)
       readCountsFiles.add(readCountsFile)
    }
}
#----------------
# RNAseQC report
#----------------
if(RNAseQC){
    string sampleIdsFile = "RNAseQC-sampleIds.txt"
    string RNAseQCsampleIds = getSampleIds(markedBams)
    sampleIdsFile.write(RNAseQCsampleIds)
    string check = getRNAseQC(sampleIdsFile, markedBams, checkPair)
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
