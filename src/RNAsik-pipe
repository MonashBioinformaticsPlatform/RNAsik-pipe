#!/usr/bin/env bds

#----------------------------------------------------------------------------------------------------
# RNAsik-pipe is an easy way from FASTQ to differential gene expression #degust
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik-pipe
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the STAR runtime
#   * Gets count data, checks both reverse strand and no strands 
#   * Prepares BAM files for RNAseQC report
#   * Gets both RNA-SeQC report and Fastqc report
#
#----------------------------------------------------------------------------------------------------
include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikMakeIndices.bds"
include "sikSortFastqs.bds" 
include "sikSTARaligner.bds"
include "sikPrePro.bds"
include "sikCounts.bds"
include "sikQCreports.bds"
include "sikExtraOptions.bds"
#------------------------------
# Check cmd args
#------------------------------
string checkCmdInput = checkCmdArgs()
#------------------------------
# Parse config file
#------------------------------
string getProgPath = programPath.pathName()
string getConfigFile = getProgPath+"/../sik.config"
string{} cmdExe
if(!configFile.isEmpty()) cmdExe = config(configFile)
else cmdExe = config(getConfigFile)
#------------------------------
# Global Variables
#------------------------------
//string  list of bam files from STAR run
string[] bamsList
// list of all BAMS files,
//# where BAM had been sorted, reorted and duplicates marked
string[] markedBams
#------------------------------
# Make indices if required 
#------------------------------
if(makeIndex){
    // default STAR options for indexing step
    string{} currentIndexOptions
    // get additonal option for STAR indexing run
    string cmdOptions = getCmdOptions("starIndex", extraOptions)
    string additionalIndexOptions = getAllOptions(cmdOptions, currentIndexOptions)
    // get STAR executable
    string getSTARexe = cmdExe{"starExe"}
    // get genomeIndex directory
    genomeIndex = makeSTARindex(getSTARexe, localFastaRef, additionalIndexOptions)
}
#------------------------------
# BAM generation step
#------------------------------
if(align == "star"){
    // grab all FASTQ files
    string[] fqFiles = getAllFastqFiles(fqDir, extn)
    string{} fqMap = getFqMap(fqFiles, fqRegex, extn)
    string{} reNamedMap = getReNamedMap(fqMap, samplesSheet)
    if(!reNamedMap) error "It appears that you don't have any FASTQ files specified. Check -fqDir path and make sure it point to FASTQ files directory"
    // This returns a list with first item being a stats string and second a bool for checkPair
    string[] getStats = getFqReadsStats(fqDir, extn)
    checkPair = getStats.pop().parseBool()
    // get STAR executable 
    string getSTARexe = cmdExe{"starExe"}
    
    for(string rootName : reNamedMap.keys()) {
        string[] reads 
        // get value for each key and break values into list
        string singleEndValues
        string pairedEndValues

        if(checkPair) {
            singleEndValues = reNamedMap{rootName} 
            pairedEndValues = singleEndValues.replace("_R1", "_R2")

            int getSingleLength = singleEndValues.length()-1
            int getPairedLength = pairedEndValues.length()-1

            string cleanSingle = singleEndValues.substr(0,getSingleLength)
            string cleanPaired = pairedEndValues.substr(0,getPairedLength)

            reads.add(cleanSingle)
            reads.add(cleanPaired)
        }
        else {
            singleEndValues = reNamedMap{rootName} 
            int getSingleLength = singleEndValues.length()-1
            string cleanSingle = singleEndValues.substr(0,getSingleLength)
            reads.add(cleanSingle)
        }
        // default STAR options for mapping step
        string{} currentSTARoptions = { "--outSAMtype" => "BAM Unsorted", \
                                        "--outSAMunmapped" => "Within", \
                                        "--genomeDir" => genomeIndex, \
                                        "--readFilesCommand" => "zcat"}
        // get additional options 
        string cmdOptions = getCmdOptions("STAR", extraOptions)
        string additionalSTARoptions = getAllOptions(cmdOptions, currentSTARoptions)
        // STAR aligning
        string bamFile = mapSTAR(getSTARexe, rootName, reads, additionalSTARoptions) 
        bamsList.add(bamFile)
    }
}

if(count) { 
    if(align != "star") bamsList = bamFiles.dirPath("*.bam")

    string{} currentCountsOptions = { "-a" => localGTF }
    if(checkPair) currentCountsOptions{"-p"} = ""

    string cmdOptions = getCmdOptions("featureCounts", extraOptions)
    string additionalCountsOptions = getAllOptions(cmdOptions, currentCountsOptions)

    if(!bamsList) error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamFiles path/to/you/bams/directory`"
    // get featureCounts executable
    string getCounterExe = cmdExe{"counterExe"}
    // do read counting
    string[] featureCounts = getReadsCount(getCounterExe, bamsList, additionalCountsOptions, threads)
    string featureNo = featureCounts[0]
    string featureReverse = featureCounts[1]

    string tmpNon = countFiles+"/"+"tmpNon.txt"
    string tmpReverse = countFiles+"/"+"tmpReverse.txt"

    string tmp2Non = countFiles+"/"+"tmp2Non.txt"
    string tmp2Reverse = countFiles+"/"+"tmp2Reverse.txt"

    string NonStrandedCountsWithNames = countFiles+"/"+"NonStrandedCounts-withNames.txt"
    string ReverseStrandedCountsWithNames = countFiles+"/"+"ReverseStrandedCounts-withNames.txt"

    string getPythonExe = cmdExe{"pythonExe"}
    string geneIdsFile = getGeneIds(getPythonExe, localGTF, setGFF)

    int numberOfBamFiles = bamsList.size()+7
    int[] theRange = range(7, numberOfBamFiles)
    string numberOfFields = theRange.join(",")

    task([NonStrandedCountsWithNames, ReverseStrandedCountsWithNames] <- [featureNo, featureReverse, geneIdsFile], taskName := "Making Degust-ready counts file") {
        sys grep -v "#" $featureNo | cut -f1,$numberOfFields | perl -pe 's{\S+/([^_]+)[^/]+(\t|\n)}{$1$2}g if $. == 1' > $tmpNon
        sys sed -i '0,/Geneid/s/Geneid/Gene.ID/' $tmpNon
        sys /bin/bash -c "join -j 1 <(sort -k1,1 $geneIdsFile) <(sort -k1,1 $tmpNon) -t $'\t' > $tmp2Non"
        sys grep "Biotype" $tmp2Non > $NonStrandedCountsWithNames
        sys grep -v "Biotype" $tmp2Non >> $NonStrandedCountsWithNames
        sys rm $tmpNon $tmp2Non
        
        sys grep -v "#" $featureReverse | cut -f1,$numberOfFields | perl -pe 's{\S+/([^_]+)[^/]+(\t|\n)}{$1$2}g if $. == 1' > $tmpReverse
        sys sed -i '0,/Geneid/s/Geneid/Gene.ID/' $tmpReverse
        sys /bin/bash -c "join -j 1 <(sort -k1,1 $geneIdsFile) <(sort -k1,1 $tmpReverse) -t $'\t' > $tmp2Reverse"
        sys grep "Biotype" $tmp2Reverse > $ReverseStrandedCountsWithNames
        sys grep -v "Biotype" $tmp2Reverse >> $ReverseStrandedCountsWithNames
        sys rm $tmpReverse $tmp2Reverse
    }
    wait
}
#------------------------------
# fastQC report
#------------------------------
if(fastqc) { 
    string[] fqFiles = getAllFastqFiles(fqDir, extn)
    if(!fqFiles) error "It appears that you don't have any FASTQ files specified."
    string getFastqcExe = cmdExe{"fastqcExe"}
    string fqcReport = getFastqcReport(getFastqcExe, fqFiles, threads)
    wait
}
#------------------------------
# BAM processing
#------------------------------
if(prePro) {
    // check that not aligners had been specified
    if(align != "star") bamsList = bamFiles.dirPath("*.bam")
    // make sure we have BAM files to work with
    if(!bamsList) error "No BAM files were found, either used -align options or specify directory with BAM files using `-bamFiles path/to/you/bams/directory`"
    // make dict file if doesn't exist
    string getPicardExe = cmdExe{"picardExe"}
    string fastaDictFile = makeDictFile(getPicardExe, localFastaRef)
    // loop over BAM files do pre-processing 
    for(string bamFile : bamsList) {
        string mdupsBam = getPrePro(getPicardExe, bamFile, localFastaRef, fastaDictFile)
        markedBams.add(mdupsBam)
    }
}
#----------------
# RNAseQC report
#----------------
if(RNAseQC){
    if(!prePro) markedBams = proBams.dirPath("*.bam")
    if(!markedBams) error "No pre-processed BAM files were found, either used -prePro options or specify directory with appropriate BAM files using `-proBams path/to/you/bams/directory`"
    string sampleIdsFile = "RNAseQC-sampleIds.txt"
    string RNAseQCsampleIds = getSampleIds(markedBams)
    sampleIdsFile.write(RNAseQCsampleIds)
    // current options 
    string{} currentRNAseQCoptions
    if(!checkPair) currentRNAseQCoptions = { "-singleEnd" => "" }
    //
    string cmdOptions = getCmdOptions("RNAseQC", extraOptions)
    string additionalRNAseQCoptions = getAllOptions(cmdOptions, currentRNAseQCoptions)
    // make Fai file if dosen't exist
    string getSamtoolsExe = cmdExe{"samtoolsExe"}
    string fastaFaiFile = makeFaiFile(getSamtoolsExe, localFastaRef)
    // get RNAseQC report 
    string getRNAseQCexe = cmdExe{"RNAseQCexe"}
    string qcReport = getRNAseQC(getRNAseQCexe, sampleIdsFile, markedBams, localFastaRef, localGTF, additionalRNAseQCoptions)
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
