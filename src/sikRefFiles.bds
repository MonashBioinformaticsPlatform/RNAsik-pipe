#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

string getUnziped(string refFile) {
    string refUnziped = refFile.removeExt(".gz")
    task(refFile.extName() == "gz", refUnziped <- refFile, taskName := "gzip $refFile file") {
        sys gunzip -c $refFile > $refUnziped
    }
    return refUnziped
}

string chkFileExtn(string fileName, string fileType) {
    string getExtn = fileName.extName()
    string[] extns 
    if(fileType == "fasta") {
        extns = ["fa", \
                 "fa.gz", \
                 "fasta", \
                 "fasta.gz", \
                 "fna", \
                 "fna.gz" \
                ]
    }
    if(fileType == "gtf") {
        extns = ["gtf", \
                 "gff", \
                 "gff3", \
                 "gtf.gz", \
                 "gff.gz", \
                 "gff3.gz", \
                 "saf" \
                ]
    }
    if(!extns.has(getExtn) && fileName.isFile()) {
        error "It appears that your file type -> $fileType has invalid extention -> $getExtn"
    }
    return fileName
}

string copyFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string localRef = refDir+"/"+fileName
    task(refFile.isFile(), localRef <- refFile, taskName := "Copying $refFile to $refDir") {
        sys cp -v $refFile $refDir
    }
    return chkFileExtn(getUnziped(localRef), fileType)
}

string downloadFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string localRef = refDir+"/"+fileName

    bool chkDownload = refFile.download(localRef)
    if(chkDownload) {
        return chkFileExtn(getUnziped(localRef), fileType)
    }
    else {
        error "There was an error with downloading your reference file -> $refFile, check your url"
    }
}

string makeLocalRef(string refFile, string refDir, string fileType) { 

    string[] extns = ["http", \
                      "https", \
                      "ftp", \
                      "s3"]

    int extnChk = -1
    string urlType = "none"

    string[] urlList = refFile.split("://")
    if(!urlList.isEmpty()) {
        urlType = urlList[0]
    }

    string localRef = refDir+"/"+refFile.baseName()
    //NOTE this is prevent from consequtive downloads when re-running RNAsik
    // if you re-run the pipeline when urls are give then each re-run changes 
    // time stamp and thereby whole dependency thing, trigering new run
    if(extns.has(urlType) && !localRef.exists() && !localRef.isFile()) {
        localRef = downloadFile(refFile, refDir, fileType)
    }
    else if(!localRef.exists() && !localRef.isFile()) { 
        localRef = copyFile(refFile, refDir, fileType)
    }
    else if(localRef.exists() && localRef.isFile()) {
        string refExtn = localRef.extName()
        if(refExtn == "gz") {
	    localRef = localRef.removeExt(".gz")
        }
        //error "This shouldn't happened, check makeLocalRef function"
    }
    return localRef
}
// make dictionary for picard pre-processing
string makeDictFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    task(mdups, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
// Index FASTA reference file when needed
string makeFaiFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("samtoolsExe")) error "Can't get samtools executable, check your config file $configFile"
    string samtoolsExe = cmdExe{"samtoolsExe"}
    // make a .fai string
    string fastaFaiFile = fastaRef+".fai"
    task(!fastaRef.isEmpty(), fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys $samtoolsExe faidx $fastaRef
    }
    return fastaFaiFile
}

string makeChromSizes(string fastaRef) {
    string chromSizes = fastaRef.removeExt()+".chromSizes"
    string faChrom = programPath.pathName()+"/../scripts/ucsc_bin/faSize"
    task(!fastaRef.isEmpty(), chromSizes <- fastaRef, taskName := "Make chrom sizes file") {
        sys $faChrom -detailed $fastaRef > $chromSizes
    }
    return chromSizes
}

string{} chkRefFiles(string refDir, string aligner){
    string{} totRefFiles
    //NOTE can't have gziped files here even though RNAsik can handle gziped files as
    // input to -fastaRef and -gtfFile but it will unzip them localy and I can't have that
    // since I'm assuming no write permissions to refFiles directory
    for(string refFile : refDir.dirPath()) {
	string extn = refFile.extName()
	if(extn == "gtf" || extn == "gff" || extn == "gff3") {
	    totRefFiles{"gtf"} = refFile
        }
	if(extn == "fa") {
	    totRefFiles{"fa"} = refFile
        }
	if(extn == "fai") {
	    totRefFiles{"fai"} = refFile
        }
	if(extn == "dict"){
	    totRefFiles{"dict"} = refFile
	}
	if(extn == "chromSizes") {
	    totRefFiles{"chromSizes"} = refFile
	}
        if(extn.startsWith(aligner)) {
	    totRefFiles{"idx"} = refFile
	}
    }
    //NOTE have to be strick here since we don't want to be geussing which one of multiple gtf/gff files to pick.
    string[] itemsChk = totRefFiles.values()
    if(itemsChk.size() != 6 ) error "Too many or too little refFiles were found, '$totRefFiles'. Try using -fastaRef and -gtfFile options instead"

    return totRefFiles
}
