#-----------------------------------------
# Fucntion to make indices for RNAsik-pipe
#-----------------------------------------

string getUnziped(string refFile) {
    string getExtn = refFile.extName()
    string refUnziped = refFile.removeExt(".gz")
    task(refFile.extName() == "gz", refUnziped <- refFile, taskName := "gzip $refFile file") sys gunzip -c $refFile > $refUnziped
    return refUnziped
}

string chkFileExtn(string fileName, string fileType) {
    string getExtn = fileName.extName()
    string[] extns 
    if(fileType == "fasta") {
        extns = ["fa", \
                 "fa.gz", \
                 "fasta", \
                 "fasta.gz", \
                 "fna", \
                 "fna.gz" \
                ]
    }
    if(fileType == "gtf") {
        extns = ["gtf", \
                 "gff", \
                 "gff3", \
                 "gtf.gz", \
                 "gff.gz", \
                 "gff3.gz" \
                ]
    }
    if(!extns.has(getExtn) && fileName.isFile()) {
        error "It appears that your file type -> $fileType has invalid extention -> $getExtn"
    }
    return fileName
}

string copyFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string localRef = refDir+"/"+fileName
    task(refFile.isFile(), localRef <- refFile, taskName := "Copying $refFile to $refDir") sys cp -v $refFile $refDir
    return chkFileExtn(getUnziped(localRef), fileType)
}

string downloadFile(string refFile, string refDir, string fileType) {
    string fileName = refFile.baseName()
    string downLocus = refFile.download()
    string localRef = refDir+"/"+fileName
    task(localRef <- downLocus, taskName := "downloading $refFile to $refDir") sys cp -v $downLocus $refDir
    return chkFileExtn(getUnziped(localRef), fileType)
}

string makeLocalRef(string refFile, string refDir, string fileType) { 

    int chkHttp = refFile.toLower().indexOf("http:")
    string localRef
    //NOTE if/else block assumes that user can only pass in url with http, BDS also supports s3
    if(chkHttp != -1) localRef = downloadFile(refFile, refDir, fileType)
    else localRef = copyFile(refFile, refDir, fileType)
    return localRef
}
// make dictionary for picard pre-processing
string makeDictFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("picardExe")) error "Can't get picard executable, check your config file $configFile"
    string picardExe = cmdExe{"picardExe"}
    // make .dict string
    string fastaDictFile = fastaRef.removeExt()+".dict"
    //task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
    task(prePro, fastaDictFile <- fastaRef, taskName := "Making dictionary File") {
        sys $picardExe CreateSequenceDictionary REFERENCE=$fastaRef \
                                                OUTPUT=$fastaDictFile
    }
    return fastaDictFile
}
// Index FASTA reference file when needed
string makeFaiFile(string{} cmdExe, string fastaRef) {
    if(!cmdExe.hasKey("samtoolsExe")) error "Can't get samtools executable, check your config file $configFile"
    string samtoolsExe = cmdExe{"samtoolsExe"}
    // make a .fai string
    string fastaFaiFile = fastaRef+".fai"
    task(!fastaRef.isEmpty(), fastaFaiFile <- fastaRef, taskName := "Indexing FASTA file") {
        sys $samtoolsExe faidx $fastaRef
    }
    return fastaFaiFile
}

string makeChromSizes(string fastaRef) {
    string chromSizes = fastaRef.removeExt()+".chromSizes"
    string faChrom = programPath.pathName()+"/../scripts/ucsc_bin/faSize"
    task(!fastaRef.isEmpty(), chromSizes <- fastaRef, taskName := "Make chrom sizes file") {
        sys $faChrom -detailed $fastaRef > $chromSizes
    }
    return chromSizes
}

string{} chkRefFiles(string refDir, string aligner){
    string{} totRefFiles
    string[] clobberedRefFiles
    string[] allowedExtn = ["gtf", "fa", "fai", "chromSizes", "dict", "idx" ]
    //NOTE can't have gziped files here even though RNAsik can handle gziped files as
    // input to -fastaRef and -gtfFile but it will unzip them localy and I can't have that
    // since I'm assuming no write permissions to refFiles directory
    for(string refFile : refDir.dirPath()) {
        string extn = refFile.extName()
        if( extn == "gff" || extn == "gff3" ) extn = "gtf"
        if(extn.startsWith(aligner+"Idx")) extn = "idx"
        //NOTE make backwards-compatible with old RNA-sik refFiles extn ".chrom.sizes":
        if(refFile.endsWith(".chrom.sizes")) extn = "chromSizes"
        if( allowedExtn.has(extn)) {
            if (totRefFiles.hasKey(extn)) clobberedRefFiles.add(totRefFiles{extn})
            totRefFiles{extn} = refFile
        }
    }
    //NOTE have to be strick here since we don't want to be geussing which one of multiple gtf/gff files to pick.
    string[] itemsChk = totRefFiles.values()
    if(itemsChk.size() < 6 ) warning "\n refFiles doesnt contain full complement: '$totRefFiles'. Try using -fastaRef and -gtfFile options instead. Maybe the refFiles dir is from an older version of RNAsik?\n"
    if(clobberedRefFiles.size() > 0 ) error "Extra refFiles were found, '$clobberedRefFiles'. Ensure only one of each of these filetypes is in your refFiles directory."

    return totRefFiles
}
