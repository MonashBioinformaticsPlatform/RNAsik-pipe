#------------------------------
# STAR alignment function
#------------------------------

include "sikFqFiles.bds"

string makeSTARindex(string{} cmdExe, string refFiles, string fastaRef, string gtfFile, string starOpts, int threads) {
    // get STAR executable 
    if(!cmdExe.hasKey("starExe")) error "Can't get STAR executable, check your config file $configFile"
    string starExe = cmdExe{"starExe"}

    string genomeIdxDir = fastaRef.removeExt()+"."+align+"Idx"
    if(!genomeIdxDir.exists()) genomeIdxDir.mkdir()
    
    string[] idxFiles = ["chrLength.txt", "chrNameLength.txt", "chrName.txt", "chrStart.txt", "Genome", "genomeParameters.txt", "SA", "SAindex"]
    string[] genomeIdxFiles
    for(string idxFile : idxFiles) {
        string idxDep = genomeIdxDir + "/" + idxFile
        genomeIdxFiles.add(idxDep)
    }
    //string[] refFilesIn 
    //refFilesIn += fastaRef

    //int chkGTF = starOpts.indexOf("--sjdbGTFfile")
    //if(chkGTF != -1) refFilesIn += gtfFile

    //task(genomeIdxDir <- refFilesIn, cpus := threads, taskName := "Making STAR index") {
    task(!fastaRef.isEmpty(), genomeIdxFiles <- fastaRef, cpus := threads, taskName := "Making STAR index") {
        sys $starExe --runThreadN $threads \
                     --runMode genomeGenerate \
                     --outFileNamePrefix $refFiles/ \
                     --genomeDir $genomeIdxDir \
                     --genomeFastaFiles $fastaRef \
                     $starOpts
    }
    return genomeIdxDir
}

string{} mapSTAR(string{} cmdExe, string bamFiles, string{} samplesMap, string pairIds, bool paired, string starOpts, string genomeIdx, int threads, int memory) {
    // double check
    //if(!samplesMap) error "This error shouldn't occur. It should be caught earlier. Either way samplesMap is empty $samplesMap"
    // get STAR executable 
    if(!cmdExe.hasKey("starExe")) error "Can't get STAR executable, check your config file $configFile"
    string starExe = cmdExe{"starExe"}
    // BAMs
    string[] bamsList
    string{} bamsMap

    string[] idxFiles = ["chrLength.txt", "chrNameLength.txt", "chrName.txt", "chrStart.txt", "Genome", "genomeParameters.txt", "SA", "SAindex"]
    string[] genomeIdxFiles
    for(string idxFile : idxFiles) {
        string idxDep = genomeIdx + "/" + idxFile
        genomeIdxFiles.add(idxDep)
    }

    for(string rootName : samplesMap.keys()) {
        string[] readsList = alignerReads(samplesMap{rootName}, pairIds)
        string[] deps = readsList
        deps += genomeIdxFiles

        int chkLen = readsList.size()
        if(chkLen < 2 && paired) error "R2 reads hadn't been found $readsList, but -paired set to $paired"
        if(chkLen > 1 && !paired) error "-paired set to $paired, but both R1 and R2 reads were found $readsList"

        string rootBase = rootName.baseName()
        //DOCS: need to make preFix here because STAR takes a file prefix
        // whereas bamOut need to satisfy dependencies for bds to exit
        string preFix = bamFiles+"/"+rootBase+"_"
        
        string bamOut
        int checkUnsorted = starOpts.indexOf("Unsorted")
        int checkSorted = starOpts.indexOf("SortedByCoordinate")
        if(checkUnsorted != -1) bamOut = preFix+"Aligned.out.bam"
        if(checkSorted != -1) bamOut = preFix+"Aligned.sortedByCoord.out.bam"

        string reads = readsList.join(" ")
        dep(!fqDir.isEmpty(), bamOut <- deps, cpus := threads, mem := memory, taskName := "STAR aligning "+rootBase) {
            sys $starExe --runThreadN $threads \
                         --runMode alignReads \
                         --genomeDir $genomeIdx \
                         --outSAMattrRGline ID:001 CN:Unknown DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$rootBase \
                         --readFilesIn $reads \
                         --outFileNamePrefix $preFix \
                         $starOpts
                     
        }
        bamsList.add(bamOut)
        if(bamsMap.hasKey(rootBase)) {
            error "This should happened, please report this issue, sikSTARaligner.bds file"
        }
        bamsMap{rootBase} = bamOut
    }
    goal bamsList
    return bamsMap
}
