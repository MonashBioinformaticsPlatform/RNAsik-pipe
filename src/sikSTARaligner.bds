#------------------------------
# Functions
#------------------------------

include "sikHeader.bds"
include "sikMakeIndices.bds"
include "sikSortFastqs.bds"

#------------------------------
# Make directories as required
#------------------------------
string bamFiles = "bamFiles"
if((!bamFiles.exists()) && (align == "star")) bamFiles.mkdir()
#----------------------------------------------------------------------------------------------------
// This function fill fix bam files prefix 
string fixFileNames(string rootName, string fileFix) {
    for(string line : fileFix.readLines()){
        string[] namesList = line.split("\t")
        string oldNamePrefix = namesList[0]
        string newNamePrefix = namesList[1]
        string preFixIndex = rootName.indexOf(oldNamePrefix)
        if(preFixIndex != -1){
            string fixedFileName = rootName.replace(oldNamePrefix, newNamePrefix)
            return fixedFileName
        }
    }
}

string{} getNewHash(string starOptions, string{} currentOptions) {

    string[] cmdArgs = starOptions.split(",")
    string{} newHash = currentOptions
     
    for(string option : cmdArgs){ 
        string cleanString = option.trim()
        string[] listOfOptions = cleanString.split(" ")
        string starOption = listOfOptions.removeIdx(0)
        string starValue = listOfOptions.join(" ")

        for(string key : currentOptions.keys()){

            if(starOption.startsWith(key)) newHash{key} = starValue
            else newHash{starOption} = starValue
        }
    } 
    return newHash
}

string getOptionsString(string{} dictionary) {
    string[] argsList 
    
    for(string key : dictionary.keys()) {
        argsList.add(key)    
        argsList.add(dictionary{key})    
    }
    string newOptions = argsList.join(" ")

    return newOptions
}

string mapSTAR(string rootName, string genomeIndex, string SAindexFile, string[] listOfReads, string starOptions) {
    # current options
    string{} currentOptions = { "--outSAMtype" => "BAM Unsorted", "--outSAMunmapped" => "Within", "--readFilesCommand" => "zcat" }
    #----------------------------------------
    # Get extra options if available
    #----------------------------------------
    string extraOptions

    if(starOptions) {
        string{} newHash = getNewHash(starOptions, currentOptions)
        extraOptions = getOptionsString(newHash)
    } 
    if(!starOptions) {
        extraOptions = getOptionsString(currentOptions)
    }
    #-----------------------------------------------
    # Fix file names if sample names file was given
    #-----------------------------------------------
    string fixedFileName
    
    if(!sampleNames.isEmpty()){
        fixedFileName = fixFileNames(rootName, sampleNames)
    }
    else{
        fixedFileName = rootName
    }
    #-----------------------------------------------
    string rootBase = fixedFileName.baseName()
    string preFix = bamFiles+"/"+rootBase+"_"
    
    string bamOut

    int checkUnsorted = extraOptions.indexOf("Unsorted")
    int checkSorted = extraOptions.indexOf("SortedByCoordinate")

    if(checkUnsorted != -1) bamOut = preFix+"Aligned.out.bam"
    if(checkSorted != -1) bamOut = preFix+"Aligned.sortedByCoord.out.bam"

    string reads = listOfReads.join(" ")
    //task(bamOut <- [genomeIndex, SAindexFile], cpu := 32, taskName := "STAR aligning "+rootBase) {
    task(bamOut <- [genomeIndex, SAindexFile], taskName := "STAR aligning "+rootBase) {
        sys STAR --runThreadN $threads \
                 --genomeDir $genomeIndex \
                 --outSAMattrRGline ID:001 CN:Unknown DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$rootBase \
                 --readFilesIn $reads \
                 --outFileNamePrefix $preFix \
                 $extraOptions
                 
    }
    wait
    # you can remove wait statement and reduce number of threads
    # however this will run all your fastq files in parallel
    # doing this I find a bit impractical on our server because of
    # limited RAM - only 128 Gb
    return bamOut
}
