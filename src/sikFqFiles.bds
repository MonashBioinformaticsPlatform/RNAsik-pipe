#------------------------
# Organising FASTQ files 
#------------------------
string[] getFqFiles(string fqDir, string extn) {
    string[] fqFiles
    // go through each file and check if its file or directory
    for(string dir : fqDir.dirPath()){
        bool chkDir = dir.isDir()
        // check if dir is directory call getFqFiles on it
        if(chkDir) fqFiles += getFqFiles(dir, extn)
        // otherwise check if dir is FASTQ file and append it to the fqFiles
        else {
            bool fqFile = dir.endsWith(extn)
            if(fqFile) fqFiles.add(dir)
        }
    }
    // return fqFiles array
    return fqFiles
}
// given a file name return rootName
string getRootName(string fq, string fqRegex, string extn) {
    // check if R1 is in the file name
    int rOneIdx = fq.lastIndexOf("_R1")
    int rTwoIdx = fq.lastIndexOf("_R2")

    int oneIdx = fq.lastIndexOf("_1")
    int twoIdx = fq.lastIndexOf("_2")
    // if fqRegex is given use that
    if(!fqRegex.isEmpty()) {
        string[] tmp = fq.split(fqRegex)
        string rootName = tmp[0].baseName()
        if(tmp[0] == fq) error "It appears that your fqRegex didn't work. Double check your fqRegex"
        return rootName
    }
    // if no fqRegex is given and r1Idx was found
    // fall back to splicing rootName from start to the r1Idx
    if(fqRegex.isEmpty()) {
        if( (rOneIdx != -1) && (oneIdx == -1) ) {
            return fq.substr(0, rOneIdx).baseName()
        }
        if( (rOneIdx == -1) && (oneIdx != -1) ) {
            return fq.substr(0, oneIdx).baseName()
        }
        if( (rTwoIdx != -1) && (twoIdx == -1) ) {
            return fq.substr(0, rTwoIdx).baseName()
        }
        if( (rTwoIdx == -1) && (twoIdx != -1) ) {
            return fq.substr(0, twoIdx).baseName()
        }
        // if all of the above failed
        // use simply remove extn from the file and use that as a rootName
        if( (rOneIdx == -1) && (oneIdx == -1) ) {
            return fq.baseName(extn)
        }
    }
    // this error should never happend since step above should always return some rootName
    else error "This error should have occur, please report the incident"
}
// This function return hash with key set to root name 
// and value is the list of all associated FASTQ files
// that are spread across multiple lane during sequencing
string{} getFqMap(string[] rOneFqs, string fqRegex, string extn) {
    # Map with unique root key
    string{} fqMap
    // loop over FASTQ files
    for(string fq : rOneFqs) {
        string rootName = getRootName(fq, fqRegex, extn)
        if(!fqMap.hasKey(rootName)) fqMap{rootName}=""
        fqMap{rootName}+=fq+","
    }
    return fqMap
}
//
string{} getSampleMap(string[] fqFiles, string samplesSheet) {
    string{} sampleMap
    if(!samplesSheet.isEmpty()) {
	for(string fq : fqFiles) {
            for(string line : samplesSheet.readLines()){
                string[] arr = line.split("\t")
                string fileName = arr[0]
                string sampleName = arr[1]

                string nameIdx = fq.indexOf(fileName)
                if(nameIdx != -1){
                    if(!sampleMap.hasKey(sampleName)) sampleMap{sampleName}=""
                    sampleMap{sampleName}+=fq+","
                }
            }
        }
    }
    return sampleMap
}
string[] getReads(string fqVal) {
    string[] fqList = fqVal.split(",")
    int odd = fqList.size() % 2
    
    string[] rTwo
    // joining instead of returing fqVal because
    // this stips trailing comma from the file name
    // for more info see getFqMap function
    if(odd == 1) return [fqList.join(",")]
    if( (fqVal.lastIndexOf("_R2") == -1) && (fqVal.lastIndexOf("_2") == -1) ) return [fqList.join(",")]
    else {
        for(int i=0; i < fqList.size(); i++) {
	   rTwo.push(fqList.removeIdx(i+1)) 
        }
        return [fqList.join(","), rTwo.join(",")]
    }
}
string[] fqLog(string[] reads) {
    bool paired
    if( (reads.size() < 1) || (reads.size() > 2) ) error "This error shouldn't happened. Something went wrong with your reads, check sikFqFiles.bds file"
    if(reads.size() == 2) paired = true
    else paired = false

    string pairs
    string singles

    if(paired) {
        string[] rOne = reads[0].split(",")
        string[] rTwo = reads[1].split(",")
        for(int i=0; i < rOne.size(); i++) {
            pairs += rOne[i] + " --> "
            pairs += rTwo[i] + "\n"
        }
    }
    else {
        string[] rOne = reads[0].split(",")
        for(int i=0; i < rOne.size(); i++) {
            singles += rOne[i] + " -->\n"
        }
    }
    if(singles.length() > 0) {
	string alignerString
	alignerString += "R1: "
        alignerString += reads[0]
        alignerString += "\n"
        alignerString += "----------------\n"
        return [alignerString, singles, paired]
    } 
    else {
	string alignerString
	alignerString += "R1: "
        alignerString += reads[0]
        alignerString += "\n"
	alignerString += "R2: "
        alignerString += reads[1]
        alignerString += "\n"
        alignerString += "----------------\n"
        return [alignerString, pairs, paired]
    }
}
