#------------------------
# Organising FASTQ files 
#------------------------
string getTarDir(string tarFile, string sikDir) {

    string getExtn = tarFile.extName()
    string tarDir = sikDir+"/"+"fastqDir"
    if(!tarDir.exists()) tarDir.mkdir()
    //string tarName = sikDir+"/"+tarFile.baseName()
    //bool tarOk = tarFile.download(tarName)
    string tarRef = tarFile.download()
    string[] argsList = ["-x", "-f"]
    if(getExtn == "gz") argsList.add("-z")
    string tarArgs = argsList.join(" ")
    //NOTE need to think about smartter dependencies, maybe there is a way to get rid of wait statement 
    task(tarDir <- tarRef, taskName := "unarchiving $tarRef to $tarDir") sys tar $tarArgs $tarRef -C $tarDir
    wait
    return tarDir
}
// return array with all fastqs
string[] getFqFiles(string fqDir, string extn, string sikDir) {

    int chkHttp = fqDir.toLower().indexOf("http:")
    if(chkHttp != -1) fqDir = getTarDir(fqDir, sikDir)

    string[] originDir = fqDir.dirPath() 
    if(originDir.isEmpty()) error "No FASTQ file found, check -fqDir option"
    string[] fqFiles
    // go through each file and check if its file or directory
    //TODO the if block is temporal measure due to BDS bug, is getting fixed I hope
    if(!fqDir.isEmpty()) {
        //for(string dir : fqDir.dirPath()){
        for(string dir : originDir){
            // check if dir is directory and call getFqFiles on it
            if(dir.isDir()) fqFiles += getFqFiles(dir, extn, sikDir)
            // otherwise check if dir is FASTQ file and append it to the fqFiles
            else if(dir.endsWith(extn)) fqFiles.add(dir)
        }
    }
    return fqFiles
}
string{} getSamplesMap(string[] fqFiles,  string samplesSheet) {
    if(fqFiles.isEmpty()) error "getFqFiles function retuned nothing, something up with -fqDir parameter, check FASTQ file extention and pass correct -extn value maybe?"

    string{} samplesMap

    if(samplesSheet.isEmpty()) error "This error shouldn't happened, something is wrong with auto generating samplesSheet or users input"
    string{} samples = config(samplesSheet)
    string[] prefixes = samples.keys()
    prefixes = prefixes.sort().reverse()

    for(string fq : fqFiles) {
	bool noPrefix = true
        // don't use those index files
 	if(fq.lastIndexOf("_I1") == -1) {

	    for(string prefix : prefixes) {
    	        if(fq.baseName().startsWith(prefix)) {
		    noPrefix = false
		    string myKey = samples{prefix}
		    if(!samplesMap.hasKey(myKey)) samplesMap{myKey} = ""
            	    samplesMap{myKey} += fq+","
                }
    	    }

	    if(noPrefix) error "No prefix was found for this $fq file, check you samplesSheet $samplesSheet"
        }
    }
    return samplesMap
}

string[] alignerReads(string fqString, string pairIds) {
    string[] pairIdsList = pairIds.split(",")

    // remove trailing comma (,)
    string fqClean = fqString.substr(0, (fqString.length())-1)
    
    string[] readOne
    string[] readTwo
    
    for(string fq : fqClean.split(",")) {
        if(fq.lastIndexOf(pairIdsList[0]) != -1) readOne.add(fq)
        else {
	   if(fq.lastIndexOf(pairIdsList[1]) != -1) readTwo.add(fq)
	   else error "check your pairIds value $pairIds, make sure it corresponds to your fastq files $fq" 
        }
    }
    //TODO clean this up 
    string readOneStr = readOne.join(",")
    //string readOneClean = readOneStr.substr(0, (readOneStr.length())-1)
    string readOneClean = readOneStr

    if(readTwo.isEmpty()) return [readOneClean]
    else {
	string readTwoStr = readTwo.join(",")
    	//string readTwoClean = readTwoStr.substr(0, (readTwoStr.length())-1)
    	string readTwoClean = readTwoStr
        return [readOneClean, readTwoClean]
    }
}

string[] getFqPrefix(string fqRead, string[] fqRgxs, string pairIds, string extn) {
    for(string fqRgx : fqRgxs) {
        string[] tmp = fqRead.baseName().split(fqRgx)
        int tmpLen = tmp.size()
        if(tmpLen > 1) return [tmp[0], tmp[0].replace("_", "-")]
        if(tmpLen < 1) error "This shouldn't happened, check makeSampleSheet function"
    }
    string[] pairIdsList = pairIds.split(",")
    // check if R1 is in the file name
    int oneIdx = fqRead.lastIndexOf(pairIdsList[0])
    int twoIdx = fqRead.lastIndexOf(pairIdsList[1])
    
    if(oneIdx != -1) return [fqRead.baseName().substr(0, oneIdx), fqRead.baseName().substr(0, oneIdx).replace("_", "-")]
    if(twoIdx != -1) return [fqRead.baseName().substr(0, twoIdx), fqRead.baseName().substr(0, twoIdx).replace("_", "-")]
    // if all of the above failed
    // use simply remove extn from the file and use that as a rootName
    if( (oneIdx == -1) && (twoIdx == -1) ) return [fqRead.baseName(extn), fqRead.baseName(extn).replace("_", "-")]
    
    else error "No prefix was found, although this should really happened"
}

string makeSamplesSheet(string[] fqReads, string[] fqRgxs, string pairIds, string extn, string refFiles) {
    string{} autoGen
    // get uniq prefix 
    for(string fq : fqReads ) {
        string[] prefix = getFqPrefix(fq, fqRgxs, pairIds, extn)
        autoGen{prefix[0]} = prefix[1]
    }
    // convert hash into a string
    string samplesConfig
    for(string k : autoGen.keys()) {
        samplesConfig += "$k\t" + autoGen{k} + "\n"
    }
    // write samples sheet out to a file
    string samplesSheet = refFiles+"/samplesSheet.txt"
    samplesSheet.write(samplesConfig)
    return samplesSheet
}
