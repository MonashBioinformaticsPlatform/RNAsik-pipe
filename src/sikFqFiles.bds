#------------------------
# Organising FASTQ files 
#------------------------
string[] getFqFiles(string fqDir, string extn) {
    if( ( (!align.isEmpty() && align != "index") || (fastqc) ) && (fqDir.isEmpty()) ) error "Usage: -fqDir /path/to/your/FASTQ/files"
    string[] fqFiles
    // go through each file and check if its file or directory
    //TODO the if block is temporal measure due to BDS bug, is getting fixed I hope
    if(!fqDir.isEmpty()) {
        for(string dir : fqDir.dirPath()){
            // check if dir is directory and call getFqFiles on it
            if(dir.isDir()) fqFiles += getFqFiles(dir, extn)
            // otherwise check if dir is FASTQ file and append it to the fqFiles
            else if(dir.endsWith(extn)) fqFiles.add(dir)
        }
    }
    // return fqFiles array
    return fqFiles
}
string getKey(string fq, string samplesSheet) {
    if(samplesSheet.isEmpty()) error "-samplesSheet is empty"
    string{} samples = config(samplesSheet)
    string[] prefixes = samples.keys()
    prefixes = prefixes.sort().reverse()
    for(string prefix : prefixes) {
        string idx = fq.indexOf(prefix)
        if(idx != -1) return samples{prefix}
    }
    error "No prefix was found for this $fq file"
}
// given a file name return rootName
string getRootName(string fq, string fqRegex, string samplesSheet, string extn) {
    // if fqRegex is given use that
    if( (!samplesSheet.isEmpty()) || ( (!samplesSheet.isEmpty()) && (!fqRegex.isEmpty()) ) ) {
        return getKey(fq, samplesSheet)
    }
    else {
        if(!fqRegex.isEmpty()) {
            string[] tmp = fq.split(fqRegex)
            string rootName = tmp[0].baseName()
            if(tmp[0] == fq) error "It appears that your fqRegex didn't work. Double check your fqRegex"
            return rootName
        }
        // if no fqRegex is given and r1Idx was found
        // fall back to splicing rootName from start to the r1Idx
        else {
            // check if R1 is in the file name
            int oneIdx = fq.lastIndexOf("_R1")
            int twoIdx = fq.lastIndexOf("_R2")

            if(oneIdx != -1) return fq.substr(0, oneIdx).baseName()
            if(twoIdx != -1) return fq.substr(0, twoIdx).baseName()
            // if all of the above failed
            // use simply remove extn from the file and use that as a rootName
            if( (oneIdx == -1) && (twoIdx == -1) ) return fq.baseName(extn)
        }
    }
}
// This function return hash with key set to root name 
// and value is the list of all associated FASTQ files
// that are spread across multiple lane during sequencing
string{} getFqMap(string[] fqFiles, string fqRegex, string samplesSheet, string extn) {
    if( ( (!align.isEmpty() && align != "index") || (fastqc) ) && (fqFiles.isEmpty()) ) error "No fastq files were found, check -fqDir path"
    // Map with unique root key
    string{} fqMap
    // loop over FASTQ files
    for(string fq : fqFiles) {
        string rootName = getRootName(fq, fqRegex, samplesSheet, extn)
        if(!fqMap.hasKey(rootName)) fqMap{rootName}=""
        fqMap{rootName}+=fq+","
    }
    return fqMap
}
//
string[] getReads(string fqVal) {
    string[] fqList = fqVal.split(",")
    int odd = fqList.size() % 2
    
    string[] rTwo
    // joining instead of returing fqVal because
    // this stips trailing comma from the file name
    // for more info see getFqMap function
    if(odd == 1) return [fqList.join(",")]
    if(fqVal.lastIndexOf("_R2") != -1) {
        for(int i=0; i < fqList.size(); i++) {
	   rTwo.push(fqList.removeIdx(i+1)) 
        }
        return [fqList.join(","), rTwo.join(",")]

    } 
    else return [fqList.join(",")]
}
//
bool getPaired(string[] reads) {
    if( (reads.size() < 1) || (reads.size() > 2) ) error "This error shouldn't happened. Something went wrong with your reads, check sikFqFiles.bds file"
    if(reads.size() == 2) return true
    else return false
}
