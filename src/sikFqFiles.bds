#------------------------
# Organising FASTQ files
#------------------------
include "sikUtils.bds"

string fqDownload(string{} cmdExe, string fqFile, string sikDir) {

    //DOCS:
    // Function takes a path string, either local or remote
    // and output analysis directory a.k.a sikDir
    // and moves file into sikDir/fastqDir directory

    string{} resource = getResource(cmdExe, "cpFile", "")
    string cpFileExe = resource{"toolsExe"}
    int cpFileMem = resource{"toolsMem"}.parseInt()
    int cpFileCpu = resource{"toolsCpu"}.parseInt()

    string fqDir = sikDir+"/"+"fastqDir/"
    if(!fqDir.exists()) {
        fqDir.mkdir()
    }

    string localFqFile = fqDir+fqFile.baseName()

    string remoteSign = "://"
    int chkRemote = fqFile.indexOf(remoteSign)

    if(chkRemote != -1) {
        bool fqOk = fqFile.download(localFqFile)
        if(!fqOk) {
            error "Check $fqFile URL, looks like RNAsik can't get that resource"
        }
        return localFqFile
    }
    else {
        bool chkFile = fqFile.isFile()
        if(!chkFile) {
            error "Found not a file >> $fqFile << in -fqFiles string"
        }
        task(chkFile, localFqFile <- fqFile, mem := cpFileMem, cpus := cpFileCpu, taskName := "Copying $fqFile to $localFqFile") {
            sys cp -v $fqFile $localFqFile
        }
        return localFqFile
    }

    error "Should return before this block"
}

string[] recursList(string fqFiles, string extn) {

    //DOCS:
    // Recursive list of file that end with user passed extn

    string[] fqFilesList

    for(string f : fqFiles.dirPath()) {
        if(f.isDir()) {
            fqFilesList += recursList(f, extn)
        }
        else if(f.endsWith(extn)) {
            fqFilesList += f
        }
    }
    return fqFilesList
}

string[] getFqFiles(string{} cmdExe, string fqFiles, string extn, string sikDir) {

    //DOCS:
    // This is function is able to search recursively whatever is given through -fqDir
    // it returns a list of all fastq files, if data is paired end, the list will have both R1 and R2 files

    string[] fqFilesList

    if(fqFiles.isFile()) {
        string[] remoteFiles = fqFiles.readLines()
        for(string fq : remoteFiles) {
            fqFilesList += fqDownload(cmdExe, fq, sikDir)
        }
    }
    else if(fqFiles.isDir()) {
        fqFilesList = recursList(fqFiles, extn)
    }
    else {
        error "This can't happend -fqFiles (-fqDir) can only take a file or directory"
    }

    return fqFilesList
}

string{} getSamplesMap(string[] fqFiles,  string samplesSheet) {

    if(fqFiles.isEmpty()) {
        error "no FASTQ files were found, check -fqDir, -extn or -pairIds"
    }
    if(samplesSheet.isEmpty()) {
        error "This error shouldn't happened, something is wrong with auto generating samplesSheet or users input"
    }

    string{} samplesMap
    //DOCS: extract oldPrefix, which is a string in fastq files
    // that we'll use to aggregate multi-lane and paired reads together
    string{} samples = config(samplesSheet)
    string[] sortedKeys = bubbleSort(samples.keys()).reverse()

    for(string fq : fqFiles) {

        if(fq.lastIndexOf("_I1") > 0) {
            continue
        }

        bool noPrefix = true

        for(string oldPrefix : sortedKeys) {
            if(fq.baseName().startsWith(oldPrefix)) {

                noPrefix = false

                string sampleName = samples{oldPrefix}
                if(!samplesMap.hasKey(sampleName)) {
                    samplesMap{sampleName} = ""
                }
                samplesMap{sampleName} += fq+","

                break
            }
        }
        // want to error out even if one of the fastq files wasn't accounted for
        // i.e if samples sheet was missing old_prefix for one of the fastq files
        if(noPrefix) {
            error "No oldPrefix was found for this $fq file, check you samplesSheet $samplesSheet"
        }
    }
    return samplesMap
}

string[] alignerReads(string fqString, string pairIds) {
    // remove trailing comma (,)
    string fqClean = fqString.substr(0, (fqString.length())-1)
    // if no command foung in the pairIds string assume
    // single-end data with _R1 or similar suffix
    // and therefore return fqString straight away
    int chk = pairIds.indexOf(",")
    if(pairIds.indexOf(",") == -1) {
        return [fqClean]
    }
    else if(pairIds.indexOf(",") != -1) {

        string[] pairIdsList = pairIds.split(",")

        string[] readOne
        string[] readTwo
        //DOCS: fqString holds all fastq files from a single sample, that includes R1 and R2 reads
        // step through individual fastq files check if it is R1 or R2 and
        for(string fq : fqClean.split(",")) {
            string fqBase = fq.baseName()

            if(fqBase.lastIndexOf(pairIdsList[0]) != -1) {
                readOne.add(fq)
            }
            else {
                if(fqBase.lastIndexOf(pairIdsList[1]) != -1 ) {
                    readTwo.add(fq)
                }
                else {
                    error "check your pairIds value $pairIds, make sure it corresponds to your fastq files $fq OR set \"-pairIds none\" for single-end data"
                }
            }
        }

        string readOneStr = readOne.join(",")

        if(readTwo.isEmpty()) {
            //return [readOneStr]
            error "This can't happend, should hit return before this block"
        }
        else {
            string readTwoStr = readTwo.join(",")
            return [readOneStr, readTwoStr]
        }
    }
    else {
        error "This can't happend"
    }
}
// retuns two items list [old_prefix, new_prefix]
//TODO rename to getSampleName ?

//TODO
// This is strange function...I think what I want is to loop over all fastq files
// look for prefix, in several different ways (as per current function) and simply
// append to a prefix list, that holds unique number of prefixes found.
// second function: given list of prefixes, loop over fastq files and assign prefixes
//string[] getFqPrefix(string[] fqRead, string[] fqRgxs, string pairIds, string extn) {
//
//    string[] prefixes
//
//    for(string fq : fqReads) {
//
//        string localFq = fq.baseName()
//
//        for(string fqRgx : fqRgxs) {
//            string[] tmp = localFq.split(fqRgx)
//            int tmpLen = tmp.size()
//            // if tmpLen stayed at 1 no split had happend, continue past the loop
//            if(tmpLen > 1) {
//                if(!prefixes.has(tmp[0])) {
//                    prefixes.add(tmp[0])
//                }
//            }
//        }
//
//        string[] pairIdsList = pairIds.split(",")
//
//        if(pairIdsList.size() != 2) {
//            string read = fq.baseName(extn)
//            if(!prefixes.has(read)) {
//                prefixex.add(read)
//            }
//        }
//
//        int[] idxs =[localFqRead.lastIndexOf(pairIdsList[0]), \
//                     localFqRead.lastIndexOf(pairIdsList[1])]
//
//        for(int i : idsx) {
//            if(i != -1) {
//                string read = localFq.substr(0, i)
//                if(!prefixes.has(read)) {
//                    prefixex.add(read)
//                }
//            }
//        }
//
//    }
//
//    if(prefixes.isEmpty()) {
//        error "Can't be empty"
//    }
//
//    return prefixes
//}

//string mkTblFile(string[] fqReads, string[] prefixes) {
//
//    string{} samplesMap
//
//    string[] sortedPrefixes = bubbleSort(prefixes).reverse()
//
//    for(string fq : fqReads) {
//
//        if(fq.lastIndexOf("_I1") > 0) {
//            continue
//        }
//
//        for(string prefix : prefixes) {
//
//            if(fq.baseName().startsWith(prefix)) {
//
//                string sampleName = samples{oldPrefix}
//                if(!samplesMap.hasKey(sampleName)) {
//                    samplesMap{sampleName} = ""
//                }
//                samplesMap{sampleName} += fq+","
//
//                break
//            }
//        }
//        // want to error out even if one of the fastq files wasn't accounted for
//        // i.e if samples sheet was missing old_prefix for one of the fastq files
//        if(noPrefix) {
//            error "No oldPrefix was found for this $fq file, check you samplesSheet $samplesSheet"
//        }
//    }
//    return samplesMap
//
//        }
//    }
//}

string[] getFqPrefix(string fqRead, string[] fqRgxs, string pairIds, string extn) {
    string localFqRead = fqRead.baseName()
    //attempt to guess fastq files extention that is including lane and _R prefix
    //if guessed, then
    for(string fqRgx : fqRgxs) {
        string[] tmp = localFqRead.split(fqRgx)
        int tmpLen = tmp.size()
        // if tmpLen stayed at 1 no split had happend, continue past the loop
        if(tmpLen > 1) {
            return [tmp[0], tmp[0]]
        }
        // if tmpLen is less 1 i.e zero then something is wrong with incoming fastq file
        if(tmpLen < 1) {
            error "This shouldn't happened, check makeSampleSheet function"
        }
    }
    int chkPairIds = pairIds.indexOf(",")
    if(chkPairIds == -1) {
        return [fqRead.baseName(extn), fqRead.baseName(extn)]
    }
    else if(chkPairIds != -1) {
        string[] pairIdsList = pairIds.split(",")
        //TODO do I want to check if after the split each string isn't empty?
        // in case user passed in -pairIds ","
        int oneIdx = localFqRead.lastIndexOf(pairIdsList[0])
        int twoIdx = localFqRead.lastIndexOf(pairIdsList[1])

        if(oneIdx != -1 || twoIdx != -1) {
            return [localFqRead.substr(0, oneIdx), localFqRead.substr(0, oneIdx)]
        }
        else if( (oneIdx == -1) && (twoIdx == -1) ) {
            return [fqRead.baseName(extn), fqRead.baseName(extn)]
        }
        else {
            error "No oldPrefix was found, although this shouldn't really happend"
        }
    }
    else {
        error "This can't happend"
    }
}
string makeSamplesSheet(string[] fqReads, string[] fqRgxs, bool paired, string pairIds, string extn, string sikDir) {
    string{} autoGen

    string[] pairIdsList = pairIds.split(",")

    //NOTE figured out that I'm putting an empty key = value pair into autoGen
    // this is because everytime there _R2 an empty list returned by getFqPrefix
    // which then gets converted to an empty key = value pair
    // get uniq prefix
    for(string fq : fqReads) {

        int chkPairIds = pairIds.indexOf(",")
        if(chkPairIds != -1) {
            string chkR2 = fq.replace(pairIdsList[0], pairIdsList[1])
            if(!paired && chkR2.exists()) {
                error "-paired set to $paired, but found $pairIdsList[1] read. Is it paired-end data? Also check your -pairIds $pairIds"
            }
            if(paired && !chkR2.exists()) {
                error "-paired set to $paired, but can't find $pairIdsList[1] read. Is it single-end data? Also check your -pairIds $pairIds"
            }
        }
        else if(chkPairIds == -1 && paired) {
            error "pairIds set to $pairIds and paired set to $paired. This is a conflict"
        }

        string[] prefix = getFqPrefix(fq, fqRgxs, pairIds, extn)
        autoGen{prefix[0]} = prefix[1]
    }
    // convert hash into a string
    string samplesConfig = "oldPrefix\tnewPrefix\n"
    for(string k : autoGen.keys()) {
        //NOTE here is work around for the statement above about an empty key = value pair
        // not particular happy with it, but should do for now
        if(!k.isEmpty()) {
            samplesConfig += "$k\t" + autoGen{k} + "\n"
        }
    }
    // write samples sheet out to a file
    string samplesSheet = sikDir+"/samplesSheet.txt"
    if(!samplesSheet.exists() && !samplesSheet.isFile()) {
        samplesSheet.write(samplesConfig)
    }
    else if(samplesSheet.exists()) {
        warning "Samples sheet file $samplesSheet already exists, NOT overwriting it! Rename the file if you want new samples sheet file"
    }
    return samplesSheet
}


string{} mkBamsMap(string bamsDir, string samplesSheet) {
    string{} bamsMap

    string{} samples = config(samplesSheet)
    string[] oldPrefixes = samples.keys()
    oldPrefixes = oldPrefixes.sort().reverse()

    for(string bam : bamsDir.dirPath()) {
        bool noPrefix = true

        if(bam.endsWith(".bam")) {
            for(string oldPrefix : oldPrefixes) {
                if(bam.baseName().startsWith(oldPrefix)) {
                    noPrefix = false
                    string bamName = samples{oldPrefix}
                    if(bamsMap.hasKey(bamName)) {
                        error "This should happened, please report this, mkBamsMap function"
                    }
                    bamsMap{bamName} = bam
                }
            }
        }
        // want to error out even if one of the fastq files wasn't accounted for
        // i.e if samples sheet was missing old_prefix for one of the fastq files
        if(noPrefix) {
            error "No oldPrefix was found for this $bam file, check you samplesSheet $samplesSheet"
        }
    }
    return bamsMap
}
