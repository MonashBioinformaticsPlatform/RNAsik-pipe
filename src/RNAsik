#!/usr/bin/env bds

#----------------------------------------------------------------------------------------------------
# RNAsik-pipe is an easy way from FASTQ to differential gene expression #degust
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik-pipe
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the STAR runtime
#   * Gets count data, checks both reverse strand and no strands 
#   * Prepares BAM files for RNAseQC report
#   * Gets both RNA-SeQC report and Fastqc report
#
#----------------------------------------------------------------------------------------------------
include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikExtraOptions.bds"
include "sikMakeIndices.bds"
include "sikLog.bds"
include "sikFqFiles.bds"
include "sikSTARaligner.bds"
include "sikCounts.bds"
include "sikPrePro.bds"
include "sikQCreports.bds"
#------------------------------
# Check cmd args
#------------------------------
string date = sys date
logit(">Starting new RNAsik-pipe run", date.trim())
string checkCmdInput = checkCmdArgs()
#------------------------------
# Parse config file
#------------------------------
if(!configFile.isEmpty()) logit("Config file parameters passed by user", configFile.read())
else {
    string getProgPath = programPath.pathName()
    configFile = getProgPath+"/../sik.config"
    logit("Default config file parameters", configFile.read())
}
string{} cmdExe = config(configFile)
#------------------------------
# Global Variables
#------------------------------
// list of fastq files
string[] fqFiles
// local Fasta file
if( (!fastaRef.isEmpty()) && (!fastaRef.isFile()) ) error "Check your path to fasta file. It dosen't point to a file. $fastaRef"
string localFastaRef = makeLocalFastaRef(fastaRef)
// local GTF file
if( (!gtfFile.isEmpty()) && (!gtfFile.isFile()) ) error "Check your path to gtf file. It dosen't point to a file. $gtfFile"
string localGTF = makeLocalGTF(gtfFile)
if(localGTF.extName() == "gff") setGFF = true
// Make indices if required 
logit("FASTA file in use", localFastaRef)
logit("Annotation file in use", localGTF)
// 
string fastaDictFile = makeDictFile(cmdExe, localFastaRef)
logit("FASTA dict file for picard", fastaDictFile)
// STAR index cmd options
string{} idxOpts
string allIdxOpts = getOpts(getOptsMap("starIndex", idxOpts, extraOpts))
logit("STAR indexing cmd options", allIdxOpts)
// get genomeIdx directory
if( !fastaRef.isEmpty() && genomeIdx.isEmpty() && (!align.isEmpty() || align == "index") ) {
    genomeIdx = makeSTARindex(cmdExe, localFastaRef, localGTF, allIdxOpts, threads)
} 
logit("STAR genomic index", genomeIdx)
// grab all FASTQ files
fqFiles = getFqFiles(fqDir, extn)
string{} fqMap = getFqMap(fqFiles, fqRegex, samplesSheet, extn)
// for loggin purpose convert map to string and write it to a file
string toString = fqMap
logit("Fastq files map, where key = rootName = bam file name and value actual fastq file with that rootName", toString)
// STAR default options
string{} starOpts = { "--outSAMtype" => "BAM Unsorted", \
                      "--outSAMunmapped" => "Within", \
                      "--readFilesCommand" => "zcat"}
string allSTARopts = getOpts(getOptsMap("STAR", starOpts, extraOpts))
logit("STAR alignment cmd options", allSTARopts)
//string  list of bam files from STAR run
string[] bamsList = mapSTAR(cmdExe, fqMap, allSTARopts, genomeIdx, threads)
// featureCounts cmd options
string{} countsOpts = { "-a" => localGTF }
if(paired) countsOpts{"-p"} = ""
string allCountOpts = getOpts(getOptsMap("featureCounts", countsOpts, extraOpts))
//
if(!fqMap && ( (count) || (prePro) ) ) {
    warning "No information about paired end. Use -paired to indicated paired end data"
    // get bam file from the bamFiles directory
    if(bamFiles.exists()) bamsList = bamFiles.dirPath("*.bam")
    else error "No bam files or bamFiles directory was found. You can pass bam files using -bamFiles /path/to/bamFiles/dir"
}
// where BAM had been sorted, reorted and duplicates marked
string[] markedBams
//TODO This is tmp measure for RNAseQC, need to clean up later
markedBams = getMarkedBams(cmdExe, bamsList, localFastaRef, fastaDictFile)
//if(prePro) logit("Corresponding bam file with marked dups", mdupsBam)
// get counts
string[] featureCounts = getReadsCount(cmdExe, bamsList, allCountOpts, localGTF, threads)
string[] degust = getDegust(cmdExe, featureCounts, bamsList.size(), localGTF, setGFF, threads)
// FastQC report
string{} fastqcOpts = { "--format" => "fastq", \
                        "--quite" => ""}
//fastqcOpts{ "--casava" } = ""
string fqQcOpts = getOpts(getOptsMap("fastqc", fastqcOpts, extraOpts))
string[] fqcReport = getFastqcReport(cmdExe, fqFiles, fqQcOpts, extn, threads)
// gather all files up for multiqc 
string[] multiqcDeps = bamFiles + markedBams + degust + fqcReport
//
string qcReport = getMultiqc(cmdExe, multiqcDeps)
logit("Multiqc will run on this directory", qcReport)
// RNAseQC report
if(RNAseQC){
    if(!prePro) markedBams = proBams.dirPath("*.bam")
    if(!markedBams) error "No pre-processed BAM files were found, either used -prePro options or specify directory with appropriate BAM files using `-proBams path/to/you/bams/directory`"
    string sampleIdsFile = "RNAseQC-sampleIds.txt"
    string RNAseQCsampleIds = getSampleIds(markedBams)
    sampleIdsFile.write(RNAseQCsampleIds)
    // current options 
    string{} rnaseqcOpts
    if(!paired) rnaseqcOpts = { "-singleEnd" => "" }
    //
    //string cmdOptions = getCmdOptions("RNAseQC", extraOpts)
    //string additionalRNAseQCoptions = getAllOptions(cmdOptions, currentRNAseQCoptions)
    string opts = getOpts(getOptsMap("RNAseQC", rnaseqcOpts, extraOpts))
    // make Fai file if dosen't exist
    string getSamtoolsExe = cmdExe{"samtoolsExe"}
    string fastaFaiFile = makeFaiFile(getSamtoolsExe, localFastaRef)
    // get RNAseQC report 
    string getRNAseQCexe = cmdExe{"RNAseQCexe"}
    string qcReport = getRNAseQC(getRNAseQCexe, sampleIdsFile, markedBams, localFastaRef, localGTF, opts)
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
