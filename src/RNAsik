#/usr/bin/env bds

#----------------------------------------------------------------------------------------------------
# RNAsik is fully sick way to get from FASTQ to list of counts, ready to load Degust file and more !
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the mappinig step
#   * Gets count files, cleans them up and adds gene symbols and biotypes.
#   * Finds out library strand
#
#----------------------------------------------------------------------------------------------------
include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikExtraOptions.bds"
include "sikMakeIndices.bds"
include "sikLog.bds"
include "sikFqFiles.bds"
include "sikSTARaligner.bds"
include "sikCounts.bds"
include "sikPrePro.bds"
include "sikQCreports.bds"
include "sikExonicRate.bds"
// Check cmd args first up
string checkCmdInput = checkCmdArgs()
#------------------------------
# Make directories
#------------------------------
string sikDir
if(!outDir.isEmpty()) {
    if(!outDir.exists()) {
        outDir.mkdir()
        sikDir = outDir
    }
    else sikDir = outDir
}
else sikDir = "sikRun"

if(!sikDir.exists()) sikDir.mkdir()
string logFile = sikDir+"/"+"logFile.txt"
string refFiles = sikDir+"/"+"refFiles"
if(!refFiles.exists()) refFiles.mkdir()
string bamFiles = sikDir+"/"+"bamFiles"
if( (!bamFiles.exists()) && (!align.isEmpty()) ) bamFiles.mkdir()
string countFiles = sikDir+"/"+"countFiles"
if((!countFiles.exists()) && (count)) countFiles.mkdir()
string markedDupsBams = sikDir+"/"+"markedDupsBams"
if((!markedDupsBams.exists()) && (prePro)) markedDupsBams.mkdir()
//string qualiMapResults = sikDir+"/"+"qualiMapResults"
//if((!qualiMapResults.exists()) && (exonicRate)) qualiMapResults.mkdir()
string fastqcReport = sikDir+"/"+"fastqcReport"
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()
// Start loging
string date = sys date
logit(logFile, ">Starting new RNAsik run", date.trim())
#------------------------------
# Parse config file
#------------------------------
if(!configFile.isEmpty()) logit(logFile, "Config file parameters passed by user", configFile.read())
else {
    string getProgPath = programPath.pathName()
    configFile = getProgPath+"/../sik.config"
    logit(logFile, "Executables path", configFile.read())
}
string{} cmdExe = config(configFile)
#------------------------------
# Global Variables
#------------------------------
// list of fastq files
string[] fqFiles
// local Fasta file
if( (!fastaRef.isEmpty()) && (!fastaRef.isFile()) ) error "Check your path to fasta file. It dosen't point to a file. $fastaRef"
string localFastaRef = makeLocalFastaRef(fastaRef, refFiles)
// local GTF file
if( (!gtfFile.isEmpty()) && (!gtfFile.isFile()) ) error "Check your path to gtf file. It dosen't point to a file. $gtfFile"
string localGTF = makeLocalGTF(gtfFile, refFiles)
if(localGTF.extName() == "gff") setGFF = true
// Make indices if required 
logit(logFile, "Referece FASTA file", localFastaRef)
logit(logFile, "Reference GTF file", localGTF)
// 
string fastaDictFile = makeDictFile(cmdExe, localFastaRef)
logit(logFile, "Picard dictionary file", fastaDictFile)
// STAR index cmd options
string{} idxOpts
string allIdxOpts = getOpts(getOptsMap("starIndex", idxOpts, extraOpts))
logit(logFile, "STAR indexing cmd options", allIdxOpts)
// get genomeIdx directory
if( !fastaRef.isEmpty() && genomeIdx.isEmpty() && (!align.isEmpty() || align == "starIdx") ) {
    genomeIdx = makeSTARindex(cmdExe, refFiles, localFastaRef, localGTF, allIdxOpts, threads)
} 
logit(logFile, "STAR genomic index directory", genomeIdx)
// grab all FASTQ files
fqFiles = getFqFiles(fqDir, extn)
string{} fqMap = getFqMap(fqFiles, fqRegex, samplesSheet, extn)
// for loggin purpose convert map to string and write it to a file
string toString = fqMap
logit(logFile, "Fastq files map, where key = rootName = bam file name and value actual fastq file with that rootName", toString)
// STAR default options
string{} starOpts = { "--outSAMtype" => "BAM Unsorted", \
                      "--outSAMunmapped" => "Within"}

if(extn.endsWith(".gz")) starOpts{"--readFilesCommand"} = "zcat"
else starOpts{"--readFilesCommand"} = "cat"

string allSTARopts = getOpts(getOptsMap("STAR", starOpts, extraOpts))
logit(logFile, "STAR alignment cmd options", allSTARopts)
//string  list of bam files from STAR run
string[] bamsList = mapSTAR(cmdExe, bamFiles, fqMap, allSTARopts, genomeIdx, threads, logFile)
// featureCounts cmd options
string{} countsOpts = { "-a" => localGTF }
if(paired) countsOpts{"-p"} = ""
string allCountOpts = getOpts(getOptsMap("featureCounts", countsOpts, extraOpts))
logit(logFile, "featureCounts cmd options", allCountOpts)
//
if(!fqMap && ( (count) || (prePro) || (exonicRate) ) ) {
    warning "No paired information found. Use -paired to indicated paired end data"
    // get bam file from the bamFiles directory
    if(bamFiles.exists()) bamsList = bamFiles.dirPath("*.bam")
    else error "No bam files or bamFiles directory was found. You can pass bam files using -bamFiles /path/to/bamFiles/dir"
}
// where BAM had been sorted, reorted and duplicates marked
string[] markedBams = getMarkedBams(cmdExe, markedDupsBams, bamsList, localFastaRef, fastaDictFile, logFile)
// get counts
string[] featureCounts = getReadsCount(cmdExe, countFiles, bamsList, allCountOpts, localGTF, threads)
// get strand info
string strandInfo = getStrandInfo(cmdExe, featureCounts)
if(exonicRate) {
    //TODO maybe error is to strong. Have a think of a way to including warning instead. 
    if(!count && strand.isEmpty()) error "No strand information found. Use -count flag to get it. Alternatively use -strand flag with appropriate strand type."
    if(!count && !strand.isEmpty()) strandInfo = strand
}
string[] degust = getDegust(cmdExe, sikDir, featureCounts, bamsList.size(), localGTF, setGFF, threads)
// get Int(ra|er)genic rates
string[] exonicRates = getExonicRates(cmdExe, sikDir, bamsList, localGTF, strandInfo, logFile)
// FastQC report
string{} fastqcOpts = { "--format" => "fastq", \
                        "--quiet" => ""}
//fastqcOpts{ "--casava" } = ""
string fqQcOpts = getOpts(getOptsMap("fastqc", fastqcOpts, extraOpts))
string[] fqQcReport = getFastqcReport(cmdExe, fastqcReport, fqFiles, fqQcOpts, extn, threads)
// gather all files up for multiqc 
string[] multiqcDeps
if(!align.isEmpty()) multiqcDeps += bamsList
if(prePro) multiqcDeps += markedBams
if(count) multiqcDeps += degust
if(fastqc) multiqcDeps += fqQcReport
if(exonicRate) multiqcDeps += exonicRates
string qcReport = getMultiqc(cmdExe, sikDir, multiqcDeps)
logit(logFile, "Multiqc will run on this directory", qcReport)
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
