
#----------------------------------------------------------------------------------------------------
# RNAsik is fully sick way to get from FASTQ to list of counts, ready to load Degust file and more !
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#
#    About RNAsik
#
#   * Takes a whole directory with FASTQ files
#   * Understands if FASTQ files are paired end or single end
#   * Understands if samples span different lanes. Merges all sample's lane at the mappinig step
#   * Gets count files, cleans them up and adds gene symbols and biotypes.
#   * Finds out library strand
#
#----------------------------------------------------------------------------------------------------
include "sikHeader.bds"
include "sikSanityCheck.bds"
include "sikMakeIndices.bds"
include "sikLog.bds"
include "sikFqFiles.bds"
include "sikMapping.bds"
include "sikIndexing.bds"
include "sikCounts.bds"
include "sikPrePro.bds"
include "sikQCreports.bds"
include "sikExonicRate.bds"
//include "sikCleanUp.bds"
// Check cmd args first up
string checkCmdInput = checkCmdArgs()
// set main directory
string sikDir
if(!outDir.isEmpty()) {
    if(!outDir.exists()) {
        outDir.mkdir()
        sikDir = outDir
    }
    else sikDir = outDir
}
else sikDir = "sikRun"
// make directories as required
if(!sikDir.exists()) sikDir.mkdir()
string logFile = sikDir+"/"+"logFile.txt"
string refFiles = sikDir+"/"+"refFiles"
if(!refFiles.exists()) refFiles.mkdir()
string bamFiles = sikDir+"/"+"bamFiles"
if( (!bamFiles.exists()) && (!fqDir.isEmpty()) ) bamFiles.mkdir()
string countFiles = sikDir+"/"+"countFiles"
if((!countFiles.exists()) && (count)) countFiles.mkdir()
string markedDupsBams = sikDir+"/"+"markedDupsBams"
if((!markedDupsBams.exists()) && (prePro)) markedDupsBams.mkdir()
string fastqcReport = sikDir+"/"+"fastqcReport"
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()
// Start loging
string date = sys date
logit(logFile, ">Starting new RNAsik run", date.trim())
// Parse config file
if(!configFile.isEmpty()) logit(logFile, "Config file parameters passed by user", configFile.read())
else {
    string getProgPath = programPath.pathName()
    configFile = getProgPath+"/../sik.config"
    logit(logFile, "Paths to the executables", configFile.read())
}
string{} cmdExe = config(configFile)
// local Fasta file
string localFastaRef
if(!fastaRef.isEmpty()) localFastaRef = makeLocalRef(fastaRef, refFiles, "fasta")
logit(logFile, "Referece FASTA file", localFastaRef)
// local GTF file
string localGTF
if(!gtfFile.isEmpty()) localGTF = makeLocalRef(gtfFile, refFiles, "gtf")
logit(logFile, "Reference GTF file", localGTF)
// checking if annoation file is gff
if(localGTF.extName() == "gff") setGFF = true
logit(logFile, "You are using GFF annotation file", setGFF)
// get .dict file 
string fastaDictFile = makeDictFile(cmdExe, localFastaRef)
logit(logFile, "Picard dictionary file", fastaDictFile)
// get genomeIdx 
if( !align.isEmpty() && genomeIdx.isEmpty() ) {
    genomeIdx = getIdx(cmdExe, align, setGFF, refFiles, localFastaRef, localGTF, extraOpts, threads, logFile)
} 
logit(logFile, "STAR genomic index directory", genomeIdx)
//log if -samplesSheet was used
if(!samplesSheet.isEmpty()) logit(logFile, "Samples Sheet: Old prefix \\t New prefix", parseMap(config(samplesSheet)))
// list of fastq files
string[] fqFiles
// grab all FASTQ files recursively
if(!fqDir.isEmpty()) fqFiles = getFqFiles(fqDir, extn, sikDir)
logit(logFile, "Fastq files found in the fqDir directory", parseList(fqFiles))
// map of FASTQ to unique name i.e gathering FASTQ that are split across different lanes
string{} fqMap
if(!fqDir.isEmpty()) fqMap = getFqMap(fqFiles, fqRegex, samplesSheet, extn)
logit(logFile, "Fastq files grouped by samples", parseFqMap(fqMap))
// BAM files
string[] bamsList = getBams(cmdExe, align, bamFiles, fqMap, extraOpts, genomeIdx, threads, memory, logFile)
logit(logFile, "BAM files", parseList(bamsList))
// If user wants to use other parts of the pipeline without generating BAM files
if(!fqMap && ( (count) || (prePro) || (exonicRate) ) ) {
    warning "No paired information found. Use -paired to indicated paired end data"
    // get bam file from the bamFiles directory
    if(bamFiles.exists()) bamsList = bamFiles.dirPath("*.bam")
    else error "No bam files or bamFiles directory was found. You can pass bam files using -bamFiles /path/to/bamFiles/dir"
}
// sorted, reorted and marking duplicates in BAM files
string[] markedBams = getMarkedBams(cmdExe, markedDupsBams, bamsList, localFastaRef, fastaDictFile)
logit(logFile, "Pre-processed BAM files", parseList(markedBams))
// featureCounts cmd options
string{} countsOpts = { "-a" => localGTF }
if(paired) countsOpts{"-p"} = ""
string allCountOpts = getOpts(getOptsMap("featureCounts", countsOpts, extraOpts))
logit(logFile, "featureCounts cmd options", allCountOpts)
// get counts
string[] featureCounts = getReadsCount(cmdExe, countFiles, bamsList, allCountOpts, localGTF, threads)
logit(logFile, "Raw counts from featureCounts", parseList(featureCounts))
// get strand info
string strandInfo = getStrandInfo(cmdExe, featureCounts)
if(strandInfo.isFile()) logit(logFile, "The library strandness was detected as:", strandInfo.read().trim())
logit(logFile, "The library appears to be paired end:", paired)
if(exonicRate) {
    //TODO maybe error is to strong. Have a think of a way to including warning instead. 
    if(!count && strand.isEmpty()) error "No strand information found. Use -count flag to get it. Alternatively use -strand flag with appropriate strand type."
    if(!count && !strand.isEmpty()) strandInfo = strand
}
string[] degust = getDegust(cmdExe, sikDir, featureCounts, bamsList.size(), localGTF, setGFF, threads)
logit(logFile, "Degust ready, protein_coding counts only", parseList(degust))
string{} exonicOpts = { "-gtf" => localGTF }
if(paired) {
    // flag for paired end data
    exonicOpts{"--paired"} = ""
    // bams need to be sorted by name, which is default output from STAR
    //TODO need to reinforce this! If user will output SortedByCoordinates from STAR 
    // then this will no longer be true
    exonicOpts{"--sorted"} = ""
}
string allExonicOpts = getOpts(getOptsMap("qualimap", exonicOpts, extraOpts))
logit(logFile, "QualiMap additional cmd options", allExonicOpts)
// get Int(ra|er)genic rates
string[] exonicRates = getExonicRates(cmdExe, sikDir, bamsList, allExonicOpts, strandInfo, gtfFile, logFile)
logit(logFile, "Exonic rates files", parseList(exonicRates))
// FastQC report
string{} fastqcOpts = { "--format" => "fastq", \
                        "--quiet" => ""}
//fastqcOpts{ "--casava" } = ""
string fqQcOpts = getOpts(getOptsMap("fastqc", fastqcOpts, extraOpts))
logit(logFile, "FastQC additional cmd options", fqQcOpts)
string[] fqQcReport = getFastqcReport(cmdExe, fastqcReport, fqFiles, fqQcOpts, extn, threads)
logit(logFile, "FastQC reports", parseList(fqQcReport))
// removed BAMS from STAR output to save space, use -keepBams if you'd like to keep them
//TODO I think best approach for cleaning up would be as a separate flag e.g -cleanUp
// that will make it explicit for user that lots of intermidiate files will be deleted
// otherwise I'm running a risk deleting dependencies files. Although when pipeline becomes more mature
// -cleanUp can be set to true by defualt
// also make -cleanUp work with -outDir such that user can pass in just those two options and that directory will be cleaned
//string cleanUp = cleanBamsUp(bamsList, markedBams, featureCounts, exonicRates)
// gather all files up for multiqc 
string[] multiqcDeps
if(!align.isEmpty()) multiqcDeps += bamsList
if(prePro) multiqcDeps += markedBams
if(count) multiqcDeps += degust
if(fastqc) multiqcDeps += fqQcReport
if(exonicRate) multiqcDeps += exonicRates
logit(logFile, "MultiQC dependency files", parseList(multiqcDeps))

string{} multiqcOpts = {}

if(cmdExe.hasKey("multiqcConfig")) {
    multiqcOpts{"--config"} = cmdExe{"multiqcConfig"}
}

string allMultiqcOpts = getOpts(getOptsMap("multiqc", multiqcOpts, extraOpts))
string qcReport = getMultiqc(cmdExe, sikDir, multiqcDeps, allMultiqcOpts)
logit(logFile, "Multiqc will run on this directory", qcReport)
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------
